/* Generated by Yosys 0.8+147 (git sha1 266511b2, gcc 8.2.1 -fPIC -Os) */

module a(valid, payload_branch_predict_taken, payload_branch_taken, \valid$1 , rst, clk, \valid$2 , kill, \stall$3 , stall);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$4 ;
  wire \$6 ;
  wire \$9 ;
  reg \$next\kill ;
  reg \$next\kill$8 ;
  reg \$next\stall$3 ;
  reg \$next\valid$2 ;
  input clk;
  output kill;
  wire \kill$8 ;
  input payload_branch_predict_taken;
  input payload_branch_taken;
  input rst;
  input stall;
  output \stall$3 ;
  input valid;
  input \valid$1 ;
  output \valid$2 ;
  reg \valid$2  = 1'h0;
  assign \$9  = \$6  | \kill$8 ;
  assign \$11  = ~ payload_branch_taken;
  assign \$13  = payload_branch_predict_taken & \$11 ;
  assign \$15  = \$13  & \valid$1 ;
  assign \$17  = 1'h0 | \$15 ;
  assign \$19  = ~ payload_branch_predict_taken;
  assign \$21  = \$19  & payload_branch_taken;
  assign \$23  = \$21  & \valid$1 ;
  assign \$25  = \$17  | \$23 ;
  assign \$27  = 1'h0 | stall;
  assign \$4  = ~ \stall$3 ;
  assign \$6  = ~ stall;
  always @(posedge clk)
      \valid$2  <= \$next\valid$2 ;
  always @* begin
    \$next\valid$2  = \valid$2 ;
    casez ({ \$9 , \$4  })
      2'bz1:
          \$next\valid$2  = valid;
      2'b1z:
          \$next\valid$2  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$2  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill  = 1'h0;
    \$next\kill  = \kill$8 ;
  end
  always @* begin
    \$next\kill$8  = 1'h0;
    \$next\kill$8  = \$25 ;
  end
  always @* begin
    \$next\stall$3  = 1'h0;
    \$next\stall$3  = \$27 ;
  end
  assign \stall$3  = \$next\stall$3 ;
  assign \kill$8  = \$next\kill$8 ;
  assign kill = \$next\kill ;
endmodule

module adder(src2, op, overflow, result, carry, src1);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  reg [31:0] \$next\addsub_a ;
  reg \$next\addsub_add ;
  reg [31:0] \$next\addsub_b ;
  reg \$next\carry ;
  reg \$next\overflow ;
  reg \$next\overflow_add ;
  reg \$next\overflow_sub ;
  reg [31:0] \$next\result ;
  wire [31:0] addsub_a;
  wire addsub_add;
  wire [31:0] addsub_b;
  wire addsub_cout;
  wire [31:0] addsub_result;
  output carry;
  input op;
  output overflow;
  wire overflow_add;
  wire overflow_sub;
  output [31:0] result;
  input [31:0] src1;
  input [31:0] src2;
  assign \$9  = src1[31] & \$7 ;
  assign \$11  = ~ result[31];
  assign \$13  = \$9  & \$11 ;
  assign \$15  = overflow_add | overflow_sub;
  assign \$17  = ~ op;
  assign \$1  = ~ src1[31];
  assign \$3  = \$1  & src2[31];
  assign \$5  = \$3  & result[31];
  assign \$7  = ~ src2[31];
  addsub addsub (
    .a(addsub_a),
    .add(addsub_add),
    .b(addsub_b),
    .cout(addsub_cout),
    .result(addsub_result)
  );
  always @* begin
    \$next\overflow_add  = 1'h0;
    \$next\overflow_add  = \$5 ;
  end
  always @* begin
    \$next\overflow_sub  = 1'h0;
    \$next\overflow_sub  = \$13 ;
  end
  always @* begin
    \$next\overflow  = 1'h0;
    \$next\overflow  = \$15 ;
  end
  always @* begin
    \$next\addsub_add  = 1'h0;
    \$next\addsub_add  = \$17 ;
  end
  always @* begin
    \$next\addsub_a  = 32'd0;
    \$next\addsub_a  = src1;
  end
  always @* begin
    \$next\addsub_b  = 32'd0;
    \$next\addsub_b  = src2;
  end
  always @* begin
    \$next\result  = 32'd0;
    \$next\result  = addsub_result;
  end
  always @* begin
    \$next\carry  = 1'h0;
    \$next\carry  = addsub_cout;
  end
  assign carry = \$next\carry ;
  assign result = \$next\result ;
  assign addsub_b = \$next\addsub_b ;
  assign addsub_a = \$next\addsub_a ;
  assign addsub_add = \$next\addsub_add ;
  assign overflow = \$next\overflow ;
  assign overflow_sub = \$next\overflow_sub ;
  assign overflow_add = \$next\overflow_add ;
endmodule

module addsub(b, add, result, cout, a);
  wire [32:0] \$1 ;
  wire [32:0] \$3 ;
  wire [31:0] \$5 ;
  wire \$7 ;
  reg [32:0] \$next\add_ab ;
  reg \$next\cout ;
  reg [31:0] \$next\result ;
  reg [32:0] \$next\sub_ab ;
  input [31:0] a;
  input add;
  wire [32:0] add_ab;
  input [31:0] b;
  output cout;
  output [31:0] result;
  wire [32:0] sub_ab;
  assign \$1  = a + b;
  assign \$3  = a - b;
  assign \$5  = add ? add_ab[31:0] : sub_ab[31:0];
  assign \$7  = add ? add_ab[32] : sub_ab[32];
  always @* begin
    \$next\add_ab  = 33'h000000000;
    \$next\add_ab  = \$1 ;
  end
  always @* begin
    \$next\sub_ab  = 33'h000000000;
    \$next\sub_ab  = \$3 ;
  end
  always @* begin
    \$next\result  = 32'd0;
    \$next\result  = \$5 ;
  end
  always @* begin
    \$next\cout  = 1'h0;
    \$next\cout  = \$7 ;
  end
  assign cout = \$next\cout ;
  assign result = \$next\result ;
  assign sub_ab = \$next\sub_ab ;
  assign add_ab = \$next\add_ab ;
endmodule

module anonymous(m_branch_predict_taken, m_branch_taken, d_branch_target, x_pc, m_branch_target, f_pc, a_pc, d_branch_predict_taken);
  wire \$1 ;
  wire [30:0] \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [30:0] \$9 ;
  reg [29:0] \$next\a_pc ;
  output [29:0] a_pc;
  input d_branch_predict_taken;
  input [29:0] d_branch_target;
  input [29:0] f_pc;
  input m_branch_predict_taken;
  input m_branch_taken;
  input [29:0] m_branch_target;
  input [29:0] x_pc;
  assign \$10  = f_pc + 1'h1;
  assign \$1  = ~ m_branch_taken;
  assign \$3  = m_branch_predict_taken & \$1 ;
  assign \$5  = ~ m_branch_predict_taken;
  assign \$7  = \$5  & m_branch_taken;
  always @* begin
    \$next\a_pc  = 30'h00000000;
    casez ({ \$7 , \$3 , d_branch_predict_taken })
      3'bzz1:
          \$next\a_pc  = d_branch_target;
      3'bz1z:
          \$next\a_pc  = x_pc;
      3'b1zz:
          \$next\a_pc  = m_branch_target;
      3'hz:
          \$next\a_pc  = \$9 [29:0];
    endcase
  end
  assign \$9  = \$10 ;
  assign a_pc = \$next\a_pc ;
endmodule

module \anonymous$1 (x_address, x_store_operand, w_load_mask, w_address, w_load_data, x_dbus_sel, x_store_data, w_load_result, x_mask);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire [31:0] \$15 ;
  wire [31:0] \$17 ;
  wire [31:0] \$3 ;
  wire [31:0] \$5 ;
  wire [31:0] \$7 ;
  wire [31:0] \$9 ;
  reg [31:0] \$next\w_load_result ;
  reg [3:0] \$next\x_dbus_sel ;
  reg [31:0] \$next\x_store_data ;
  input [31:0] w_address;
  input [31:0] w_load_data;
  input [2:0] w_load_mask;
  output [31:0] w_load_result;
  input [31:0] x_address;
  output [3:0] x_dbus_sel;
  input [2:0] x_mask;
  output [31:0] x_store_data;
  input [31:0] x_store_operand;
  assign \$9  = + w_load_data[31:24];
  assign \$11  = ~ w_address[1];
  assign \$13  = ~ w_address[1];
  assign \$15  = + w_load_data[15:0];
  assign \$17  = + w_load_data[31:16];
  assign \$1  = ~ x_address[1];
  assign \$3  = + w_load_data[7:0];
  assign \$5  = + w_load_data[15:8];
  assign \$7  = + w_load_data[23:16];
  always @* begin
    \$next\x_dbus_sel  = 4'h0;
    casez (x_mask[1:0])
      2'h0:
          casez (x_address[1:0])
            2'h0:
                \$next\x_dbus_sel  = 4'h1;
            2'h1:
                \$next\x_dbus_sel  = 4'h2;
            2'h2:
                \$next\x_dbus_sel  = 4'h4;
            2'h3:
                \$next\x_dbus_sel  = 4'h8;
          endcase
      2'h1:
          casez (\$1 )
            1'h1:
                \$next\x_dbus_sel  = 4'h3;
            1'hz:
                \$next\x_dbus_sel  = 4'hc;
          endcase
      2'h2:
          \$next\x_dbus_sel  = 4'hf;
    endcase
  end
  always @* begin
    \$next\x_store_data  = 32'd0;
    casez (x_mask)
      3'h0:
          \$next\x_store_data  = { x_store_operand[7:0], x_store_operand[7:0], x_store_operand[7:0], x_store_operand[7:0] };
      3'h1:
          \$next\x_store_data  = { x_store_operand[15:0], x_store_operand[15:0] };
      3'h2:
          \$next\x_store_data  = x_store_operand;
    endcase
  end
  always @* begin
    \$next\w_load_result  = 32'd0;
    casez (w_load_mask)
      3'h0:
          casez (w_address[1:0])
            2'h0:
                \$next\w_load_result  = { w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7:0] };
            2'h1:
                \$next\w_load_result  = { w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15:8] };
            2'h2:
                \$next\w_load_result  = { w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23:16] };
            2'h3:
                \$next\w_load_result  = { w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31:24] };
          endcase
      3'h4:
          casez (w_address[1:0])
            2'h0:
                \$next\w_load_result  = \$3 ;
            2'h1:
                \$next\w_load_result  = \$5 ;
            2'h2:
                \$next\w_load_result  = \$7 ;
            2'h3:
                \$next\w_load_result  = \$9 ;
          endcase
      3'h1:
          casez (\$11 )
            1'h1:
                \$next\w_load_result  = { w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15:0] };
            1'hz:
                \$next\w_load_result  = { w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31:16] };
          endcase
      3'h5:
          casez (\$13 )
            1'h1:
                \$next\w_load_result  = \$15 ;
            1'hz:
                \$next\w_load_result  = \$17 ;
          endcase
      3'h2:
          \$next\w_load_result  = w_load_data;
    endcase
  end
  assign w_load_result = \$next\w_load_result ;
  assign x_store_data = \$next\x_store_data ;
  assign x_dbus_sel = \$next\x_dbus_sel ;
endmodule

module bp(d_offset, d_jump, d_rs1_re, d_src1, d_pc, d_branch_predict_taken, d_branch_target, d_branch);
  wire \$1 ;
  wire [32:0] \$10 ;
  wire [32:0] \$12 ;
  wire [34:0] \$14 ;
  wire [33:0] \$3 ;
  wire [33:0] \$4 ;
  wire [33:0] \$5 ;
  wire [33:0] \$7 ;
  wire [34:0] \$9 ;
  reg \$next\d_branch_predict_taken ;
  reg [31:0] \$next\d_branch_target ;
  input d_branch;
  output d_branch_predict_taken;
  output [31:0] d_branch_target;
  input d_jump;
  input [31:0] d_offset;
  input [29:0] d_pc;
  input d_rs1_re;
  input [31:0] d_src1;
  assign \$10  = d_pc <<< 2'h2;
  assign \$12  = + $signed(d_offset);
  assign \$14  = $signed(\$10 ) + $signed(\$12 );
  assign \$1  = d_jump & d_rs1_re;
  assign \$5  = $signed(d_src1) + $signed(d_offset);
  assign \$7  = \$4 [33:1] <<< 1'h1;
  always @* begin
    \$next\d_branch_predict_taken  = 1'h0;
    casez (d_branch)
      1'h1:
          \$next\d_branch_predict_taken  = d_offset[31];
      1'hz:
          \$next\d_branch_predict_taken  = d_jump;
    endcase
  end
  always @* begin
    \$next\d_branch_target  = 32'd0;
    casez (\$1 )
      1'h1:
          \$next\d_branch_target  = \$3 [31:0];
      1'hz:
          \$next\d_branch_target  = \$9 [31:0];
    endcase
  end
  assign \$4  = \$5 ;
  assign \$3  = \$7 ;
  assign \$9  = \$14 ;
  assign d_branch_target = \$next\d_branch_target ;
  assign d_branch_predict_taken = \$next\d_branch_predict_taken ;
endmodule

module bu(cmp_zero, cmp_negative, cmp_overflow, cmp_carry, condition_met, condition);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  reg \$next\condition_met ;
  input cmp_carry;
  input cmp_negative;
  input cmp_overflow;
  input cmp_zero;
  input [2:0] condition;
  output condition_met;
  assign \$9  = cmp_negative == cmp_overflow;
  assign \$11  = ~ cmp_zero;
  assign \$13  = \$11  & cmp_carry;
  assign \$15  = ~ cmp_carry;
  assign \$1  = ~ cmp_zero;
  assign \$3  = ~ cmp_zero;
  assign \$5  = cmp_negative != cmp_overflow;
  assign \$7  = \$3  & \$5 ;
  always @* begin
    \$next\condition_met  = 1'h0;
    casez (condition)
      3'h0:
          \$next\condition_met  = cmp_zero;
      3'h1:
          \$next\condition_met  = \$1 ;
      3'h4:
          \$next\condition_met  = \$7 ;
      3'h5:
          \$next\condition_met  = \$9 ;
      3'h6:
          \$next\condition_met  = \$13 ;
      3'h7:
          \$next\condition_met  = \$15 ;
    endcase
  end
  assign condition_met = \$next\condition_met ;
endmodule

module csrf(wp_en, wp_addr, wp_data, port_we, port_dat_w_uie, port_dat_w_sie, port_dat_w_wpri0, port_dat_w_mie, port_dat_w_upie, port_dat_w_spie, port_dat_w_wpri1, port_dat_w_mpie, port_dat_w_spp, port_dat_w_wpri2, port_dat_w_mpp, port_dat_w_fs, port_dat_w_xs, port_dat_w_mprv, port_dat_w_sum, port_dat_w_mxr, port_dat_w_tvm, port_dat_w_tw, port_dat_w_tsr, port_dat_w_wpri3, port_dat_w_sd, \port_we$1 , port_dat_w_mode, port_dat_w_base, \port_we$2 , port_dat_w_ecode, port_dat_w_interrupt, \port_we$3 , port_dat_w_value, \port_we$4 , port_dat_w_usip, port_dat_w_ssip, port_dat_w_wiri0, port_dat_w_msip, port_dat_w_utip, port_dat_w_stip, port_dat_w_wiri1, port_dat_w_mtip, port_dat_w_ueip, port_dat_w_seip, port_dat_w_wiri2, port_dat_w_meip, port_dat_w_wiri3, \port_we$5 , port_dat_w_usie, port_dat_w_ssie, \port_dat_w_wpri0$6 , port_dat_w_msie, port_dat_w_utie, port_dat_w_stie, \port_dat_w_wpri1$7 , port_dat_w_mtie, port_dat_w_ueie, port_dat_w_seie, \port_dat_w_wpri2$8 , port_dat_w_meie, \port_dat_w_wpri3$9 , \port_we$10 , \port_dat_w_value$11 , \port_we$12 , \port_dat_w_value$13 , rst, clk, rp_data, port_dat_r_mie, port_dat_r_mpie, port_dat_r_mode, port_dat_r_base, port_dat_r_value, port_dat_r_msip, port_dat_r_mtip, port_dat_r_meip, port_dat_r_msie, port_dat_r_mtie, port_dat_r_meie, \port_dat_r_value$14 , rp_addr);
  reg [31:0] \$next$signal ;
  reg [31:0] \$next$signal$15 ;
  reg [31:0] \$next$signal$16 ;
  reg [31:0] \$next$signal$17 ;
  reg [31:0] \$next$signal$18 ;
  reg [31:0] \$next$signal$19 ;
  reg [31:0] \$next$signal$20 ;
  reg [31:0] \$next$signal$21 ;
  reg [31:0] \$next$signal$22 ;
  reg [31:0] \$next$signal$23 ;
  reg [31:0] \$next$signal$24 ;
  reg [31:0] \$next$signal$25 ;
  reg [31:0] \$next$signal$26 ;
  reg [31:0] \$next$signal$27 ;
  reg [31:0] \$next$signal$28 ;
  reg [29:0] \$next\port_dat_r_base ;
  reg [30:0] \$next\port_dat_r_ecode ;
  reg [1:0] \$next\port_dat_r_fs ;
  reg \$next\port_dat_r_interrupt ;
  reg \$next\port_dat_r_meie ;
  reg \$next\port_dat_r_meip ;
  reg \$next\port_dat_r_mie ;
  reg [1:0] \$next\port_dat_r_mode ;
  reg \$next\port_dat_r_mpie ;
  reg [1:0] \$next\port_dat_r_mpp ;
  reg \$next\port_dat_r_mprv ;
  reg \$next\port_dat_r_msie ;
  reg \$next\port_dat_r_msip ;
  reg \$next\port_dat_r_mtie ;
  reg \$next\port_dat_r_mtip ;
  reg \$next\port_dat_r_mxr ;
  reg \$next\port_dat_r_sd ;
  reg \$next\port_dat_r_seie ;
  reg \$next\port_dat_r_seip ;
  reg \$next\port_dat_r_sie ;
  reg \$next\port_dat_r_spie ;
  reg \$next\port_dat_r_spp ;
  reg \$next\port_dat_r_ssie ;
  reg \$next\port_dat_r_ssip ;
  reg \$next\port_dat_r_stie ;
  reg \$next\port_dat_r_stip ;
  reg \$next\port_dat_r_sum ;
  reg \$next\port_dat_r_tsr ;
  reg \$next\port_dat_r_tvm ;
  reg \$next\port_dat_r_tw ;
  reg \$next\port_dat_r_ueie ;
  reg \$next\port_dat_r_ueip ;
  reg \$next\port_dat_r_uie ;
  reg \$next\port_dat_r_upie ;
  reg \$next\port_dat_r_usie ;
  reg \$next\port_dat_r_usip ;
  reg \$next\port_dat_r_utie ;
  reg \$next\port_dat_r_utip ;
  reg [31:0] \$next\port_dat_r_value ;
  reg [31:0] \$next\port_dat_r_value$14 ;
  reg [31:0] \$next\port_dat_r_value$33 ;
  reg \$next\port_dat_r_wiri0 ;
  reg \$next\port_dat_r_wiri1 ;
  reg \$next\port_dat_r_wiri2 ;
  reg [19:0] \$next\port_dat_r_wiri3 ;
  reg \$next\port_dat_r_wpri0 ;
  reg \$next\port_dat_r_wpri0$29 ;
  reg \$next\port_dat_r_wpri1 ;
  reg \$next\port_dat_r_wpri1$30 ;
  reg [1:0] \$next\port_dat_r_wpri2 ;
  reg \$next\port_dat_r_wpri2$31 ;
  reg [7:0] \$next\port_dat_r_wpri3 ;
  reg [19:0] \$next\port_dat_r_wpri3$32 ;
  reg [1:0] \$next\port_dat_r_xs ;
  reg [31:0] \$next\rp_data ;
  reg [31:0] \$signal  = 32'd0;
  reg [31:0] \$signal$15  = 32'd0;
  reg [31:0] \$signal$16  = 32'd0;
  reg [31:0] \$signal$17  = 32'd0;
  reg [31:0] \$signal$18  = 32'd0;
  reg [31:0] \$signal$19  = 32'd0;
  reg [31:0] \$signal$20  = 32'd0;
  reg [31:0] \$signal$21  = 32'd0;
  reg [31:0] \$signal$22  = 32'd0;
  reg [31:0] \$signal$23  = 32'd0;
  reg [31:0] \$signal$24  = 32'd0;
  reg [31:0] \$signal$25  = 32'd0;
  reg [31:0] \$signal$26  = 32'd0;
  reg [31:0] \$signal$27  = 32'd0;
  reg [31:0] \$signal$28  = 32'd0;
  input clk;
  output [29:0] port_dat_r_base;
  wire [30:0] port_dat_r_ecode;
  wire [1:0] port_dat_r_fs;
  wire port_dat_r_interrupt;
  output port_dat_r_meie;
  output port_dat_r_meip;
  output port_dat_r_mie;
  output [1:0] port_dat_r_mode;
  output port_dat_r_mpie;
  wire [1:0] port_dat_r_mpp;
  wire port_dat_r_mprv;
  output port_dat_r_msie;
  output port_dat_r_msip;
  output port_dat_r_mtie;
  output port_dat_r_mtip;
  wire port_dat_r_mxr;
  wire port_dat_r_sd;
  wire port_dat_r_seie;
  wire port_dat_r_seip;
  wire port_dat_r_sie;
  wire port_dat_r_spie;
  wire port_dat_r_spp;
  wire port_dat_r_ssie;
  wire port_dat_r_ssip;
  wire port_dat_r_stie;
  wire port_dat_r_stip;
  wire port_dat_r_sum;
  wire port_dat_r_tsr;
  wire port_dat_r_tvm;
  wire port_dat_r_tw;
  wire port_dat_r_ueie;
  wire port_dat_r_ueip;
  wire port_dat_r_uie;
  wire port_dat_r_upie;
  wire port_dat_r_usie;
  wire port_dat_r_usip;
  wire port_dat_r_utie;
  wire port_dat_r_utip;
  output [31:0] port_dat_r_value;
  output [31:0] \port_dat_r_value$14 ;
  wire [31:0] \port_dat_r_value$33 ;
  wire port_dat_r_wiri0;
  wire port_dat_r_wiri1;
  wire port_dat_r_wiri2;
  wire [19:0] port_dat_r_wiri3;
  wire port_dat_r_wpri0;
  wire \port_dat_r_wpri0$29 ;
  wire port_dat_r_wpri1;
  wire \port_dat_r_wpri1$30 ;
  wire [1:0] port_dat_r_wpri2;
  wire \port_dat_r_wpri2$31 ;
  wire [7:0] port_dat_r_wpri3;
  wire [19:0] \port_dat_r_wpri3$32 ;
  wire [1:0] port_dat_r_xs;
  input [29:0] port_dat_w_base;
  input [30:0] port_dat_w_ecode;
  input [1:0] port_dat_w_fs;
  input port_dat_w_interrupt;
  input port_dat_w_meie;
  input port_dat_w_meip;
  input port_dat_w_mie;
  input [1:0] port_dat_w_mode;
  input port_dat_w_mpie;
  input [1:0] port_dat_w_mpp;
  input port_dat_w_mprv;
  input port_dat_w_msie;
  input port_dat_w_msip;
  input port_dat_w_mtie;
  input port_dat_w_mtip;
  input port_dat_w_mxr;
  input port_dat_w_sd;
  input port_dat_w_seie;
  input port_dat_w_seip;
  input port_dat_w_sie;
  input port_dat_w_spie;
  input port_dat_w_spp;
  input port_dat_w_ssie;
  input port_dat_w_ssip;
  input port_dat_w_stie;
  input port_dat_w_stip;
  input port_dat_w_sum;
  input port_dat_w_tsr;
  input port_dat_w_tvm;
  input port_dat_w_tw;
  input port_dat_w_ueie;
  input port_dat_w_ueip;
  input port_dat_w_uie;
  input port_dat_w_upie;
  input port_dat_w_usie;
  input port_dat_w_usip;
  input port_dat_w_utie;
  input port_dat_w_utip;
  input [31:0] port_dat_w_value;
  input [31:0] \port_dat_w_value$11 ;
  input [31:0] \port_dat_w_value$13 ;
  input port_dat_w_wiri0;
  input port_dat_w_wiri1;
  input port_dat_w_wiri2;
  input [19:0] port_dat_w_wiri3;
  input port_dat_w_wpri0;
  input \port_dat_w_wpri0$6 ;
  input port_dat_w_wpri1;
  input \port_dat_w_wpri1$7 ;
  input [1:0] port_dat_w_wpri2;
  input \port_dat_w_wpri2$8 ;
  input [7:0] port_dat_w_wpri3;
  input [19:0] \port_dat_w_wpri3$9 ;
  input [1:0] port_dat_w_xs;
  input port_we;
  input \port_we$1 ;
  input \port_we$10 ;
  input \port_we$12 ;
  input \port_we$2 ;
  input \port_we$3 ;
  input \port_we$4 ;
  input \port_we$5 ;
  input [11:0] rp_addr;
  output [31:0] rp_data;
  input rst;
  input [11:0] wp_addr;
  input [31:0] wp_data;
  input wp_en;
  always @(posedge clk)
      \$signal$28  <= \$next$signal$28 ;
  always @(posedge clk)
      \$signal$27  <= \$next$signal$27 ;
  always @(posedge clk)
      \$signal$26  <= \$next$signal$26 ;
  always @(posedge clk)
      \$signal$25  <= \$next$signal$25 ;
  always @(posedge clk)
      \$signal$24  <= \$next$signal$24 ;
  always @(posedge clk)
      \$signal$23  <= \$next$signal$23 ;
  always @(posedge clk)
      \$signal$22  <= \$next$signal$22 ;
  always @(posedge clk)
      \$signal$21  <= \$next$signal$21 ;
  always @(posedge clk)
      \$signal$20  <= \$next$signal$20 ;
  always @(posedge clk)
      \$signal$19  <= \$next$signal$19 ;
  always @(posedge clk)
      \$signal$18  <= \$next$signal$18 ;
  always @(posedge clk)
      \$signal$17  <= \$next$signal$17 ;
  always @(posedge clk)
      \$signal$16  <= \$next$signal$16 ;
  always @(posedge clk)
      \$signal$15  <= \$next$signal$15 ;
  always @(posedge clk)
      \$signal  <= \$next$signal ;
  always @* begin
    \$next\rp_data  = 32'd0;
    casez (rp_addr)
      12'hf11:
          \$next\rp_data  = \$signal ;
      12'hf12:
          \$next\rp_data  = \$signal$15 ;
      12'hf13:
          \$next\rp_data  = \$signal$16 ;
      12'hf14:
          \$next\rp_data  = \$signal$17 ;
      12'h300:
          \$next\rp_data  = \$signal$18 ;
      12'h301:
          \$next\rp_data  = \$signal$19 ;
      12'h304:
          \$next\rp_data  = \$signal$20 ;
      12'h305:
          \$next\rp_data  = \$signal$21 ;
      12'h340:
          \$next\rp_data  = \$signal$22 ;
      12'h341:
          \$next\rp_data  = \$signal$23 ;
      12'h342:
          \$next\rp_data  = \$signal$24 ;
      12'h343:
          \$next\rp_data  = \$signal$25 ;
      12'h344:
          \$next\rp_data  = \$signal$26 ;
      12'h330:
          \$next\rp_data  = \$signal$27 ;
      12'h360:
          \$next\rp_data  = \$signal$28 ;
    endcase
  end
  always @* begin
    \$next$signal  = \$signal ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'hf11:
                \$next$signal  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$23  = \$signal$23 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h341:
                \$next$signal$23  = wp_data;
          endcase
    endcase
    casez (\port_we$3 )
      1'h1:
          \$next$signal$23  = port_dat_w_value;
    endcase
    casez (rst)
      1'h1:
          \$next$signal$23  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$24  = \$signal$24 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h342:
                \$next$signal$24  = wp_data;
          endcase
    endcase
    casez (\port_we$2 )
      1'h1:
          \$next$signal$24  = { port_dat_w_interrupt, port_dat_w_ecode };
    endcase
    casez (rst)
      1'h1:
          \$next$signal$24  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$25  = \$signal$25 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h343:
                \$next$signal$25  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$25  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$26  = \$signal$26 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h344:
                \$next$signal$26  = wp_data;
          endcase
    endcase
    casez (\port_we$4 )
      1'h1:
          \$next$signal$26  = { port_dat_w_wiri3, port_dat_w_meip, port_dat_w_wiri2, port_dat_w_seip, port_dat_w_ueip, port_dat_w_mtip, port_dat_w_wiri1, port_dat_w_stip, port_dat_w_utip, port_dat_w_msip, port_dat_w_wiri0, port_dat_w_ssip, port_dat_w_usip };
    endcase
    casez (rst)
      1'h1:
          \$next$signal$26  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$27  = \$signal$27 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h330:
                \$next$signal$27  = wp_data;
          endcase
    endcase
    casez (\port_we$12 )
      1'h1:
          \$next$signal$27  = \port_dat_w_value$13 ;
    endcase
    casez (rst)
      1'h1:
          \$next$signal$27  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$28  = \$signal$28 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h360:
                \$next$signal$28  = wp_data;
          endcase
    endcase
    casez (\port_we$10 )
      1'h1:
          \$next$signal$28  = \port_dat_w_value$11 ;
    endcase
    casez (rst)
      1'h1:
          \$next$signal$28  = 32'd0;
    endcase
  end
  always @* begin
    \$next\port_dat_r_uie  = 1'h0;
    \$next\port_dat_r_sie  = 1'h0;
    \$next\port_dat_r_wpri0  = 1'h0;
    \$next\port_dat_r_mie  = 1'h0;
    \$next\port_dat_r_upie  = 1'h0;
    \$next\port_dat_r_spie  = 1'h0;
    \$next\port_dat_r_wpri1  = 1'h0;
    \$next\port_dat_r_mpie  = 1'h0;
    \$next\port_dat_r_spp  = 1'h0;
    \$next\port_dat_r_wpri2  = 2'h0;
    \$next\port_dat_r_mpp  = 2'h0;
    \$next\port_dat_r_fs  = 2'h0;
    \$next\port_dat_r_xs  = 2'h0;
    \$next\port_dat_r_mprv  = 1'h0;
    \$next\port_dat_r_sum  = 1'h0;
    \$next\port_dat_r_mxr  = 1'h0;
    \$next\port_dat_r_tvm  = 1'h0;
    \$next\port_dat_r_tw  = 1'h0;
    \$next\port_dat_r_tsr  = 1'h0;
    \$next\port_dat_r_wpri3  = 8'h00;
    \$next\port_dat_r_sd  = 1'h0;
    { \$next\port_dat_r_sd , \$next\port_dat_r_wpri3 , \$next\port_dat_r_tsr , \$next\port_dat_r_tw , \$next\port_dat_r_tvm , \$next\port_dat_r_mxr , \$next\port_dat_r_sum , \$next\port_dat_r_mprv , \$next\port_dat_r_xs , \$next\port_dat_r_fs , \$next\port_dat_r_mpp , \$next\port_dat_r_wpri2 , \$next\port_dat_r_spp , \$next\port_dat_r_mpie , \$next\port_dat_r_wpri1 , \$next\port_dat_r_spie , \$next\port_dat_r_upie , \$next\port_dat_r_mie , \$next\port_dat_r_wpri0 , \$next\port_dat_r_sie , \$next\port_dat_r_uie  } = \$signal$18 ;
  end
  always @* begin
    \$next$signal$15  = \$signal$15 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'hf12:
                \$next$signal$15  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$15  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$16  = \$signal$16 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'hf13:
                \$next$signal$16  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$16  = 32'd0;
    endcase
  end
  always @* begin
    \$next\port_dat_r_mode  = 2'h0;
    \$next\port_dat_r_base  = 30'h00000000;
    { \$next\port_dat_r_base , \$next\port_dat_r_mode  } = \$signal$21 ;
  end
  always @* begin
    \$next\port_dat_r_ecode  = 31'h00000000;
    \$next\port_dat_r_interrupt  = 1'h0;
    { \$next\port_dat_r_interrupt , \$next\port_dat_r_ecode  } = \$signal$24 ;
  end
  always @* begin
    \$next$signal$17  = \$signal$17 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'hf14:
                \$next$signal$17  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$17  = 32'd0;
    endcase
  end
  always @* begin
    \$next\port_dat_r_value  = 32'd0;
    \$next\port_dat_r_value  = \$signal$23 ;
  end
  always @* begin
    \$next\port_dat_r_usip  = 1'h0;
    \$next\port_dat_r_ssip  = 1'h0;
    \$next\port_dat_r_wiri0  = 1'h0;
    \$next\port_dat_r_msip  = 1'h0;
    \$next\port_dat_r_utip  = 1'h0;
    \$next\port_dat_r_stip  = 1'h0;
    \$next\port_dat_r_wiri1  = 1'h0;
    \$next\port_dat_r_mtip  = 1'h0;
    \$next\port_dat_r_ueip  = 1'h0;
    \$next\port_dat_r_seip  = 1'h0;
    \$next\port_dat_r_wiri2  = 1'h0;
    \$next\port_dat_r_meip  = 1'h0;
    \$next\port_dat_r_wiri3  = 20'h00000;
    { \$next\port_dat_r_wiri3 , \$next\port_dat_r_meip , \$next\port_dat_r_wiri2 , \$next\port_dat_r_seip , \$next\port_dat_r_ueip , \$next\port_dat_r_mtip , \$next\port_dat_r_wiri1 , \$next\port_dat_r_stip , \$next\port_dat_r_utip , \$next\port_dat_r_msip , \$next\port_dat_r_wiri0 , \$next\port_dat_r_ssip , \$next\port_dat_r_usip  } = \$signal$26 ;
  end
  always @* begin
    \$next$signal$18  = \$signal$18 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h300:
                \$next$signal$18  = wp_data;
          endcase
    endcase
    casez (port_we)
      1'h1:
          \$next$signal$18  = { port_dat_w_sd, port_dat_w_wpri3, port_dat_w_tsr, port_dat_w_tw, port_dat_w_tvm, port_dat_w_mxr, port_dat_w_sum, port_dat_w_mprv, port_dat_w_xs, port_dat_w_fs, port_dat_w_mpp, port_dat_w_wpri2, port_dat_w_spp, port_dat_w_mpie, port_dat_w_wpri1, port_dat_w_spie, port_dat_w_upie, port_dat_w_mie, port_dat_w_wpri0, port_dat_w_sie, port_dat_w_uie };
    endcase
    casez (rst)
      1'h1:
          \$next$signal$18  = 32'd0;
    endcase
  end
  always @* begin
    \$next\port_dat_r_usie  = 1'h0;
    \$next\port_dat_r_ssie  = 1'h0;
    \$next\port_dat_r_wpri0$29  = 1'h0;
    \$next\port_dat_r_msie  = 1'h0;
    \$next\port_dat_r_utie  = 1'h0;
    \$next\port_dat_r_stie  = 1'h0;
    \$next\port_dat_r_wpri1$30  = 1'h0;
    \$next\port_dat_r_mtie  = 1'h0;
    \$next\port_dat_r_ueie  = 1'h0;
    \$next\port_dat_r_seie  = 1'h0;
    \$next\port_dat_r_wpri2$31  = 1'h0;
    \$next\port_dat_r_meie  = 1'h0;
    \$next\port_dat_r_wpri3$32  = 20'h00000;
    { \$next\port_dat_r_wpri3$32 , \$next\port_dat_r_meie , \$next\port_dat_r_wpri2$31 , \$next\port_dat_r_seie , \$next\port_dat_r_ueie , \$next\port_dat_r_mtie , \$next\port_dat_r_wpri1$30 , \$next\port_dat_r_stie , \$next\port_dat_r_utie , \$next\port_dat_r_msie , \$next\port_dat_r_wpri0$29 , \$next\port_dat_r_ssie , \$next\port_dat_r_usie  } = \$signal$20 ;
  end
  always @* begin
    \$next$signal$19  = \$signal$19 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h301:
                \$next$signal$19  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$19  = 32'd0;
    endcase
  end
  always @* begin
    \$next\port_dat_r_value$33  = 32'd0;
    \$next\port_dat_r_value$33  = \$signal$28 ;
  end
  always @* begin
    \$next\port_dat_r_value$14  = 32'd0;
    \$next\port_dat_r_value$14  = \$signal$27 ;
  end
  always @* begin
    \$next$signal$20  = \$signal$20 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h304:
                \$next$signal$20  = wp_data;
          endcase
    endcase
    casez (\port_we$5 )
      1'h1:
          \$next$signal$20  = { \port_dat_w_wpri3$9 , port_dat_w_meie, \port_dat_w_wpri2$8 , port_dat_w_seie, port_dat_w_ueie, port_dat_w_mtie, \port_dat_w_wpri1$7 , port_dat_w_stie, port_dat_w_utie, port_dat_w_msie, \port_dat_w_wpri0$6 , port_dat_w_ssie, port_dat_w_usie };
    endcase
    casez (rst)
      1'h1:
          \$next$signal$20  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$21  = \$signal$21 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h305:
                \$next$signal$21  = wp_data;
          endcase
    endcase
    casez (\port_we$1 )
      1'h1:
          \$next$signal$21  = { port_dat_w_base, port_dat_w_mode };
    endcase
    casez (rst)
      1'h1:
          \$next$signal$21  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$22  = \$signal$22 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            12'h340:
                \$next$signal$22  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next$signal$22  = 32'd0;
    endcase
  end
  assign \port_dat_r_value$14  = \$next\port_dat_r_value$14 ;
  assign \port_dat_r_value$33  = \$next\port_dat_r_value$33 ;
  assign port_dat_r_usie = \$next\port_dat_r_usie ;
  assign port_dat_r_ssie = \$next\port_dat_r_ssie ;
  assign \port_dat_r_wpri0$29  = \$next\port_dat_r_wpri0$29 ;
  assign port_dat_r_msie = \$next\port_dat_r_msie ;
  assign port_dat_r_utie = \$next\port_dat_r_utie ;
  assign port_dat_r_stie = \$next\port_dat_r_stie ;
  assign \port_dat_r_wpri1$30  = \$next\port_dat_r_wpri1$30 ;
  assign port_dat_r_mtie = \$next\port_dat_r_mtie ;
  assign port_dat_r_ueie = \$next\port_dat_r_ueie ;
  assign port_dat_r_seie = \$next\port_dat_r_seie ;
  assign \port_dat_r_wpri2$31  = \$next\port_dat_r_wpri2$31 ;
  assign port_dat_r_meie = \$next\port_dat_r_meie ;
  assign \port_dat_r_wpri3$32  = \$next\port_dat_r_wpri3$32 ;
  assign port_dat_r_usip = \$next\port_dat_r_usip ;
  assign port_dat_r_ssip = \$next\port_dat_r_ssip ;
  assign port_dat_r_wiri0 = \$next\port_dat_r_wiri0 ;
  assign port_dat_r_msip = \$next\port_dat_r_msip ;
  assign port_dat_r_utip = \$next\port_dat_r_utip ;
  assign port_dat_r_stip = \$next\port_dat_r_stip ;
  assign port_dat_r_wiri1 = \$next\port_dat_r_wiri1 ;
  assign port_dat_r_mtip = \$next\port_dat_r_mtip ;
  assign port_dat_r_ueip = \$next\port_dat_r_ueip ;
  assign port_dat_r_seip = \$next\port_dat_r_seip ;
  assign port_dat_r_wiri2 = \$next\port_dat_r_wiri2 ;
  assign port_dat_r_meip = \$next\port_dat_r_meip ;
  assign port_dat_r_wiri3 = \$next\port_dat_r_wiri3 ;
  assign port_dat_r_value = \$next\port_dat_r_value ;
  assign port_dat_r_ecode = \$next\port_dat_r_ecode ;
  assign port_dat_r_interrupt = \$next\port_dat_r_interrupt ;
  assign port_dat_r_mode = \$next\port_dat_r_mode ;
  assign port_dat_r_base = \$next\port_dat_r_base ;
  assign port_dat_r_uie = \$next\port_dat_r_uie ;
  assign port_dat_r_sie = \$next\port_dat_r_sie ;
  assign port_dat_r_wpri0 = \$next\port_dat_r_wpri0 ;
  assign port_dat_r_mie = \$next\port_dat_r_mie ;
  assign port_dat_r_upie = \$next\port_dat_r_upie ;
  assign port_dat_r_spie = \$next\port_dat_r_spie ;
  assign port_dat_r_wpri1 = \$next\port_dat_r_wpri1 ;
  assign port_dat_r_mpie = \$next\port_dat_r_mpie ;
  assign port_dat_r_spp = \$next\port_dat_r_spp ;
  assign port_dat_r_wpri2 = \$next\port_dat_r_wpri2 ;
  assign port_dat_r_mpp = \$next\port_dat_r_mpp ;
  assign port_dat_r_fs = \$next\port_dat_r_fs ;
  assign port_dat_r_xs = \$next\port_dat_r_xs ;
  assign port_dat_r_mprv = \$next\port_dat_r_mprv ;
  assign port_dat_r_sum = \$next\port_dat_r_sum ;
  assign port_dat_r_mxr = \$next\port_dat_r_mxr ;
  assign port_dat_r_tvm = \$next\port_dat_r_tvm ;
  assign port_dat_r_tw = \$next\port_dat_r_tw ;
  assign port_dat_r_tsr = \$next\port_dat_r_tsr ;
  assign port_dat_r_wpri3 = \$next\port_dat_r_wpri3 ;
  assign port_dat_r_sd = \$next\port_dat_r_sd ;
  assign rp_data = \$next\rp_data ;
endmodule

module d(kill, stall, payload_illegal, payload_branch_predict_taken, payload_branch_taken, \valid$1 , x_lock, m_lock, rst, clk, \valid$2 , \stall$3 , \valid$4 , \kill$5 , \stall$6 , valid);
  wire \$11 ;
  wire \$13 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$7 ;
  wire \$9 ;
  reg \$next\kill$15 ;
  reg \$next\kill$5 ;
  reg \$next\stall$3 ;
  reg \$next\stall$6 ;
  reg \$next\valid$2 ;
  reg \$next\valid$4 ;
  input clk;
  input kill;
  wire \kill$15 ;
  output \kill$5 ;
  input m_lock;
  input payload_branch_predict_taken;
  input payload_branch_taken;
  input payload_illegal;
  input rst;
  input stall;
  output \stall$3 ;
  output \stall$6 ;
  input valid;
  input \valid$1 ;
  output \valid$2 ;
  output \valid$4 ;
  reg \valid$4  = 1'h0;
  input x_lock;
  assign \$9  = valid & \$7 ;
  assign \$11  = ~ \stall$6 ;
  assign \$13  = ~ stall;
  assign \$16  = \$13  | \kill$15 ;
  assign \$18  = payload_illegal & \valid$4 ;
  assign \$20  = 1'h0 | \$18 ;
  assign \$22  = ~ payload_branch_predict_taken;
  assign \$24  = \$22  & payload_branch_taken;
  assign \$26  = \$24  & \valid$1 ;
  assign \$28  = \$20  | \$26 ;
  assign \$30  = x_lock | m_lock;
  assign \$32  = \$30  & \valid$2 ;
  assign \$34  = 1'h0 | \$32 ;
  assign \$36  = \$34  | stall;
  assign \$7  = ~ kill;
  always @(posedge clk)
      \valid$4  <= \$next\valid$4 ;
  always @* begin
    \$next\valid$2  = 1'h0;
    \$next\valid$2  = \$9 ;
  end
  always @* begin
    \$next\stall$3  = 1'h0;
    \$next\stall$3  = \stall$6 ;
  end
  always @* begin
    \$next\valid$4  = \valid$4 ;
    casez ({ \$16 , \$11  })
      2'bz1:
          \$next\valid$4  = \valid$2 ;
      2'b1z:
          \$next\valid$4  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$4  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$5  = 1'h0;
    \$next\kill$5  = \kill$15 ;
  end
  always @* begin
    \$next\kill$15  = 1'h0;
    \$next\kill$15  = \$28 ;
  end
  always @* begin
    \$next\stall$6  = 1'h0;
    \$next\stall$6  = \$36 ;
  end
  assign \stall$6  = \$next\stall$6 ;
  assign \kill$15  = \$next\kill$15 ;
  assign \kill$5  = \$next\kill$5 ;
  assign \stall$3  = \$next\stall$3 ;
  assign \valid$2  = \$next\valid$2 ;
endmodule

module dcache(s1_stall, s2_address, s2_re, flush, refill_ready, refill_address, s2_we, refill_valid, refill_data, last_refill, s2_stall, s2_sel, s2_dat_w, rst, clk, refill_request, s2_dat_r, stall_request, s1_address);
  wire \$1001 ;
  wire \$1003 ;
  wire \$1005 ;
  wire \$1007 ;
  wire [31:0] \$1009 ;
  wire \$101 ;
  wire \$1011 ;
  wire \$1013 ;
  wire \$1015 ;
  wire \$1017 ;
  wire \$1019 ;
  wire \$1021 ;
  wire \$1023 ;
  wire \$1025 ;
  wire \$1027 ;
  wire \$1029 ;
  wire \$103 ;
  wire \$1031 ;
  wire \$1033 ;
  wire \$1035 ;
  wire \$1037 ;
  wire \$1039 ;
  wire \$1041 ;
  wire \$1043 ;
  wire \$1045 ;
  wire \$1047 ;
  wire \$1049 ;
  wire \$105 ;
  wire \$1051 ;
  wire \$1053 ;
  wire \$1055 ;
  wire \$1057 ;
  wire \$1059 ;
  wire \$1061 ;
  wire \$1063 ;
  wire \$1065 ;
  wire \$1067 ;
  wire \$1069 ;
  wire \$107 ;
  wire \$1071 ;
  wire \$1073 ;
  wire [31:0] \$1075 ;
  wire \$1077 ;
  wire \$1079 ;
  wire \$1081 ;
  wire \$1083 ;
  wire \$1085 ;
  wire \$1087 ;
  wire \$1089 ;
  wire \$109 ;
  wire \$1091 ;
  wire \$1093 ;
  wire \$1095 ;
  wire \$1097 ;
  wire \$1099 ;
  wire \$11 ;
  wire \$1101 ;
  wire \$1103 ;
  wire \$1105 ;
  wire \$1107 ;
  wire \$1109 ;
  wire \$111 ;
  wire \$1111 ;
  wire \$1113 ;
  wire \$1115 ;
  wire \$1117 ;
  wire \$1119 ;
  wire \$1121 ;
  wire \$1123 ;
  wire \$1125 ;
  wire \$1127 ;
  wire \$1129 ;
  wire \$113 ;
  wire \$1131 ;
  wire \$1133 ;
  wire \$1135 ;
  wire \$1137 ;
  wire \$1139 ;
  wire [31:0] \$1141 ;
  wire \$1143 ;
  wire \$1145 ;
  wire \$1147 ;
  wire \$1149 ;
  wire \$115 ;
  wire \$1151 ;
  wire \$1153 ;
  wire \$1155 ;
  wire \$1157 ;
  wire \$1159 ;
  wire \$1161 ;
  wire \$1163 ;
  wire \$1165 ;
  wire \$1167 ;
  wire \$1169 ;
  wire \$117 ;
  wire \$1171 ;
  wire \$1173 ;
  wire \$1175 ;
  wire \$1177 ;
  wire \$1179 ;
  wire \$1181 ;
  wire \$1183 ;
  wire \$1185 ;
  wire \$1187 ;
  wire \$1189 ;
  wire \$119 ;
  wire \$1191 ;
  wire \$1193 ;
  wire \$1195 ;
  wire \$1197 ;
  wire \$1199 ;
  wire \$1201 ;
  wire \$1203 ;
  wire \$1205 ;
  wire [31:0] \$1207 ;
  wire \$1209 ;
  wire \$121 ;
  wire \$1211 ;
  wire \$1213 ;
  wire \$1215 ;
  wire \$1217 ;
  wire \$1219 ;
  wire \$122 ;
  wire \$1221 ;
  wire \$1223 ;
  wire \$1225 ;
  wire \$1227 ;
  wire \$1229 ;
  wire \$1231 ;
  wire \$1233 ;
  wire \$1235 ;
  wire \$1237 ;
  wire \$1239 ;
  wire \$124 ;
  wire \$1241 ;
  wire \$1243 ;
  wire \$1245 ;
  wire \$1247 ;
  wire \$1249 ;
  wire \$1251 ;
  wire \$1253 ;
  wire \$1255 ;
  wire \$1257 ;
  wire \$1259 ;
  wire \$1261 ;
  wire \$1263 ;
  wire \$1265 ;
  wire \$1267 ;
  wire \$1269 ;
  wire \$127 ;
  wire \$1271 ;
  wire [31:0] \$1273 ;
  wire \$1275 ;
  wire \$1277 ;
  wire [31:0] \$1279 ;
  wire [8:0] \$1280 ;
  wire [31:0] \$1283 ;
  wire [8:0] \$1284 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire [5:0] \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire [5:0] \$22 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$24 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$251 ;
  wire \$253 ;
  wire \$255 ;
  wire \$257 ;
  wire \$259 ;
  wire \$261 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$27 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$279 ;
  wire \$281 ;
  wire [31:0] \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$289 ;
  wire \$29 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$3 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$31 ;
  wire \$311 ;
  wire \$313 ;
  wire \$315 ;
  wire \$317 ;
  wire \$319 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$327 ;
  wire \$329 ;
  wire \$33 ;
  wire \$331 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire [31:0] \$349 ;
  wire \$35 ;
  wire \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire \$359 ;
  wire \$361 ;
  wire \$363 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$37 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$377 ;
  wire \$379 ;
  wire \$381 ;
  wire \$383 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$39 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$407 ;
  wire \$409 ;
  wire \$41 ;
  wire \$411 ;
  wire \$413 ;
  wire [31:0] \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$421 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$43 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire \$45 ;
  wire \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire \$469 ;
  wire \$47 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire \$479 ;
  wire [31:0] \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire \$487 ;
  wire \$489 ;
  wire \$49 ;
  wire \$491 ;
  wire \$493 ;
  wire \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$5 ;
  wire \$501 ;
  wire \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$51 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire \$529 ;
  wire \$53 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$54 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire [31:0] \$547 ;
  wire \$549 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$56 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$571 ;
  wire \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire \$59 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire \$601 ;
  wire \$603 ;
  wire \$605 ;
  wire \$607 ;
  wire \$609 ;
  wire \$611 ;
  wire [31:0] \$613 ;
  wire \$615 ;
  wire \$617 ;
  wire \$619 ;
  wire \$62 ;
  wire \$621 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$629 ;
  wire \$631 ;
  wire \$633 ;
  wire \$635 ;
  wire \$637 ;
  wire \$639 ;
  wire \$641 ;
  wire \$643 ;
  wire \$645 ;
  wire \$647 ;
  wire \$649 ;
  wire \$65 ;
  wire \$651 ;
  wire \$653 ;
  wire \$655 ;
  wire \$657 ;
  wire \$659 ;
  wire \$661 ;
  wire \$663 ;
  wire \$665 ;
  wire \$667 ;
  wire \$669 ;
  wire \$671 ;
  wire \$673 ;
  wire \$675 ;
  wire \$677 ;
  wire [31:0] \$679 ;
  wire \$68 ;
  wire \$681 ;
  wire \$683 ;
  wire \$685 ;
  wire \$687 ;
  wire \$689 ;
  wire \$691 ;
  wire \$693 ;
  wire \$695 ;
  wire \$697 ;
  wire \$699 ;
  wire \$7 ;
  wire \$701 ;
  wire \$703 ;
  wire \$705 ;
  wire \$707 ;
  wire \$709 ;
  wire \$71 ;
  wire \$711 ;
  wire \$713 ;
  wire \$715 ;
  wire \$717 ;
  wire \$719 ;
  wire \$721 ;
  wire \$723 ;
  wire \$725 ;
  wire \$727 ;
  wire \$729 ;
  wire \$731 ;
  wire \$733 ;
  wire \$735 ;
  wire \$737 ;
  wire \$739 ;
  wire \$74 ;
  wire \$741 ;
  wire \$743 ;
  wire [31:0] \$745 ;
  wire \$747 ;
  wire \$749 ;
  wire \$751 ;
  wire \$753 ;
  wire \$755 ;
  wire \$757 ;
  wire \$759 ;
  wire \$761 ;
  wire \$763 ;
  wire \$765 ;
  wire \$767 ;
  wire \$769 ;
  wire \$77 ;
  wire \$771 ;
  wire \$773 ;
  wire \$775 ;
  wire \$777 ;
  wire \$779 ;
  wire \$781 ;
  wire \$783 ;
  wire \$785 ;
  wire \$787 ;
  wire \$789 ;
  wire \$79 ;
  wire \$791 ;
  wire \$793 ;
  wire \$795 ;
  wire \$797 ;
  wire \$799 ;
  wire \$801 ;
  wire \$803 ;
  wire \$805 ;
  wire \$807 ;
  wire \$809 ;
  wire \$81 ;
  wire [31:0] \$811 ;
  wire \$813 ;
  wire \$815 ;
  wire \$817 ;
  wire \$819 ;
  wire \$821 ;
  wire \$823 ;
  wire \$825 ;
  wire \$827 ;
  wire \$829 ;
  wire \$83 ;
  wire \$831 ;
  wire \$833 ;
  wire \$835 ;
  wire \$837 ;
  wire \$839 ;
  wire \$841 ;
  wire \$843 ;
  wire \$845 ;
  wire \$847 ;
  wire \$849 ;
  wire \$85 ;
  wire \$851 ;
  wire \$853 ;
  wire \$855 ;
  wire \$857 ;
  wire \$859 ;
  wire \$861 ;
  wire \$863 ;
  wire \$865 ;
  wire \$867 ;
  wire \$869 ;
  wire \$87 ;
  wire \$871 ;
  wire \$873 ;
  wire \$875 ;
  wire [31:0] \$877 ;
  wire \$879 ;
  wire \$881 ;
  wire \$883 ;
  wire \$885 ;
  wire \$887 ;
  wire \$889 ;
  wire \$89 ;
  wire \$891 ;
  wire \$893 ;
  wire \$895 ;
  wire \$897 ;
  wire \$899 ;
  wire \$9 ;
  wire \$901 ;
  wire \$903 ;
  wire \$905 ;
  wire \$907 ;
  wire \$909 ;
  wire \$91 ;
  wire \$911 ;
  wire \$913 ;
  wire \$915 ;
  wire \$917 ;
  wire \$919 ;
  wire \$921 ;
  wire \$923 ;
  wire \$925 ;
  wire \$927 ;
  wire \$929 ;
  wire \$93 ;
  wire \$931 ;
  wire \$933 ;
  wire \$935 ;
  wire \$937 ;
  wire \$939 ;
  wire \$941 ;
  wire [31:0] \$943 ;
  wire \$945 ;
  wire \$947 ;
  wire \$949 ;
  wire \$95 ;
  wire \$951 ;
  wire \$953 ;
  wire \$955 ;
  wire \$957 ;
  wire \$959 ;
  wire \$961 ;
  wire \$963 ;
  wire \$965 ;
  wire \$967 ;
  wire \$969 ;
  wire \$97 ;
  wire \$971 ;
  wire \$973 ;
  wire \$975 ;
  wire \$977 ;
  wire \$979 ;
  wire \$981 ;
  wire \$983 ;
  wire \$985 ;
  wire \$987 ;
  wire \$989 ;
  wire \$99 ;
  wire \$991 ;
  wire \$993 ;
  wire \$995 ;
  wire \$997 ;
  wire \$999 ;
  reg \$next$signal ;
  reg \$next$signal$57 ;
  reg \$next$signal$60 ;
  reg \$next$signal$63 ;
  reg \$next$signal$66 ;
  reg \$next$signal$69 ;
  reg \$next$signal$72 ;
  reg \$next$signal$75 ;
  reg [31:0] \$next\data ;
  reg [31:0] \$next\data_din ;
  reg [4:0] \$next\data_rp_data_mem_r_addr ;
  reg [4:0] \$next\data_wp_data_mem_w_addr ;
  reg [255:0] \$next\data_wp_data_mem_w_data ;
  reg [7:0] \$next\data_wp_data_mem_w_en ;
  reg \$next\enable ;
  reg [4:0] \$next\flush_line ;
  reg \$next\flush_stall ;
  reg \$next\flushing ;
  reg [1:0] \$next\fsm_state ;
  reg [255:0] \$next\latch_data_rp_data ;
  reg [4:0] \$next\latch_s1_line ;
  reg [4:0] \$next\latch_s1_line_no_stall ;
  reg [31:0] \$next\latch_s2_dat_r ;
  reg \$next\latch_s2_stall ;
  reg \$next\latch_stall_request ;
  reg [21:0] \$next\latch_tag_rp_data ;
  reg \$next\miss ;
  reg \$next\refill_lru ;
  reg \$next\refill_request ;
  reg \$next\refill_stall ;
  reg \$next\refilling ;
  reg \$next\restore_s2 ;
  reg [31:0] \$next\s2_dat_r ;
  reg [31:0] \$next\s2_dat_r$26 ;
  reg \$next\stall_request ;
  reg \$next\tag_din_valid ;
  reg [20:0] \$next\tag_din_value ;
  reg [4:0] \$next\tag_rp_tag_mem_r_addr ;
  reg \$next\tag_valid ;
  reg [20:0] \$next\tag_value ;
  reg [4:0] \$next\tag_wp_tag_mem_w_addr ;
  reg [21:0] \$next\tag_wp_tag_mem_w_data ;
  reg \$next\tag_wp_tag_mem_w_en ;
  reg \$next\way_sel_i ;
  reg \$signal  = 1'h0;
  reg \$signal$57  = 1'h0;
  reg \$signal$60  = 1'h0;
  reg \$signal$63  = 1'h0;
  reg \$signal$66  = 1'h0;
  reg \$signal$69  = 1'h0;
  reg \$signal$72  = 1'h0;
  reg \$signal$75  = 1'h0;
  reg \$verilog_initial_trigger  = 1'h0;
  input clk;
  wire [31:0] data;
  wire [31:0] data_din;
  wire [4:0] data_rp_data_mem_r_addr;
  wire [255:0] data_rp_data_mem_r_data;
  wire [4:0] data_wp_data_mem_w_addr;
  wire [255:0] data_wp_data_mem_w_data;
  wire [7:0] data_wp_data_mem_w_en;
  wire enable;
  input flush;
  reg [4:0] flush_line = 5'h1f;
  wire flush_stall;
  wire flushing;
  reg [1:0] fsm_state = 2'h0;
  input last_refill;
  reg [255:0] latch_data_rp_data = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  reg [4:0] latch_s1_line = 5'h00;
  reg [4:0] latch_s1_line_no_stall = 5'h00;
  reg [31:0] latch_s2_dat_r = 32'd0;
  reg latch_s2_stall = 1'h0;
  reg latch_stall_request = 1'h0;
  reg [21:0] latch_tag_rp_data = 22'h000000;
  wire miss;
  input [29:0] refill_address;
  input [31:0] refill_data;
  wire refill_lru;
  input refill_ready;
  output refill_request;
  wire refill_stall;
  input refill_valid;
  wire refilling;
  reg restore_s2 = 1'h0;
  input rst;
  input [29:0] s1_address;
  input s1_stall;
  input [29:0] s2_address;
  output [31:0] s2_dat_r;
  wire [31:0] \s2_dat_r$26 ;
  input [31:0] s2_dat_w;
  input s2_re;
  input [3:0] s2_sel;
  input s2_stall;
  input s2_we;
  output stall_request;
  wire tag_din_valid;
  wire [20:0] tag_din_value;
  wire [4:0] tag_rp_tag_mem_r_addr;
  wire [21:0] tag_rp_tag_mem_r_data;
  wire tag_valid;
  wire [20:0] tag_value;
  wire [4:0] tag_wp_tag_mem_w_addr;
  wire [21:0] tag_wp_tag_mem_w_data;
  wire tag_wp_tag_mem_w_en;
  wire way_sel_i;
  wire way_sel_n;
  wire way_sel_o;
  assign \$9  = tag_value == s2_address[28:8];
  assign \$99  = ~ stall_request;
  assign \$999  = s2_address[2:0] == 2'h3;
  assign \$1001  = s2_address[2:0] == 2'h3;
  assign \$1003  = s2_address[2:0] == 2'h3;
  assign \$1005  = s2_address[2:0] == 2'h3;
  assign \$1007  = s2_address[2:0] == 2'h3;
  assign \$1009  = { \$945 , \$947 , \$949 , \$951 , \$953 , \$955 , \$957 , \$959 , \$961 , \$963 , \$965 , \$967 , \$969 , \$971 , \$973 , \$975 , \$977 , \$979 , \$981 , \$983 , \$985 , \$987 , \$989 , \$991 , \$993 , \$995 , \$997 , \$999 , \$1001 , \$1003 , \$1005 , \$1007  } & data_din;
  assign \$1011  = s2_address[2:0] == 3'h4;
  assign \$1013  = s2_address[2:0] == 3'h4;
  assign \$1015  = s2_address[2:0] == 3'h4;
  assign \$1017  = s2_address[2:0] == 3'h4;
  assign \$101  = \$99  | refilling;
  assign \$1019  = s2_address[2:0] == 3'h4;
  assign \$1021  = s2_address[2:0] == 3'h4;
  assign \$1023  = s2_address[2:0] == 3'h4;
  assign \$1025  = s2_address[2:0] == 3'h4;
  assign \$1027  = s2_address[2:0] == 3'h4;
  assign \$1029  = s2_address[2:0] == 3'h4;
  assign \$1031  = s2_address[2:0] == 3'h4;
  assign \$1033  = s2_address[2:0] == 3'h4;
  assign \$1035  = s2_address[2:0] == 3'h4;
  assign \$1037  = s2_address[2:0] == 3'h4;
  assign \$103  = ~ latch_s2_stall;
  assign \$1039  = s2_address[2:0] == 3'h4;
  assign \$1041  = s2_address[2:0] == 3'h4;
  assign \$1043  = s2_address[2:0] == 3'h4;
  assign \$1045  = s2_address[2:0] == 3'h4;
  assign \$1047  = s2_address[2:0] == 3'h4;
  assign \$1049  = s2_address[2:0] == 3'h4;
  assign \$1051  = s2_address[2:0] == 3'h4;
  assign \$1053  = s2_address[2:0] == 3'h4;
  assign \$1055  = s2_address[2:0] == 3'h4;
  assign \$1057  = s2_address[2:0] == 3'h4;
  assign \$105  = \$103  & s2_stall;
  assign \$1059  = s2_address[2:0] == 3'h4;
  assign \$1061  = s2_address[2:0] == 3'h4;
  assign \$1063  = s2_address[2:0] == 3'h4;
  assign \$1065  = s2_address[2:0] == 3'h4;
  assign \$1067  = s2_address[2:0] == 3'h4;
  assign \$1069  = s2_address[2:0] == 3'h4;
  assign \$1071  = s2_address[2:0] == 3'h4;
  assign \$1073  = s2_address[2:0] == 3'h4;
  assign \$1075  = { \$1011 , \$1013 , \$1015 , \$1017 , \$1019 , \$1021 , \$1023 , \$1025 , \$1027 , \$1029 , \$1031 , \$1033 , \$1035 , \$1037 , \$1039 , \$1041 , \$1043 , \$1045 , \$1047 , \$1049 , \$1051 , \$1053 , \$1055 , \$1057 , \$1059 , \$1061 , \$1063 , \$1065 , \$1067 , \$1069 , \$1071 , \$1073  } & data_din;
  assign \$1077  = s2_address[2:0] == 3'h5;
  assign \$107  = latch_stall_request & refill_request;
  assign \$1079  = s2_address[2:0] == 3'h5;
  assign \$1081  = s2_address[2:0] == 3'h5;
  assign \$1083  = s2_address[2:0] == 3'h5;
  assign \$1085  = s2_address[2:0] == 3'h5;
  assign \$1087  = s2_address[2:0] == 3'h5;
  assign \$1089  = s2_address[2:0] == 3'h5;
  assign \$1091  = s2_address[2:0] == 3'h5;
  assign \$1093  = s2_address[2:0] == 3'h5;
  assign \$1095  = s2_address[2:0] == 3'h5;
  assign \$1097  = s2_address[2:0] == 3'h5;
  assign \$109  = \$105  | \$107 ;
  assign \$1099  = s2_address[2:0] == 3'h5;
  assign \$1101  = s2_address[2:0] == 3'h5;
  assign \$1103  = s2_address[2:0] == 3'h5;
  assign \$1105  = s2_address[2:0] == 3'h5;
  assign \$1107  = s2_address[2:0] == 3'h5;
  assign \$1109  = s2_address[2:0] == 3'h5;
  assign \$1111  = s2_address[2:0] == 3'h5;
  assign \$1113  = s2_address[2:0] == 3'h5;
  assign \$1115  = s2_address[2:0] == 3'h5;
  assign \$1117  = s2_address[2:0] == 3'h5;
  assign \$111  = ~ stall_request;
  assign \$1119  = s2_address[2:0] == 3'h5;
  assign \$1121  = s2_address[2:0] == 3'h5;
  assign \$1123  = s2_address[2:0] == 3'h5;
  assign \$1125  = s2_address[2:0] == 3'h5;
  assign \$1127  = s2_address[2:0] == 3'h5;
  assign \$1129  = s2_address[2:0] == 3'h5;
  assign \$1131  = s2_address[2:0] == 3'h5;
  assign \$1133  = s2_address[2:0] == 3'h5;
  assign \$1135  = s2_address[2:0] == 3'h5;
  assign \$1137  = s2_address[2:0] == 3'h5;
  assign \$113  = latch_stall_request & \$111 ;
  assign \$1139  = s2_address[2:0] == 3'h5;
  assign \$1141  = { \$1077 , \$1079 , \$1081 , \$1083 , \$1085 , \$1087 , \$1089 , \$1091 , \$1093 , \$1095 , \$1097 , \$1099 , \$1101 , \$1103 , \$1105 , \$1107 , \$1109 , \$1111 , \$1113 , \$1115 , \$1117 , \$1119 , \$1121 , \$1123 , \$1125 , \$1127 , \$1129 , \$1131 , \$1133 , \$1135 , \$1137 , \$1139  } & data_din;
  assign \$1143  = s2_address[2:0] == 3'h6;
  assign \$1145  = s2_address[2:0] == 3'h6;
  assign \$1147  = s2_address[2:0] == 3'h6;
  assign \$1149  = s2_address[2:0] == 3'h6;
  assign \$1151  = s2_address[2:0] == 3'h6;
  assign \$1153  = s2_address[2:0] == 3'h6;
  assign \$1155  = s2_address[2:0] == 3'h6;
  assign \$1157  = s2_address[2:0] == 3'h6;
  assign \$115  = \$113  & s2_stall;
  assign \$1159  = s2_address[2:0] == 3'h6;
  assign \$1161  = s2_address[2:0] == 3'h6;
  assign \$1163  = s2_address[2:0] == 3'h6;
  assign \$1165  = s2_address[2:0] == 3'h6;
  assign \$1167  = s2_address[2:0] == 3'h6;
  assign \$1169  = s2_address[2:0] == 3'h6;
  assign \$1171  = s2_address[2:0] == 3'h6;
  assign \$1173  = s2_address[2:0] == 3'h6;
  assign \$1175  = s2_address[2:0] == 3'h6;
  assign \$1177  = s2_address[2:0] == 3'h6;
  assign \$117  = \$109  | \$115 ;
  assign \$1179  = s2_address[2:0] == 3'h6;
  assign \$1181  = s2_address[2:0] == 3'h6;
  assign \$1183  = s2_address[2:0] == 3'h6;
  assign \$1185  = s2_address[2:0] == 3'h6;
  assign \$1187  = s2_address[2:0] == 3'h6;
  assign \$1189  = s2_address[2:0] == 3'h6;
  assign \$1191  = s2_address[2:0] == 3'h6;
  assign \$1193  = s2_address[2:0] == 3'h6;
  assign \$1195  = s2_address[2:0] == 3'h6;
  assign \$1197  = s2_address[2:0] == 3'h6;
  assign \$11  = \$7  & \$9 ;
  assign \$119  = latch_s2_stall & restore_s2;
  assign \$1199  = s2_address[2:0] == 3'h6;
  assign \$1201  = s2_address[2:0] == 3'h6;
  assign \$1203  = s2_address[2:0] == 3'h6;
  assign \$1205  = s2_address[2:0] == 3'h6;
  assign \$1207  = { \$1143 , \$1145 , \$1147 , \$1149 , \$1151 , \$1153 , \$1155 , \$1157 , \$1159 , \$1161 , \$1163 , \$1165 , \$1167 , \$1169 , \$1171 , \$1173 , \$1175 , \$1177 , \$1179 , \$1181 , \$1183 , \$1185 , \$1187 , \$1189 , \$1191 , \$1193 , \$1195 , \$1197 , \$1199 , \$1201 , \$1203 , \$1205  } & data_din;
  assign \$1209  = s2_address[2:0] == 3'h7;
  assign \$1211  = s2_address[2:0] == 3'h7;
  assign \$1213  = s2_address[2:0] == 3'h7;
  assign \$1215  = s2_address[2:0] == 3'h7;
  assign \$1217  = s2_address[2:0] == 3'h7;
  assign \$1219  = s2_address[2:0] == 3'h7;
  assign \$1221  = s2_address[2:0] == 3'h7;
  assign \$1223  = s2_address[2:0] == 3'h7;
  assign \$1225  = s2_address[2:0] == 3'h7;
  assign \$1227  = s2_address[2:0] == 3'h7;
  assign \$122  = refill_address == s2_address;
  assign \$1229  = s2_address[2:0] == 3'h7;
  assign \$1231  = s2_address[2:0] == 3'h7;
  assign \$1233  = s2_address[2:0] == 3'h7;
  assign \$1235  = s2_address[2:0] == 3'h7;
  assign \$1237  = s2_address[2:0] == 3'h7;
  assign \$1239  = s2_address[2:0] == 3'h7;
  assign \$1241  = s2_address[2:0] == 3'h7;
  assign \$1243  = s2_address[2:0] == 3'h7;
  assign \$1245  = s2_address[2:0] == 3'h7;
  assign \$1247  = s2_address[2:0] == 3'h7;
  assign \$124  = refilling & \$122 ;
  assign \$1249  = s2_address[2:0] == 3'h7;
  assign \$1251  = s2_address[2:0] == 3'h7;
  assign \$1253  = s2_address[2:0] == 3'h7;
  assign \$1255  = s2_address[2:0] == 3'h7;
  assign \$1257  = s2_address[2:0] == 3'h7;
  assign \$121  = ~ \$124 ;
  assign \$1259  = s2_address[2:0] == 3'h7;
  assign \$1261  = s2_address[2:0] == 3'h7;
  assign \$1263  = s2_address[2:0] == 3'h7;
  assign \$1265  = s2_address[2:0] == 3'h7;
  assign \$1267  = s2_address[2:0] == 3'h7;
  assign \$1269  = s2_address[2:0] == 3'h7;
  assign \$1271  = s2_address[2:0] == 3'h7;
  assign \$1273  = { \$1209 , \$1211 , \$1213 , \$1215 , \$1217 , \$1219 , \$1221 , \$1223 , \$1225 , \$1227 , \$1229 , \$1231 , \$1233 , \$1235 , \$1237 , \$1239 , \$1241 , \$1243 , \$1245 , \$1247 , \$1249 , \$1251 , \$1253 , \$1255 , \$1257 , \$1259 , \$1261 , \$1263 , \$1265 , \$1267 , \$1269 , \$1271  } & data_din;
  assign \$1275  = latch_s1_line == s2_address[7:3];
  assign \$1277  = latch_s1_line == s2_address[7:3];
  assign \$127  = \$119  & \$121 ;
  assign \$1280  = s2_address[2:0] * 6'h20;
  assign \$1279  = data_rp_data_mem_r_data >> \$1280 ;
  assign \$1284  = s2_address[2:0] * 6'h20;
  assign \$1283  = latch_data_rp_data >> \$1284 ;
  assign \$129  = last_refill & refill_valid;
  assign \$131  = way_sel_i >> refill_lru;
  assign \$133  = enable & s2_we;
  assign \$135  = latch_s1_line == s2_address[7:3];
  assign \$137  = latch_s1_line == s2_address[7:3];
  assign \$13  = \$11  & tag_valid;
  assign \$139  = refill_address[2:0] == 1'h0;
  assign \$141  = \$139  & enable;
  assign \$143  = refill_address[2:0] == 1'h1;
  assign \$145  = \$143  & enable;
  assign \$147  = refill_address[2:0] == 2'h2;
  assign \$149  = \$147  & enable;
  assign \$151  = refill_address[2:0] == 2'h3;
  assign \$153  = \$151  & enable;
  assign \$155  = refill_address[2:0] == 3'h4;
  assign \$157  = \$155  & enable;
  assign \$15  = s2_re & way_sel_n;
  assign \$159  = refill_address[2:0] == 3'h5;
  assign \$161  = \$159  & enable;
  assign \$163  = refill_address[2:0] == 3'h6;
  assign \$165  = \$163  & enable;
  assign \$167  = refill_address[2:0] == 3'h7;
  assign \$169  = \$167  & enable;
  assign \$171  = s2_address[2:0] == 1'h0;
  assign \$173  = enable & s2_we;
  assign \$175  = \$171  & \$173 ;
  assign \$177  = s2_address[2:0] == 1'h1;
  assign \$17  = fsm_state == 1'h0;
  assign \$179  = enable & s2_we;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = s2_address[2:0] == 2'h2;
  assign \$185  = enable & s2_we;
  assign \$187  = \$183  & \$185 ;
  assign \$189  = s2_address[2:0] == 2'h3;
  assign \$191  = enable & s2_we;
  assign \$193  = \$189  & \$191 ;
  assign \$195  = s2_address[2:0] == 3'h4;
  assign \$197  = enable & s2_we;
  assign \$19  = fsm_state == 2'h2;
  assign \$199  = \$195  & \$197 ;
  assign \$201  = s2_address[2:0] == 3'h5;
  assign \$203  = enable & s2_we;
  assign \$205  = \$201  & \$203 ;
  assign \$207  = s2_address[2:0] == 3'h6;
  assign \$209  = enable & s2_we;
  assign \$211  = \$207  & \$209 ;
  assign \$213  = s2_address[2:0] == 3'h7;
  assign \$215  = enable & s2_we;
  assign \$217  = \$213  & \$215 ;
  assign \$219  = refill_address[2:0] == 1'h0;
  assign \$221  = refill_address[2:0] == 1'h0;
  assign \$223  = refill_address[2:0] == 1'h0;
  assign \$225  = refill_address[2:0] == 1'h0;
  assign \$227  = refill_address[2:0] == 1'h0;
  assign \$22  = flush_line - 1'h1;
  assign \$229  = refill_address[2:0] == 1'h0;
  assign \$231  = refill_address[2:0] == 1'h0;
  assign \$233  = refill_address[2:0] == 1'h0;
  assign \$235  = refill_address[2:0] == 1'h0;
  assign \$237  = refill_address[2:0] == 1'h0;
  assign \$239  = refill_address[2:0] == 1'h0;
  assign \$241  = refill_address[2:0] == 1'h0;
  assign \$243  = refill_address[2:0] == 1'h0;
  assign \$245  = refill_address[2:0] == 1'h0;
  assign \$247  = refill_address[2:0] == 1'h0;
  assign \$24  = flush_line == 1'h0;
  assign \$249  = refill_address[2:0] == 1'h0;
  assign \$251  = refill_address[2:0] == 1'h0;
  assign \$253  = refill_address[2:0] == 1'h0;
  assign \$255  = refill_address[2:0] == 1'h0;
  assign \$257  = refill_address[2:0] == 1'h0;
  assign \$259  = refill_address[2:0] == 1'h0;
  assign \$261  = refill_address[2:0] == 1'h0;
  assign \$263  = refill_address[2:0] == 1'h0;
  assign \$265  = refill_address[2:0] == 1'h0;
  assign \$267  = refill_address[2:0] == 1'h0;
  assign \$269  = refill_address[2:0] == 1'h0;
  assign \$271  = refill_address[2:0] == 1'h0;
  assign \$273  = refill_address[2:0] == 1'h0;
  assign \$275  = refill_address[2:0] == 1'h0;
  assign \$277  = refill_address[2:0] == 1'h0;
  assign \$27  = refill_address[28:8] == s2_address[28:8];
  assign \$279  = refill_address[2:0] == 1'h0;
  assign \$281  = refill_address[2:0] == 1'h0;
  assign \$283  = { \$219 , \$221 , \$223 , \$225 , \$227 , \$229 , \$231 , \$233 , \$235 , \$237 , \$239 , \$241 , \$243 , \$245 , \$247 , \$249 , \$251 , \$253 , \$255 , \$257 , \$259 , \$261 , \$263 , \$265 , \$267 , \$269 , \$271 , \$273 , \$275 , \$277 , \$279 , \$281  } & refill_data;
  assign \$285  = refill_address[2:0] == 1'h1;
  assign \$287  = refill_address[2:0] == 1'h1;
  assign \$289  = refill_address[2:0] == 1'h1;
  assign \$291  = refill_address[2:0] == 1'h1;
  assign \$293  = refill_address[2:0] == 1'h1;
  assign \$295  = refill_address[2:0] == 1'h1;
  assign \$297  = refill_address[2:0] == 1'h1;
  assign \$29  = refill_address[7:3] == s2_address[7:3];
  assign \$299  = refill_address[2:0] == 1'h1;
  assign \$301  = refill_address[2:0] == 1'h1;
  assign \$303  = refill_address[2:0] == 1'h1;
  assign \$305  = refill_address[2:0] == 1'h1;
  assign \$307  = refill_address[2:0] == 1'h1;
  assign \$309  = refill_address[2:0] == 1'h1;
  assign \$311  = refill_address[2:0] == 1'h1;
  assign \$313  = refill_address[2:0] == 1'h1;
  assign \$315  = refill_address[2:0] == 1'h1;
  assign \$317  = refill_address[2:0] == 1'h1;
  assign \$31  = \$27  & \$29 ;
  assign \$319  = refill_address[2:0] == 1'h1;
  assign \$321  = refill_address[2:0] == 1'h1;
  assign \$323  = refill_address[2:0] == 1'h1;
  assign \$325  = refill_address[2:0] == 1'h1;
  assign \$327  = refill_address[2:0] == 1'h1;
  assign \$329  = refill_address[2:0] == 1'h1;
  assign \$331  = refill_address[2:0] == 1'h1;
  assign \$333  = refill_address[2:0] == 1'h1;
  assign \$335  = refill_address[2:0] == 1'h1;
  assign \$337  = refill_address[2:0] == 1'h1;
  assign \$33  = ~ s2_we;
  assign \$339  = refill_address[2:0] == 1'h1;
  assign \$341  = refill_address[2:0] == 1'h1;
  assign \$343  = refill_address[2:0] == 1'h1;
  assign \$345  = refill_address[2:0] == 1'h1;
  assign \$347  = refill_address[2:0] == 1'h1;
  assign \$349  = { \$285 , \$287 , \$289 , \$291 , \$293 , \$295 , \$297 , \$299 , \$301 , \$303 , \$305 , \$307 , \$309 , \$311 , \$313 , \$315 , \$317 , \$319 , \$321 , \$323 , \$325 , \$327 , \$329 , \$331 , \$333 , \$335 , \$337 , \$339 , \$341 , \$343 , \$345 , \$347  } & refill_data;
  assign \$351  = refill_address[2:0] == 2'h2;
  assign \$353  = refill_address[2:0] == 2'h2;
  assign \$355  = refill_address[2:0] == 2'h2;
  assign \$357  = refill_address[2:0] == 2'h2;
  assign \$35  = \$31  & \$33 ;
  assign \$359  = refill_address[2:0] == 2'h2;
  assign \$361  = refill_address[2:0] == 2'h2;
  assign \$363  = refill_address[2:0] == 2'h2;
  assign \$365  = refill_address[2:0] == 2'h2;
  assign \$367  = refill_address[2:0] == 2'h2;
  assign \$369  = refill_address[2:0] == 2'h2;
  assign \$371  = refill_address[2:0] == 2'h2;
  assign \$373  = refill_address[2:0] == 2'h2;
  assign \$375  = refill_address[2:0] == 2'h2;
  assign \$377  = refill_address[2:0] == 2'h2;
  assign \$37  = refill_address[2:0] == s2_address[2:0];
  assign \$379  = refill_address[2:0] == 2'h2;
  assign \$381  = refill_address[2:0] == 2'h2;
  assign \$383  = refill_address[2:0] == 2'h2;
  assign \$385  = refill_address[2:0] == 2'h2;
  assign \$387  = refill_address[2:0] == 2'h2;
  assign \$389  = refill_address[2:0] == 2'h2;
  assign \$391  = refill_address[2:0] == 2'h2;
  assign \$393  = refill_address[2:0] == 2'h2;
  assign \$395  = refill_address[2:0] == 2'h2;
  assign \$397  = refill_address[2:0] == 2'h2;
  assign \$3  = flush_stall | refill_stall;
  assign \$39  = refill_address[28:8] == s2_address[28:8];
  assign \$399  = refill_address[2:0] == 2'h2;
  assign \$401  = refill_address[2:0] == 2'h2;
  assign \$403  = refill_address[2:0] == 2'h2;
  assign \$405  = refill_address[2:0] == 2'h2;
  assign \$407  = refill_address[2:0] == 2'h2;
  assign \$409  = refill_address[2:0] == 2'h2;
  assign \$411  = refill_address[2:0] == 2'h2;
  assign \$413  = refill_address[2:0] == 2'h2;
  assign \$415  = { \$351 , \$353 , \$355 , \$357 , \$359 , \$361 , \$363 , \$365 , \$367 , \$369 , \$371 , \$373 , \$375 , \$377 , \$379 , \$381 , \$383 , \$385 , \$387 , \$389 , \$391 , \$393 , \$395 , \$397 , \$399 , \$401 , \$403 , \$405 , \$407 , \$409 , \$411 , \$413  } & refill_data;
  assign \$417  = refill_address[2:0] == 2'h3;
  assign \$41  = refill_address[7:3] == s2_address[7:3];
  assign \$419  = refill_address[2:0] == 2'h3;
  assign \$421  = refill_address[2:0] == 2'h3;
  assign \$423  = refill_address[2:0] == 2'h3;
  assign \$425  = refill_address[2:0] == 2'h3;
  assign \$427  = refill_address[2:0] == 2'h3;
  assign \$429  = refill_address[2:0] == 2'h3;
  assign \$431  = refill_address[2:0] == 2'h3;
  assign \$433  = refill_address[2:0] == 2'h3;
  assign \$435  = refill_address[2:0] == 2'h3;
  assign \$437  = refill_address[2:0] == 2'h3;
  assign \$43  = \$39  & \$41 ;
  assign \$439  = refill_address[2:0] == 2'h3;
  assign \$441  = refill_address[2:0] == 2'h3;
  assign \$443  = refill_address[2:0] == 2'h3;
  assign \$445  = refill_address[2:0] == 2'h3;
  assign \$447  = refill_address[2:0] == 2'h3;
  assign \$449  = refill_address[2:0] == 2'h3;
  assign \$451  = refill_address[2:0] == 2'h3;
  assign \$453  = refill_address[2:0] == 2'h3;
  assign \$455  = refill_address[2:0] == 2'h3;
  assign \$457  = refill_address[2:0] == 2'h3;
  assign \$45  = ~ s2_we;
  assign \$459  = refill_address[2:0] == 2'h3;
  assign \$461  = refill_address[2:0] == 2'h3;
  assign \$463  = refill_address[2:0] == 2'h3;
  assign \$465  = refill_address[2:0] == 2'h3;
  assign \$467  = refill_address[2:0] == 2'h3;
  assign \$469  = refill_address[2:0] == 2'h3;
  assign \$471  = refill_address[2:0] == 2'h3;
  assign \$473  = refill_address[2:0] == 2'h3;
  assign \$475  = refill_address[2:0] == 2'h3;
  assign \$477  = refill_address[2:0] == 2'h3;
  assign \$47  = \$43  & \$45 ;
  assign \$479  = refill_address[2:0] == 2'h3;
  assign \$481  = { \$417 , \$419 , \$421 , \$423 , \$425 , \$427 , \$429 , \$431 , \$433 , \$435 , \$437 , \$439 , \$441 , \$443 , \$445 , \$447 , \$449 , \$451 , \$453 , \$455 , \$457 , \$459 , \$461 , \$463 , \$465 , \$467 , \$469 , \$471 , \$473 , \$475 , \$477 , \$479  } & refill_data;
  assign \$483  = refill_address[2:0] == 3'h4;
  assign \$485  = refill_address[2:0] == 3'h4;
  assign \$487  = refill_address[2:0] == 3'h4;
  assign \$489  = refill_address[2:0] == 3'h4;
  assign \$491  = refill_address[2:0] == 3'h4;
  assign \$493  = refill_address[2:0] == 3'h4;
  assign \$495  = refill_address[2:0] == 3'h4;
  assign \$497  = refill_address[2:0] == 3'h4;
  assign \$49  = refill_address[2:0] == s2_address[2:0];
  assign \$499  = refill_address[2:0] == 3'h4;
  assign \$501  = refill_address[2:0] == 3'h4;
  assign \$503  = refill_address[2:0] == 3'h4;
  assign \$505  = refill_address[2:0] == 3'h4;
  assign \$507  = refill_address[2:0] == 3'h4;
  assign \$509  = refill_address[2:0] == 3'h4;
  assign \$511  = refill_address[2:0] == 3'h4;
  assign \$513  = refill_address[2:0] == 3'h4;
  assign \$515  = refill_address[2:0] == 3'h4;
  assign \$517  = refill_address[2:0] == 3'h4;
  assign \$51  = ~ refill_valid;
  assign \$519  = refill_address[2:0] == 3'h4;
  assign \$521  = refill_address[2:0] == 3'h4;
  assign \$523  = refill_address[2:0] == 3'h4;
  assign \$525  = refill_address[2:0] == 3'h4;
  assign \$527  = refill_address[2:0] == 3'h4;
  assign \$529  = refill_address[2:0] == 3'h4;
  assign \$531  = refill_address[2:0] == 3'h4;
  assign \$533  = refill_address[2:0] == 3'h4;
  assign \$535  = refill_address[2:0] == 3'h4;
  assign \$537  = refill_address[2:0] == 3'h4;
  assign \$539  = refill_address[2:0] == 3'h4;
  assign \$541  = refill_address[2:0] == 3'h4;
  assign \$543  = refill_address[2:0] == 3'h4;
  assign \$545  = refill_address[2:0] == 3'h4;
  assign \$547  = { \$483 , \$485 , \$487 , \$489 , \$491 , \$493 , \$495 , \$497 , \$499 , \$501 , \$503 , \$505 , \$507 , \$509 , \$511 , \$513 , \$515 , \$517 , \$519 , \$521 , \$523 , \$525 , \$527 , \$529 , \$531 , \$533 , \$535 , \$537 , \$539 , \$541 , \$543 , \$545  } & refill_data;
  assign \$54  = ~ \$signal ;
  assign \$549  = refill_address[2:0] == 3'h5;
  assign \$551  = refill_address[2:0] == 3'h5;
  assign \$553  = refill_address[2:0] == 3'h5;
  assign \$555  = refill_address[2:0] == 3'h5;
  assign \$557  = refill_address[2:0] == 3'h5;
  assign \$559  = refill_address[2:0] == 3'h5;
  assign \$561  = refill_address[2:0] == 3'h5;
  assign \$563  = refill_address[2:0] == 3'h5;
  assign \$565  = refill_address[2:0] == 3'h5;
  assign \$567  = refill_address[2:0] == 3'h5;
  assign \$569  = refill_address[2:0] == 3'h5;
  assign \$571  = refill_address[2:0] == 3'h5;
  assign \$573  = refill_address[2:0] == 3'h5;
  assign \$575  = refill_address[2:0] == 3'h5;
  assign \$577  = refill_address[2:0] == 3'h5;
  assign \$56  = ~ \$signal$57 ;
  assign \$579  = refill_address[2:0] == 3'h5;
  assign \$581  = refill_address[2:0] == 3'h5;
  assign \$583  = refill_address[2:0] == 3'h5;
  assign \$585  = refill_address[2:0] == 3'h5;
  assign \$587  = refill_address[2:0] == 3'h5;
  assign \$589  = refill_address[2:0] == 3'h5;
  assign \$591  = refill_address[2:0] == 3'h5;
  assign \$593  = refill_address[2:0] == 3'h5;
  assign \$595  = refill_address[2:0] == 3'h5;
  assign \$597  = refill_address[2:0] == 3'h5;
  assign \$5  = ~ s1_stall;
  assign \$599  = refill_address[2:0] == 3'h5;
  assign \$601  = refill_address[2:0] == 3'h5;
  assign \$603  = refill_address[2:0] == 3'h5;
  assign \$605  = refill_address[2:0] == 3'h5;
  assign \$607  = refill_address[2:0] == 3'h5;
  assign \$59  = ~ \$signal$60 ;
  assign \$609  = refill_address[2:0] == 3'h5;
  assign \$611  = refill_address[2:0] == 3'h5;
  assign \$613  = { \$549 , \$551 , \$553 , \$555 , \$557 , \$559 , \$561 , \$563 , \$565 , \$567 , \$569 , \$571 , \$573 , \$575 , \$577 , \$579 , \$581 , \$583 , \$585 , \$587 , \$589 , \$591 , \$593 , \$595 , \$597 , \$599 , \$601 , \$603 , \$605 , \$607 , \$609 , \$611  } & refill_data;
  assign \$615  = refill_address[2:0] == 3'h6;
  assign \$617  = refill_address[2:0] == 3'h6;
  assign \$619  = refill_address[2:0] == 3'h6;
  assign \$621  = refill_address[2:0] == 3'h6;
  assign \$623  = refill_address[2:0] == 3'h6;
  assign \$625  = refill_address[2:0] == 3'h6;
  assign \$627  = refill_address[2:0] == 3'h6;
  assign \$629  = refill_address[2:0] == 3'h6;
  assign \$631  = refill_address[2:0] == 3'h6;
  assign \$633  = refill_address[2:0] == 3'h6;
  assign \$635  = refill_address[2:0] == 3'h6;
  assign \$637  = refill_address[2:0] == 3'h6;
  assign \$62  = ~ \$signal$63 ;
  assign \$639  = refill_address[2:0] == 3'h6;
  assign \$641  = refill_address[2:0] == 3'h6;
  assign \$643  = refill_address[2:0] == 3'h6;
  assign \$645  = refill_address[2:0] == 3'h6;
  assign \$647  = refill_address[2:0] == 3'h6;
  assign \$649  = refill_address[2:0] == 3'h6;
  assign \$651  = refill_address[2:0] == 3'h6;
  assign \$653  = refill_address[2:0] == 3'h6;
  assign \$655  = refill_address[2:0] == 3'h6;
  assign \$657  = refill_address[2:0] == 3'h6;
  assign \$659  = refill_address[2:0] == 3'h6;
  assign \$661  = refill_address[2:0] == 3'h6;
  assign \$663  = refill_address[2:0] == 3'h6;
  assign \$665  = refill_address[2:0] == 3'h6;
  assign \$667  = refill_address[2:0] == 3'h6;
  assign \$65  = ~ \$signal$66 ;
  assign \$669  = refill_address[2:0] == 3'h6;
  assign \$671  = refill_address[2:0] == 3'h6;
  assign \$673  = refill_address[2:0] == 3'h6;
  assign \$675  = refill_address[2:0] == 3'h6;
  assign \$677  = refill_address[2:0] == 3'h6;
  assign \$679  = { \$615 , \$617 , \$619 , \$621 , \$623 , \$625 , \$627 , \$629 , \$631 , \$633 , \$635 , \$637 , \$639 , \$641 , \$643 , \$645 , \$647 , \$649 , \$651 , \$653 , \$655 , \$657 , \$659 , \$661 , \$663 , \$665 , \$667 , \$669 , \$671 , \$673 , \$675 , \$677  } & refill_data;
  assign \$681  = refill_address[2:0] == 3'h7;
  assign \$683  = refill_address[2:0] == 3'h7;
  assign \$685  = refill_address[2:0] == 3'h7;
  assign \$687  = refill_address[2:0] == 3'h7;
  assign \$689  = refill_address[2:0] == 3'h7;
  assign \$691  = refill_address[2:0] == 3'h7;
  assign \$693  = refill_address[2:0] == 3'h7;
  assign \$695  = refill_address[2:0] == 3'h7;
  assign \$697  = refill_address[2:0] == 3'h7;
  assign \$68  = ~ \$signal$69 ;
  assign \$699  = refill_address[2:0] == 3'h7;
  assign \$701  = refill_address[2:0] == 3'h7;
  assign \$703  = refill_address[2:0] == 3'h7;
  assign \$705  = refill_address[2:0] == 3'h7;
  assign \$707  = refill_address[2:0] == 3'h7;
  assign \$709  = refill_address[2:0] == 3'h7;
  assign \$711  = refill_address[2:0] == 3'h7;
  assign \$713  = refill_address[2:0] == 3'h7;
  assign \$715  = refill_address[2:0] == 3'h7;
  assign \$717  = refill_address[2:0] == 3'h7;
  assign \$719  = refill_address[2:0] == 3'h7;
  assign \$721  = refill_address[2:0] == 3'h7;
  assign \$723  = refill_address[2:0] == 3'h7;
  assign \$725  = refill_address[2:0] == 3'h7;
  assign \$727  = refill_address[2:0] == 3'h7;
  assign \$71  = ~ \$signal$72 ;
  assign \$729  = refill_address[2:0] == 3'h7;
  assign \$731  = refill_address[2:0] == 3'h7;
  assign \$733  = refill_address[2:0] == 3'h7;
  assign \$735  = refill_address[2:0] == 3'h7;
  assign \$737  = refill_address[2:0] == 3'h7;
  assign \$739  = refill_address[2:0] == 3'h7;
  assign \$741  = refill_address[2:0] == 3'h7;
  assign \$743  = refill_address[2:0] == 3'h7;
  assign \$745  = { \$681 , \$683 , \$685 , \$687 , \$689 , \$691 , \$693 , \$695 , \$697 , \$699 , \$701 , \$703 , \$705 , \$707 , \$709 , \$711 , \$713 , \$715 , \$717 , \$719 , \$721 , \$723 , \$725 , \$727 , \$729 , \$731 , \$733 , \$735 , \$737 , \$739 , \$741 , \$743  } & refill_data;
  assign \$747  = s2_address[2:0] == 1'h0;
  assign \$749  = s2_address[2:0] == 1'h0;
  assign \$751  = s2_address[2:0] == 1'h0;
  assign \$753  = s2_address[2:0] == 1'h0;
  assign \$755  = s2_address[2:0] == 1'h0;
  assign \$757  = s2_address[2:0] == 1'h0;
  assign \$74  = ~ \$signal$75 ;
  assign \$759  = s2_address[2:0] == 1'h0;
  assign \$761  = s2_address[2:0] == 1'h0;
  assign \$763  = s2_address[2:0] == 1'h0;
  assign \$765  = s2_address[2:0] == 1'h0;
  assign \$767  = s2_address[2:0] == 1'h0;
  assign \$769  = s2_address[2:0] == 1'h0;
  assign \$771  = s2_address[2:0] == 1'h0;
  assign \$773  = s2_address[2:0] == 1'h0;
  assign \$775  = s2_address[2:0] == 1'h0;
  assign \$777  = s2_address[2:0] == 1'h0;
  assign \$77  = miss | s2_we;
  assign \$779  = s2_address[2:0] == 1'h0;
  assign \$781  = s2_address[2:0] == 1'h0;
  assign \$783  = s2_address[2:0] == 1'h0;
  assign \$785  = s2_address[2:0] == 1'h0;
  assign \$787  = s2_address[2:0] == 1'h0;
  assign \$789  = s2_address[2:0] == 1'h0;
  assign \$791  = s2_address[2:0] == 1'h0;
  assign \$793  = s2_address[2:0] == 1'h0;
  assign \$795  = s2_address[2:0] == 1'h0;
  assign \$797  = s2_address[2:0] == 1'h0;
  assign \$7  = latch_s1_line_no_stall == s2_address[7:3];
  assign \$79  = refill_address[28:8] != s2_address[28:8];
  assign \$799  = s2_address[2:0] == 1'h0;
  assign \$801  = s2_address[2:0] == 1'h0;
  assign \$803  = s2_address[2:0] == 1'h0;
  assign \$805  = s2_address[2:0] == 1'h0;
  assign \$807  = s2_address[2:0] == 1'h0;
  assign \$809  = s2_address[2:0] == 1'h0;
  assign \$811  = { \$747 , \$749 , \$751 , \$753 , \$755 , \$757 , \$759 , \$761 , \$763 , \$765 , \$767 , \$769 , \$771 , \$773 , \$775 , \$777 , \$779 , \$781 , \$783 , \$785 , \$787 , \$789 , \$791 , \$793 , \$795 , \$797 , \$799 , \$801 , \$803 , \$805 , \$807 , \$809  } & data_din;
  assign \$813  = s2_address[2:0] == 1'h1;
  assign \$815  = s2_address[2:0] == 1'h1;
  assign \$817  = s2_address[2:0] == 1'h1;
  assign \$81  = \$77  | \$79 ;
  assign \$819  = s2_address[2:0] == 1'h1;
  assign \$821  = s2_address[2:0] == 1'h1;
  assign \$823  = s2_address[2:0] == 1'h1;
  assign \$825  = s2_address[2:0] == 1'h1;
  assign \$827  = s2_address[2:0] == 1'h1;
  assign \$829  = s2_address[2:0] == 1'h1;
  assign \$831  = s2_address[2:0] == 1'h1;
  assign \$833  = s2_address[2:0] == 1'h1;
  assign \$835  = s2_address[2:0] == 1'h1;
  assign \$837  = s2_address[2:0] == 1'h1;
  assign \$83  = ~ latch_s2_stall;
  assign \$839  = s2_address[2:0] == 1'h1;
  assign \$841  = s2_address[2:0] == 1'h1;
  assign \$843  = s2_address[2:0] == 1'h1;
  assign \$845  = s2_address[2:0] == 1'h1;
  assign \$847  = s2_address[2:0] == 1'h1;
  assign \$849  = s2_address[2:0] == 1'h1;
  assign \$851  = s2_address[2:0] == 1'h1;
  assign \$853  = s2_address[2:0] == 1'h1;
  assign \$855  = s2_address[2:0] == 1'h1;
  assign \$857  = s2_address[2:0] == 1'h1;
  assign \$85  = \$83  & s2_stall;
  assign \$859  = s2_address[2:0] == 1'h1;
  assign \$861  = s2_address[2:0] == 1'h1;
  assign \$863  = s2_address[2:0] == 1'h1;
  assign \$865  = s2_address[2:0] == 1'h1;
  assign \$867  = s2_address[2:0] == 1'h1;
  assign \$869  = s2_address[2:0] == 1'h1;
  assign \$871  = s2_address[2:0] == 1'h1;
  assign \$873  = s2_address[2:0] == 1'h1;
  assign \$875  = s2_address[2:0] == 1'h1;
  assign \$877  = { \$813 , \$815 , \$817 , \$819 , \$821 , \$823 , \$825 , \$827 , \$829 , \$831 , \$833 , \$835 , \$837 , \$839 , \$841 , \$843 , \$845 , \$847 , \$849 , \$851 , \$853 , \$855 , \$857 , \$859 , \$861 , \$863 , \$865 , \$867 , \$869 , \$871 , \$873 , \$875  } & data_din;
  assign \$87  = latch_stall_request & refill_request;
  assign \$879  = s2_address[2:0] == 2'h2;
  assign \$881  = s2_address[2:0] == 2'h2;
  assign \$883  = s2_address[2:0] == 2'h2;
  assign \$885  = s2_address[2:0] == 2'h2;
  assign \$887  = s2_address[2:0] == 2'h2;
  assign \$889  = s2_address[2:0] == 2'h2;
  assign \$891  = s2_address[2:0] == 2'h2;
  assign \$893  = s2_address[2:0] == 2'h2;
  assign \$895  = s2_address[2:0] == 2'h2;
  assign \$897  = s2_address[2:0] == 2'h2;
  assign \$89  = \$85  | \$87 ;
  assign \$899  = s2_address[2:0] == 2'h2;
  assign \$901  = s2_address[2:0] == 2'h2;
  assign \$903  = s2_address[2:0] == 2'h2;
  assign \$905  = s2_address[2:0] == 2'h2;
  assign \$907  = s2_address[2:0] == 2'h2;
  assign \$909  = s2_address[2:0] == 2'h2;
  assign \$911  = s2_address[2:0] == 2'h2;
  assign \$913  = s2_address[2:0] == 2'h2;
  assign \$915  = s2_address[2:0] == 2'h2;
  assign \$917  = s2_address[2:0] == 2'h2;
  assign \$91  = ~ stall_request;
  assign \$919  = s2_address[2:0] == 2'h2;
  assign \$921  = s2_address[2:0] == 2'h2;
  assign \$923  = s2_address[2:0] == 2'h2;
  assign \$925  = s2_address[2:0] == 2'h2;
  assign \$927  = s2_address[2:0] == 2'h2;
  assign \$929  = s2_address[2:0] == 2'h2;
  assign \$931  = s2_address[2:0] == 2'h2;
  assign \$933  = s2_address[2:0] == 2'h2;
  assign \$935  = s2_address[2:0] == 2'h2;
  assign \$937  = s2_address[2:0] == 2'h2;
  assign \$93  = latch_stall_request & \$91 ;
  assign \$939  = s2_address[2:0] == 2'h2;
  assign \$941  = s2_address[2:0] == 2'h2;
  assign \$943  = { \$879 , \$881 , \$883 , \$885 , \$887 , \$889 , \$891 , \$893 , \$895 , \$897 , \$899 , \$901 , \$903 , \$905 , \$907 , \$909 , \$911 , \$913 , \$915 , \$917 , \$919 , \$921 , \$923 , \$925 , \$927 , \$929 , \$931 , \$933 , \$935 , \$937 , \$939 , \$941  } & data_din;
  assign \$945  = s2_address[2:0] == 2'h3;
  assign \$947  = s2_address[2:0] == 2'h3;
  assign \$949  = s2_address[2:0] == 2'h3;
  assign \$951  = s2_address[2:0] == 2'h3;
  assign \$953  = s2_address[2:0] == 2'h3;
  assign \$955  = s2_address[2:0] == 2'h3;
  assign \$957  = s2_address[2:0] == 2'h3;
  assign \$95  = \$93  & s2_stall;
  assign \$959  = s2_address[2:0] == 2'h3;
  assign \$961  = s2_address[2:0] == 2'h3;
  assign \$963  = s2_address[2:0] == 2'h3;
  assign \$965  = s2_address[2:0] == 2'h3;
  assign \$967  = s2_address[2:0] == 2'h3;
  assign \$969  = s2_address[2:0] == 2'h3;
  assign \$971  = s2_address[2:0] == 2'h3;
  assign \$973  = s2_address[2:0] == 2'h3;
  assign \$975  = s2_address[2:0] == 2'h3;
  assign \$977  = s2_address[2:0] == 2'h3;
  assign \$97  = \$89  | \$95 ;
  assign \$979  = s2_address[2:0] == 2'h3;
  assign \$981  = s2_address[2:0] == 2'h3;
  assign \$983  = s2_address[2:0] == 2'h3;
  assign \$985  = s2_address[2:0] == 2'h3;
  assign \$987  = s2_address[2:0] == 2'h3;
  assign \$989  = s2_address[2:0] == 2'h3;
  assign \$991  = s2_address[2:0] == 2'h3;
  assign \$993  = s2_address[2:0] == 2'h3;
  assign \$995  = s2_address[2:0] == 2'h3;
  assign \$997  = s2_address[2:0] == 2'h3;
  always @(posedge clk)
      \$signal$69  <= \$next$signal$69 ;
  always @(posedge clk)
      \$signal$72  <= \$next$signal$72 ;
  always @(posedge clk)
      \$signal$75  <= \$next$signal$75 ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      flush_line <= \$next\flush_line ;
  always @(posedge clk)
      latch_s1_line_no_stall <= \$next\latch_s1_line_no_stall ;
  always @(posedge clk)
      latch_s1_line <= \$next\latch_s1_line ;
  always @(posedge clk)
      latch_data_rp_data <= \$next\latch_data_rp_data ;
  always @(posedge clk)
      latch_tag_rp_data <= \$next\latch_tag_rp_data ;
  always @(posedge clk)
      latch_s2_dat_r <= \$next\latch_s2_dat_r ;
  always @(posedge clk)
      restore_s2 <= \$next\restore_s2 ;
  always @(posedge clk)
      latch_stall_request <= \$next\latch_stall_request ;
  always @(posedge clk)
      latch_s2_stall <= \$next\latch_s2_stall ;
  always @(posedge clk)
      \$signal  <= \$next$signal ;
  always @(posedge clk)
      \$signal$57  <= \$next$signal$57 ;
  always @(posedge clk)
      \$signal$60  <= \$next$signal$60 ;
  always @(posedge clk)
      \$signal$63  <= \$next$signal$63 ;
  always @(posedge clk)
      \$signal$66  <= \$next$signal$66 ;
  reg [255:0] data_mem [31:0];
  initial begin
    data_mem[0] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[1] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[2] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[3] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[4] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[5] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[6] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[7] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[8] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[9] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[10] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[11] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[12] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[13] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[14] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[15] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[16] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[17] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[18] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[19] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[20] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[21] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[22] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[23] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[24] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[25] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[26] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[27] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[28] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[29] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[30] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[31] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\data_rp_data_mem_r_addr ;
    if (\$next\data_wp_data_mem_w_en [0]) data_mem[\$next\data_wp_data_mem_w_addr ][31:0] <= \$next\data_wp_data_mem_w_data [31:0];
    if (\$next\data_wp_data_mem_w_en [1]) data_mem[\$next\data_wp_data_mem_w_addr ][63:32] <= \$next\data_wp_data_mem_w_data [63:32];
    if (\$next\data_wp_data_mem_w_en [2]) data_mem[\$next\data_wp_data_mem_w_addr ][95:64] <= \$next\data_wp_data_mem_w_data [95:64];
    if (\$next\data_wp_data_mem_w_en [3]) data_mem[\$next\data_wp_data_mem_w_addr ][127:96] <= \$next\data_wp_data_mem_w_data [127:96];
    if (\$next\data_wp_data_mem_w_en [4]) data_mem[\$next\data_wp_data_mem_w_addr ][159:128] <= \$next\data_wp_data_mem_w_data [159:128];
    if (\$next\data_wp_data_mem_w_en [5]) data_mem[\$next\data_wp_data_mem_w_addr ][191:160] <= \$next\data_wp_data_mem_w_data [191:160];
    if (\$next\data_wp_data_mem_w_en [6]) data_mem[\$next\data_wp_data_mem_w_addr ][223:192] <= \$next\data_wp_data_mem_w_data [223:192];
    if (\$next\data_wp_data_mem_w_en [7]) data_mem[\$next\data_wp_data_mem_w_addr ][255:224] <= \$next\data_wp_data_mem_w_data [255:224];
  end
  assign data_rp_data_mem_r_data = data_mem[_0_];
  reg [21:0] tag_mem [31:0];
  initial begin
    tag_mem[0] = 22'h000000;
    tag_mem[1] = 22'h000000;
    tag_mem[2] = 22'h000000;
    tag_mem[3] = 22'h000000;
    tag_mem[4] = 22'h000000;
    tag_mem[5] = 22'h000000;
    tag_mem[6] = 22'h000000;
    tag_mem[7] = 22'h000000;
    tag_mem[8] = 22'h000000;
    tag_mem[9] = 22'h000000;
    tag_mem[10] = 22'h000000;
    tag_mem[11] = 22'h000000;
    tag_mem[12] = 22'h000000;
    tag_mem[13] = 22'h000000;
    tag_mem[14] = 22'h000000;
    tag_mem[15] = 22'h000000;
    tag_mem[16] = 22'h000000;
    tag_mem[17] = 22'h000000;
    tag_mem[18] = 22'h000000;
    tag_mem[19] = 22'h000000;
    tag_mem[20] = 22'h000000;
    tag_mem[21] = 22'h000000;
    tag_mem[22] = 22'h000000;
    tag_mem[23] = 22'h000000;
    tag_mem[24] = 22'h000000;
    tag_mem[25] = 22'h000000;
    tag_mem[26] = 22'h000000;
    tag_mem[27] = 22'h000000;
    tag_mem[28] = 22'h000000;
    tag_mem[29] = 22'h000000;
    tag_mem[30] = 22'h000000;
    tag_mem[31] = 22'h000000;
  end
  reg [4:0] _1_;
  always @(posedge clk) begin
    _1_ <= \$next\tag_rp_tag_mem_r_addr ;
    if (\$next\tag_wp_tag_mem_w_en ) tag_mem[\$next\tag_wp_tag_mem_w_addr ] <= \$next\tag_wp_tag_mem_w_data ;
  end
  assign tag_rp_tag_mem_r_data = tag_mem[_1_];
  \way_sel$2  way_sel (
    .i(way_sel_i),
    .n(way_sel_n),
    .o(way_sel_o)
  );
  always @* begin
    \$next\refill_lru  = 1'h0;
    \$next\refill_lru  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\enable  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
    casez (refill_lru)
      1'hz:
          \$next\enable  = 1'h1;
    endcase
  end
  always @* begin
    \$next\flush_line  = flush_line;
    casez (fsm_state)
      2'h0:
          \$next\flush_line  = \$21 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\flush_line  = 5'h1f;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$24 )
            1'h1:
                \$next\fsm_state  = 2'h1;
          endcase
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                \$next\fsm_state  = 2'h0;
            2'b1z:
                casez (refill_ready)
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
          endcase
      2'h2:
          casez (refill_valid)
            1'h1:
                casez (last_refill)
                  1'h1:
                      \$next\fsm_state  = 2'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\s2_dat_r$26  = 32'd0;
    casez (fsm_state)
      2'h1:
          casez (way_sel_o)
            1'hz:
                \$next\s2_dat_r$26  = data;
          endcase
      2'h2:
          casez (\$35 )
            1'h1:
                casez (\$37 )
                  1'h1:
                      \$next\s2_dat_r$26  = refill_data;
                  1'hz:
                      casez (way_sel_o)
                        1'hz:
                            \$next\s2_dat_r$26  = data;
                      endcase
                endcase
            1'hz:
                casez (way_sel_o)
                  1'hz:
                      \$next\s2_dat_r$26  = data;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\refill_stall  = 1'h0;
    casez (fsm_state)
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\refill_stall  = 1'h1;
          endcase
      2'h2:
          casez (\$47 )
            1'h1:
                casez (\$49 )
                  1'h1:
                      \$next\refill_stall  = \$51 ;
                  1'hz:
                      casez (s2_address[2:0])
                        3'h0:
                            \$next\refill_stall  = \$54 ;
                        3'h1:
                            \$next\refill_stall  = \$56 ;
                        3'h2:
                            \$next\refill_stall  = \$59 ;
                        3'h3:
                            \$next\refill_stall  = \$62 ;
                        3'h4:
                            \$next\refill_stall  = \$65 ;
                        3'h5:
                            \$next\refill_stall  = \$68 ;
                        3'h6:
                            \$next\refill_stall  = \$71 ;
                        3'hz:
                            \$next\refill_stall  = \$74 ;
                      endcase
                endcase
            1'hz:
                \$next\refill_stall  = \$81 ;
          endcase
    endcase
  end
  always @* begin
    \$next\refill_request  = 1'h0;
    casez (fsm_state)
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                /* empty */;
            2'b1z:
                casez (refill_ready)
                  1'h1:
                      \$next\refill_request  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next$signal  = \$signal ;
    \$next$signal$57  = \$signal$57 ;
    \$next$signal$60  = \$signal$60 ;
    \$next$signal$63  = \$signal$63 ;
    \$next$signal$66  = \$signal$66 ;
    \$next$signal$69  = \$signal$69 ;
    \$next$signal$72  = \$signal$72 ;
    \$next$signal$75  = \$signal$75 ;
    casez (fsm_state)
      2'h2:
          casez (refill_valid)
            1'h1:
              begin
                casez (refill_address[2:0])
                  3'h0:
                      \$next$signal  = 1'h1;
                  3'h1:
                      \$next$signal$57  = 1'h1;
                  3'h2:
                      \$next$signal$60  = 1'h1;
                  3'h3:
                      \$next$signal$63  = 1'h1;
                  3'h4:
                      \$next$signal$66  = 1'h1;
                  3'h5:
                      \$next$signal$69  = 1'h1;
                  3'h6:
                      \$next$signal$72  = 1'h1;
                  3'hz:
                      \$next$signal$75  = 1'h1;
                endcase
                casez (last_refill)
                  1'h1:
                    begin
                      \$next$signal  = 1'h0;
                      \$next$signal$57  = 1'h0;
                      \$next$signal$60  = 1'h0;
                      \$next$signal$63  = 1'h0;
                      \$next$signal$66  = 1'h0;
                      \$next$signal$69  = 1'h0;
                      \$next$signal$72  = 1'h0;
                      \$next$signal$75  = 1'h0;
                    end
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \$next$signal  = 1'h0;
          \$next$signal$57  = 1'h0;
          \$next$signal$60  = 1'h0;
          \$next$signal$63  = 1'h0;
          \$next$signal$66  = 1'h0;
          \$next$signal$69  = 1'h0;
          \$next$signal$72  = 1'h0;
          \$next$signal$75  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\stall_request  = 1'h0;
    \$next\stall_request  = \$3 ;
  end
  always @* begin
    \$next\latch_s2_stall  = latch_s2_stall;
    \$next\latch_s2_stall  = s2_stall;
    casez (rst)
      1'h1:
          \$next\latch_s2_stall  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_stall_request  = latch_stall_request;
    \$next\latch_stall_request  = stall_request;
    casez (rst)
      1'h1:
          \$next\latch_stall_request  = 1'h0;
    endcase
  end
  always @* begin
    \$next\restore_s2  = restore_s2;
    casez (\$97 )
      1'h1:
          \$next\restore_s2  = \$101 ;
    endcase
    casez (rst)
      1'h1:
          \$next\restore_s2  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_s2_dat_r  = latch_s2_dat_r;
    casez (\$117 )
      1'h1:
          \$next\latch_s2_dat_r  = \s2_dat_r$26 ;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_s2_dat_r  = 32'd0;
    endcase
  end
  always @* begin
    \$next\s2_dat_r  = 32'd0;
    casez (\$127 )
      1'h1:
          \$next\s2_dat_r  = latch_s2_dat_r;
      1'hz:
          \$next\s2_dat_r  = \s2_dat_r$26 ;
    endcase
  end
  always @* begin
    \$next\tag_din_value  = 21'h000000;
    casez ({ s2_we, refilling })
      2'bz1:
          \$next\tag_din_value  = refill_address[28:8];
      2'b1z:
          casez (refill_lru)
            1'hz:
                \$next\tag_din_value  = tag_value;
          endcase
      2'hz:
          \$next\tag_din_value  = 21'h000000;
    endcase
  end
  always @* begin
    \$next\tag_din_valid  = 1'h0;
    casez ({ s2_we, refilling })
      2'bz1:
          \$next\tag_din_valid  = \$129 ;
      2'b1z:
          \$next\tag_din_valid  = \$131 ;
      2'hz:
          \$next\tag_din_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_s1_line  = latch_s1_line;
    \$next\latch_s1_line  = s1_address[7:3];
    casez (rst)
      1'h1:
          \$next\latch_s1_line  = 5'h00;
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_addr  = 5'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\tag_wp_tag_mem_w_addr  = refill_address[7:3];
      2'b1z:
          \$next\tag_wp_tag_mem_w_addr  = flush_line;
      2'hz:
          \$next\tag_wp_tag_mem_w_addr  = s2_address[7:3];
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_en  = 1'h0;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\tag_wp_tag_mem_w_en  = enable;
      2'b1z:
          \$next\tag_wp_tag_mem_w_en  = 1'h1;
      2'hz:
          \$next\tag_wp_tag_mem_w_en  = \$133 ;
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_data  = 22'h000000;
    \$next\tag_wp_tag_mem_w_data  = { tag_din_valid, tag_din_value };
  end
  always @* begin
    \$next\tag_rp_tag_mem_r_addr  = 5'h00;
    \$next\tag_rp_tag_mem_r_addr  = s1_address[7:3];
  end
  always @* begin
    \$next\latch_tag_rp_data  = latch_tag_rp_data;
    casez (\$135 )
      1'h1:
          \$next\latch_tag_rp_data  = tag_rp_tag_mem_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_tag_rp_data  = 22'h000000;
    endcase
  end
  always @* begin
    \$next\tag_value  = 21'h000000;
    \$next\tag_valid  = 1'h0;
    casez (\$137 )
      1'h1:
          { \$next\tag_valid , \$next\tag_value  } = tag_rp_tag_mem_r_data;
      1'hz:
          { \$next\tag_valid , \$next\tag_value  } = latch_tag_rp_data;
    endcase
  end
  always @* begin
    \$next\data_din  = 32'd0;
    casez (s2_sel[0])
      1'h1:
          \$next\data_din [7:0] = s2_dat_w[7:0];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [7:0] = data[7:0];
          endcase
    endcase
    casez (s2_sel[1])
      1'h1:
          \$next\data_din [15:8] = s2_dat_w[15:8];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [15:8] = data[15:8];
          endcase
    endcase
    casez (s2_sel[2])
      1'h1:
          \$next\data_din [23:16] = s2_dat_w[23:16];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [23:16] = data[23:16];
          endcase
    endcase
    casez (s2_sel[3])
      1'h1:
          \$next\data_din [31:24] = s2_dat_w[31:24];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [31:24] = data[31:24];
          endcase
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_addr  = 5'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_addr  = refill_address[7:3];
      2'b1z:
          \$next\data_wp_data_mem_w_addr  = flush_line;
      2'hz:
          \$next\data_wp_data_mem_w_addr  = s2_address[7:3];
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_en  = 8'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_en  = { \$169 , \$165 , \$161 , \$157 , \$153 , \$149 , \$145 , \$141  };
      2'b1z:
          /* empty */;
      2'hz:
          \$next\data_wp_data_mem_w_en  = { \$217 , \$211 , \$205 , \$199 , \$193 , \$187 , \$181 , \$175  };
    endcase
  end
  always @* begin
    \$next\latch_s1_line_no_stall  = latch_s1_line_no_stall;
    casez (\$5 )
      1'h1:
          \$next\latch_s1_line_no_stall  = s1_address[7:3];
    endcase
    casez (rst)
      1'h1:
          \$next\latch_s1_line_no_stall  = 5'h00;
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_data  = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_data  = { \$745 , \$679 , \$613 , \$547 , \$481 , \$415 , \$349 , \$283  };
      2'b1z:
          /* empty */;
      2'hz:
          \$next\data_wp_data_mem_w_data  = { \$1273 , \$1207 , \$1141 , \$1075 , \$1009 , \$943 , \$877 , \$811  };
    endcase
  end
  always @* begin
    \$next\data_rp_data_mem_r_addr  = 5'h00;
    \$next\data_rp_data_mem_r_addr  = s1_address[7:3];
  end
  always @* begin
    \$next\latch_data_rp_data  = latch_data_rp_data;
    casez (\$1275 )
      1'h1:
          \$next\latch_data_rp_data  = data_rp_data_mem_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_data_rp_data  = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\data  = 32'd0;
    casez (\$1277 )
      1'h1:
          \$next\data  = \$1279 ;
      1'hz:
          \$next\data  = \$1283 ;
    endcase
  end
  always @* begin
    \$next\way_sel_i  = 1'h0;
    \$next\way_sel_i  = \$13 ;
  end
  always @* begin
    \$next\miss  = 1'h0;
    \$next\miss  = \$15 ;
  end
  always @* begin
    \$next\flushing  = 1'h0;
    \$next\flushing  = \$17 ;
  end
  always @* begin
    \$next\refilling  = 1'h0;
    \$next\refilling  = \$19 ;
  end
  always @* begin
    \$next\flush_stall  = 1'h0;
    casez (fsm_state)
      2'h0:
          \$next\flush_stall  = 1'h1;
    endcase
  end
  assign \$21  = \$22 ;
  assign data = \$next\data ;
  assign data_rp_data_mem_r_addr = \$next\data_rp_data_mem_r_addr ;
  assign data_wp_data_mem_w_data = \$next\data_wp_data_mem_w_data ;
  assign data_wp_data_mem_w_en = \$next\data_wp_data_mem_w_en ;
  assign data_wp_data_mem_w_addr = \$next\data_wp_data_mem_w_addr ;
  assign data_din = \$next\data_din ;
  assign tag_value = \$next\tag_value ;
  assign tag_valid = \$next\tag_valid ;
  assign tag_rp_tag_mem_r_addr = \$next\tag_rp_tag_mem_r_addr ;
  assign tag_wp_tag_mem_w_data = \$next\tag_wp_tag_mem_w_data ;
  assign tag_wp_tag_mem_w_en = \$next\tag_wp_tag_mem_w_en ;
  assign tag_wp_tag_mem_w_addr = \$next\tag_wp_tag_mem_w_addr ;
  assign tag_din_valid = \$next\tag_din_valid ;
  assign tag_din_value = \$next\tag_din_value ;
  assign s2_dat_r = \$next\s2_dat_r ;
  assign refill_request = \$next\refill_request ;
  assign refill_stall = \$next\refill_stall ;
  assign \s2_dat_r$26  = \$next\s2_dat_r$26 ;
  assign flush_stall = \$next\flush_stall ;
  assign refilling = \$next\refilling ;
  assign flushing = \$next\flushing ;
  assign miss = \$next\miss ;
  assign way_sel_i = \$next\way_sel_i ;
  assign stall_request = \$next\stall_request ;
  assign enable = \$next\enable ;
  assign refill_lru = \$next\refill_lru ;
endmodule

module decoder(immediate, rd, rs1, rs2, rd_we, rs1_re, rs2_re, funct3, compare, branch, adder_sub, \logic , shift, direction, sext, lui, auipc, jump, load, store, fence_i, csr, csr_we, ecall, ebreak, mret, bypass_x, bypass_m, illegal, instruction);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire [31:0] \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire [31:0] \$2 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$23 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$25 ;
  wire \$251 ;
  wire \$253 ;
  wire \$255 ;
  wire \$257 ;
  wire \$259 ;
  wire \$261 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$27 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$279 ;
  wire \$281 ;
  wire \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$289 ;
  wire \$29 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$31 ;
  wire \$311 ;
  wire \$313 ;
  wire \$315 ;
  wire \$317 ;
  wire \$319 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$327 ;
  wire \$329 ;
  wire \$33 ;
  wire \$331 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire \$349 ;
  wire \$35 ;
  wire \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire \$359 ;
  wire \$361 ;
  wire \$363 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$37 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$377 ;
  wire \$379 ;
  wire \$381 ;
  wire \$383 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$39 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire [31:0] \$4 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$407 ;
  wire \$409 ;
  wire \$41 ;
  wire \$411 ;
  wire \$413 ;
  wire \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$421 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$43 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire \$45 ;
  wire \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire \$469 ;
  wire \$47 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire \$479 ;
  wire \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire \$487 ;
  wire \$489 ;
  wire \$49 ;
  wire \$491 ;
  wire \$493 ;
  wire \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$501 ;
  wire \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$51 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire \$529 ;
  wire \$53 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire \$547 ;
  wire \$549 ;
  wire \$55 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$57 ;
  wire \$571 ;
  wire \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire \$59 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire [31:0] \$6 ;
  wire \$601 ;
  wire \$602 ;
  wire \$604 ;
  wire \$606 ;
  wire \$608 ;
  wire \$61 ;
  wire \$610 ;
  wire \$612 ;
  wire \$614 ;
  wire \$616 ;
  wire \$618 ;
  wire \$620 ;
  wire \$622 ;
  wire \$624 ;
  wire \$626 ;
  wire \$629 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire [34:0] \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire [34:0] \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  reg \$next\adder ;
  reg \$next\adder_sub ;
  reg \$next\auipc ;
  reg [11:0] \$next\bimm12 ;
  reg \$next\branch ;
  reg \$next\bypass_m ;
  reg \$next\bypass_x ;
  reg \$next\compare ;
  reg \$next\csr ;
  reg \$next\csr_we ;
  reg \$next\direction ;
  reg \$next\ebreak ;
  reg \$next\ecall ;
  reg \$next\fence_i ;
  reg [2:0] \$next\fmt ;
  reg [11:0] \$next\funct12 ;
  reg [2:0] \$next\funct3 ;
  reg [2:0] \$next\funct3$1 ;
  reg [6:0] \$next\funct7 ;
  reg [11:0] \$next\iimm12 ;
  reg \$next\illegal ;
  reg [31:0] \$next\immediate ;
  reg [19:0] \$next\jimm20 ;
  reg \$next\jump ;
  reg \$next\load ;
  reg \$next\logic ;
  reg \$next\lui ;
  reg \$next\mret ;
  reg [4:0] \$next\opcode ;
  reg \$next\privileged ;
  reg [4:0] \$next\rd ;
  reg \$next\rd_we ;
  reg [4:0] \$next\rs1 ;
  reg \$next\rs1_re ;
  reg [4:0] \$next\rs2 ;
  reg \$next\rs2_re ;
  reg \$next\sext ;
  reg \$next\shift ;
  reg [11:0] \$next\simm12 ;
  reg \$next\store ;
  reg [19:0] \$next\uimm20 ;
  wire adder;
  output adder_sub;
  output auipc;
  wire [11:0] bimm12;
  output branch;
  output bypass_m;
  output bypass_x;
  output compare;
  output csr;
  output csr_we;
  output direction;
  output ebreak;
  output ecall;
  output fence_i;
  wire [2:0] fmt;
  wire [11:0] funct12;
  output [2:0] funct3;
  wire [2:0] \funct3$1 ;
  wire [6:0] funct7;
  wire [11:0] iimm12;
  output illegal;
  output [31:0] immediate;
  input [31:0] instruction;
  wire [19:0] jimm20;
  output jump;
  output load;
  output \logic ;
  output lui;
  output mret;
  wire [4:0] opcode;
  wire privileged;
  output [4:0] rd;
  output rd_we;
  output [4:0] rs1;
  output rs1_re;
  output [4:0] rs2;
  output rs2_re;
  output sext;
  output shift;
  wire [11:0] simm12;
  output store;
  wire [19:0] uimm20;
  assign \$9  = uimm20 <<< 4'hc;
  assign \$99  = \funct3$1  == 1'h0;
  assign \$101  = \$97  & \$99 ;
  assign \$103  = \$101  & 1'h1;
  assign \$105  = \$103  & 1'h1;
  assign \$107  = opcode == 5'h18;
  assign \$109  = \funct3$1  == 1'h1;
  assign \$111  = \$107  & \$109 ;
  assign \$113  = \$111  & 1'h1;
  assign \$115  = \$113  & 1'h1;
  assign \$117  = \$105  | \$115 ;
  assign \$11  = + $signed(jimm20);
  assign \$119  = opcode == 5'h18;
  assign \$121  = \funct3$1  == 3'h4;
  assign \$123  = \$119  & \$121 ;
  assign \$125  = \$123  & 1'h1;
  assign \$127  = \$125  & 1'h1;
  assign \$129  = \$117  | \$127 ;
  assign \$131  = opcode == 5'h18;
  assign \$133  = \funct3$1  == 3'h5;
  assign \$135  = \$131  & \$133 ;
  assign \$137  = \$135  & 1'h1;
  assign \$13  = fmt == 1'h0;
  assign \$139  = \$137  & 1'h1;
  assign \$141  = \$129  | \$139 ;
  assign \$143  = opcode == 5'h18;
  assign \$145  = \funct3$1  == 3'h6;
  assign \$147  = \$143  & \$145 ;
  assign \$149  = \$147  & 1'h1;
  assign \$151  = \$149  & 1'h1;
  assign \$153  = \$141  | \$151 ;
  assign \$155  = opcode == 5'h18;
  assign \$157  = \funct3$1  == 3'h7;
  assign \$15  = fmt == 1'h1;
  assign \$159  = \$155  & \$157 ;
  assign \$161  = \$159  & 1'h1;
  assign \$163  = \$161  & 1'h1;
  assign \$165  = \$153  | \$163 ;
  assign \$167  = opcode == 3'h4;
  assign \$169  = \funct3$1  == 1'h0;
  assign \$171  = \$167  & \$169 ;
  assign \$173  = \$171  & 1'h1;
  assign \$175  = \$173  & 1'h1;
  assign \$177  = opcode == 4'hc;
  assign \$17  = \$13  | \$15 ;
  assign \$179  = \funct3$1  == 1'h0;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = funct7 == 1'h0;
  assign \$185  = \$181  & \$183 ;
  assign \$187  = \$185  & 1'h1;
  assign \$189  = \$175  | \$187 ;
  assign \$191  = opcode == 4'hc;
  assign \$193  = \funct3$1  == 1'h0;
  assign \$195  = \$191  & \$193 ;
  assign \$197  = funct7 == 6'h20;
  assign \$19  = fmt == 3'h4;
  assign \$199  = \$195  & \$197 ;
  assign \$201  = \$199  & 1'h1;
  assign \$203  = \$189  | \$201 ;
  assign \$205  = funct7 == 6'h20;
  assign \$207  = rs2_re & \$205 ;
  assign \$209  = \$207  | compare;
  assign \$211  = \$209  | branch;
  assign \$213  = opcode == 3'h4;
  assign \$215  = \funct3$1  == 3'h4;
  assign \$217  = \$213  & \$215 ;
  assign \$21  = \$17  | \$19 ;
  assign \$219  = \$217  & 1'h1;
  assign \$221  = \$219  & 1'h1;
  assign \$223  = opcode == 3'h4;
  assign \$225  = \funct3$1  == 3'h6;
  assign \$227  = \$223  & \$225 ;
  assign \$229  = \$227  & 1'h1;
  assign \$231  = \$229  & 1'h1;
  assign \$233  = \$221  | \$231 ;
  assign \$235  = opcode == 3'h4;
  assign \$237  = \funct3$1  == 3'h7;
  assign \$23  = fmt == 3'h5;
  assign \$239  = \$235  & \$237 ;
  assign \$241  = \$239  & 1'h1;
  assign \$243  = \$241  & 1'h1;
  assign \$245  = \$233  | \$243 ;
  assign \$247  = opcode == 4'hc;
  assign \$249  = \funct3$1  == 3'h4;
  assign \$251  = \$247  & \$249 ;
  assign \$253  = \$251  & 1'h1;
  assign \$255  = \$253  & 1'h1;
  assign \$257  = \$245  | \$255 ;
  assign \$25  = \$21  | \$23 ;
  assign \$259  = opcode == 4'hc;
  assign \$261  = \funct3$1  == 3'h6;
  assign \$263  = \$259  & \$261 ;
  assign \$265  = \$263  & 1'h1;
  assign \$267  = \$265  & 1'h1;
  assign \$269  = \$257  | \$267 ;
  assign \$271  = opcode == 4'hc;
  assign \$273  = \funct3$1  == 3'h7;
  assign \$275  = \$271  & \$273 ;
  assign \$277  = \$275  & 1'h1;
  assign \$27  = fmt == 1'h0;
  assign \$279  = \$277  & 1'h1;
  assign \$281  = \$269  | \$279 ;
  assign \$283  = opcode == 3'h4;
  assign \$285  = \funct3$1  == 1'h1;
  assign \$287  = \$283  & \$285 ;
  assign \$289  = funct7 == 1'h0;
  assign \$291  = \$287  & \$289 ;
  assign \$293  = \$291  & 1'h1;
  assign \$295  = opcode == 3'h4;
  assign \$297  = \funct3$1  == 3'h5;
  assign \$2  = + $signed(iimm12);
  assign \$29  = fmt == 1'h1;
  assign \$299  = \$295  & \$297 ;
  assign \$301  = funct7 == 1'h0;
  assign \$303  = \$299  & \$301 ;
  assign \$305  = \$303  & 1'h1;
  assign \$307  = \$293  | \$305 ;
  assign \$309  = opcode == 3'h4;
  assign \$311  = \funct3$1  == 3'h5;
  assign \$313  = \$309  & \$311 ;
  assign \$315  = funct7 == 6'h20;
  assign \$317  = \$313  & \$315 ;
  assign \$31  = \$27  | \$29 ;
  assign \$319  = \$317  & 1'h1;
  assign \$321  = \$307  | \$319 ;
  assign \$323  = opcode == 4'hc;
  assign \$325  = \funct3$1  == 1'h1;
  assign \$327  = \$323  & \$325 ;
  assign \$329  = funct7 == 1'h0;
  assign \$331  = \$327  & \$329 ;
  assign \$333  = \$331  & 1'h1;
  assign \$335  = \$321  | \$333 ;
  assign \$337  = opcode == 4'hc;
  assign \$33  = fmt == 2'h2;
  assign \$339  = \funct3$1  == 3'h5;
  assign \$341  = \$337  & \$339 ;
  assign \$343  = funct7 == 1'h0;
  assign \$345  = \$341  & \$343 ;
  assign \$347  = \$345  & 1'h1;
  assign \$349  = \$335  | \$347 ;
  assign \$351  = opcode == 4'hc;
  assign \$353  = \funct3$1  == 3'h5;
  assign \$355  = \$351  & \$353 ;
  assign \$357  = funct7 == 6'h20;
  assign \$35  = \$31  | \$33 ;
  assign \$359  = \$355  & \$357 ;
  assign \$361  = \$359  & 1'h1;
  assign \$363  = \$349  | \$361 ;
  assign \$365  = \funct3$1  == 3'h5;
  assign \$367  = funct7 == 6'h20;
  assign \$369  = opcode == 4'hd;
  assign \$371  = opcode == 3'h5;
  assign \$373  = opcode == 5'h1b;
  assign \$375  = \$373  & 1'h1;
  assign \$377  = \$375  & 1'h1;
  assign \$37  = fmt == 2'h3;
  assign \$379  = \$377  & 1'h1;
  assign \$381  = opcode == 5'h19;
  assign \$383  = \funct3$1  == 1'h0;
  assign \$385  = \$381  & \$383 ;
  assign \$387  = \$385  & 1'h1;
  assign \$389  = \$387  & 1'h1;
  assign \$391  = \$379  | \$389 ;
  assign \$393  = opcode == 1'h0;
  assign \$395  = \funct3$1  == 1'h0;
  assign \$397  = \$393  & \$395 ;
  assign \$39  = \$35  | \$37 ;
  assign \$399  = \$397  & 1'h1;
  assign \$401  = \$399  & 1'h1;
  assign \$403  = opcode == 1'h0;
  assign \$405  = \funct3$1  == 3'h4;
  assign \$407  = \$403  & \$405 ;
  assign \$409  = \$407  & 1'h1;
  assign \$411  = \$409  & 1'h1;
  assign \$413  = \$401  | \$411 ;
  assign \$415  = opcode == 1'h0;
  assign \$417  = \funct3$1  == 1'h1;
  assign \$41  = fmt == 1'h0;
  assign \$419  = \$415  & \$417 ;
  assign \$421  = \$419  & 1'h1;
  assign \$423  = \$421  & 1'h1;
  assign \$425  = \$413  | \$423 ;
  assign \$427  = opcode == 1'h0;
  assign \$429  = \funct3$1  == 3'h5;
  assign \$431  = \$427  & \$429 ;
  assign \$433  = \$431  & 1'h1;
  assign \$435  = \$433  & 1'h1;
  assign \$437  = \$425  | \$435 ;
  assign \$43  = fmt == 2'h2;
  assign \$439  = opcode == 1'h0;
  assign \$441  = \funct3$1  == 2'h2;
  assign \$443  = \$439  & \$441 ;
  assign \$445  = \$443  & 1'h1;
  assign \$447  = \$445  & 1'h1;
  assign \$449  = \$437  | \$447 ;
  assign \$451  = opcode == 4'h8;
  assign \$453  = \funct3$1  == 1'h0;
  assign \$455  = \$451  & \$453 ;
  assign \$457  = \$455  & 1'h1;
  assign \$45  = \$41  | \$43 ;
  assign \$459  = \$457  & 1'h1;
  assign \$461  = opcode == 4'h8;
  assign \$463  = \funct3$1  == 1'h1;
  assign \$465  = \$461  & \$463 ;
  assign \$467  = \$465  & 1'h1;
  assign \$469  = \$467  & 1'h1;
  assign \$471  = \$459  | \$469 ;
  assign \$473  = opcode == 4'h8;
  assign \$475  = \funct3$1  == 2'h2;
  assign \$477  = \$473  & \$475 ;
  assign \$47  = fmt == 2'h3;
  assign \$479  = \$477  & 1'h1;
  assign \$481  = \$479  & 1'h1;
  assign \$483  = \$471  | \$481 ;
  assign \$485  = opcode == 2'h3;
  assign \$487  = \funct3$1  == 1'h1;
  assign \$489  = \$485  & \$487 ;
  assign \$491  = \$489  & 1'h1;
  assign \$493  = \$491  & 1'h1;
  assign \$495  = opcode == 5'h1c;
  assign \$497  = \funct3$1  == 1'h1;
  assign \$4  = + $signed(simm12);
  assign \$49  = \$45  | \$47 ;
  assign \$499  = \$495  & \$497 ;
  assign \$501  = \$499  & 1'h1;
  assign \$503  = \$501  & 1'h1;
  assign \$505  = opcode == 5'h1c;
  assign \$507  = \funct3$1  == 2'h2;
  assign \$509  = \$505  & \$507 ;
  assign \$511  = \$509  & 1'h1;
  assign \$513  = \$511  & 1'h1;
  assign \$515  = \$503  | \$513 ;
  assign \$517  = opcode == 5'h1c;
  assign \$51  = opcode == 3'h4;
  assign \$519  = \funct3$1  == 2'h3;
  assign \$521  = \$517  & \$519 ;
  assign \$523  = \$521  & 1'h1;
  assign \$525  = \$523  & 1'h1;
  assign \$527  = \$515  | \$525 ;
  assign \$529  = opcode == 5'h1c;
  assign \$531  = \funct3$1  == 3'h5;
  assign \$533  = \$529  & \$531 ;
  assign \$535  = \$533  & 1'h1;
  assign \$537  = \$535  & 1'h1;
  assign \$53  = \funct3$1  == 2'h2;
  assign \$539  = \$527  | \$537 ;
  assign \$541  = opcode == 5'h1c;
  assign \$543  = \funct3$1  == 3'h6;
  assign \$545  = \$541  & \$543 ;
  assign \$547  = \$545  & 1'h1;
  assign \$549  = \$547  & 1'h1;
  assign \$551  = \$539  | \$549 ;
  assign \$553  = opcode == 5'h1c;
  assign \$555  = \funct3$1  == 3'h7;
  assign \$557  = \$553  & \$555 ;
  assign \$55  = \$51  & \$53 ;
  assign \$559  = \$557  & 1'h1;
  assign \$561  = \$559  & 1'h1;
  assign \$563  = \$551  | \$561 ;
  assign \$565  = ~ \funct3$1 [1];
  assign \$567  = rs1 != 1'h0;
  assign \$569  = \$565  | \$567 ;
  assign \$571  = opcode == 5'h1c;
  assign \$573  = \funct3$1  == 1'h0;
  assign \$575  = \$571  & \$573 ;
  assign \$577  = funct12 == 1'h0;
  assign \$57  = \$55  & 1'h1;
  assign \$579  = privileged & \$577 ;
  assign \$581  = funct12 == 1'h1;
  assign \$583  = privileged & \$581 ;
  assign \$585  = funct12 == 10'h302;
  assign \$587  = privileged & \$585 ;
  assign \$589  = adder | \logic ;
  assign \$591  = \$589  | lui;
  assign \$593  = \$591  | auipc;
  assign \$595  = \$593  | csr;
  assign \$597  = compare | shift;
  assign \$59  = \$57  & 1'h1;
  assign \$599  = instruction[1:0] != 2'h3;
  assign \$602  = compare | branch;
  assign \$604  = \$602  | adder;
  assign \$606  = \$604  | \logic ;
  assign \$608  = \$606  | shift;
  assign \$610  = \$608  | lui;
  assign \$612  = \$610  | auipc;
  assign \$614  = \$612  | jump;
  assign \$616  = \$614  | load;
  assign \$618  = \$616  | store;
  assign \$61  = opcode == 3'h4;
  assign \$620  = \$618  | csr;
  assign \$622  = \$620  | ecall;
  assign \$624  = \$622  | ebreak;
  assign \$626  = \$624  | mret;
  assign \$601  = ~ \$626 ;
  assign \$629  = \$599  | \$601 ;
  assign \$63  = \funct3$1  == 2'h3;
  assign \$65  = \$61  & \$63 ;
  assign \$67  = \$65  & 1'h1;
  assign \$6  = + $signed(bimm12);
  assign \$69  = \$67  & 1'h1;
  assign \$71  = \$59  | \$69 ;
  assign \$73  = opcode == 4'hc;
  assign \$75  = \funct3$1  == 2'h2;
  assign \$77  = \$73  & \$75 ;
  assign \$79  = \$77  & 1'h1;
  assign \$81  = \$79  & 1'h1;
  assign \$83  = \$71  | \$81 ;
  assign \$85  = opcode == 4'hc;
  assign \$87  = \funct3$1  == 2'h3;
  assign \$89  = \$85  & \$87 ;
  assign \$91  = \$89  & 1'h1;
  assign \$93  = \$91  & 1'h1;
  assign \$95  = \$83  | \$93 ;
  assign \$97  = opcode == 5'h18;
  always @* begin
    \$next\opcode  = 5'h00;
    \$next\opcode  = instruction[6:2];
  end
  always @* begin
    \$next\funct3$1  = 3'h0;
    \$next\funct3$1  = instruction[14:12];
  end
  always @* begin
    \$next\immediate  = 32'd0;
    casez (fmt)
      3'h1:
          \$next\immediate  = \$2 ;
      3'h2:
          \$next\immediate  = \$4 ;
      3'h3:
          \$next\immediate  = \$6 ;
      3'h4:
          \$next\immediate  = \$8 [31:0];
      3'h5:
          \$next\immediate  = \$11 ;
    endcase
  end
  always @* begin
    \$next\rd  = 5'h00;
    \$next\rd  = instruction[11:7];
  end
  always @* begin
    \$next\rs1  = 5'h00;
    \$next\rs1  = instruction[19:15];
  end
  always @* begin
    \$next\rs2  = 5'h00;
    \$next\rs2  = instruction[24:20];
  end
  always @* begin
    \$next\rd_we  = 1'h0;
    \$next\rd_we  = \$25 ;
  end
  always @* begin
    \$next\rs1_re  = 1'h0;
    \$next\rs1_re  = \$39 ;
  end
  always @* begin
    \$next\rs2_re  = 1'h0;
    \$next\rs2_re  = \$49 ;
  end
  always @* begin
    \$next\funct3  = 3'h0;
    \$next\funct3  = \funct3$1 ;
  end
  always @* begin
    \$next\compare  = 1'h0;
    \$next\compare  = \$95 ;
  end
  always @* begin
    \$next\branch  = 1'h0;
    \$next\branch  = \$165 ;
  end
  always @* begin
    \$next\funct7  = 7'h00;
    \$next\funct7  = instruction[31:25];
  end
  always @* begin
    \$next\adder  = 1'h0;
    \$next\adder  = \$203 ;
  end
  always @* begin
    \$next\adder_sub  = 1'h0;
    \$next\adder_sub  = \$211 ;
  end
  always @* begin
    \$next\logic  = 1'h0;
    \$next\logic  = \$281 ;
  end
  always @* begin
    \$next\shift  = 1'h0;
    \$next\shift  = \$363 ;
  end
  always @* begin
    \$next\direction  = 1'h0;
    \$next\direction  = \$365 ;
  end
  always @* begin
    \$next\sext  = 1'h0;
    \$next\sext  = \$367 ;
  end
  always @* begin
    \$next\lui  = 1'h0;
    \$next\lui  = \$369 ;
  end
  always @* begin
    \$next\auipc  = 1'h0;
    \$next\auipc  = \$371 ;
  end
  always @* begin
    \$next\jump  = 1'h0;
    \$next\jump  = \$391 ;
  end
  always @* begin
    \$next\load  = 1'h0;
    \$next\load  = \$449 ;
  end
  always @* begin
    \$next\funct12  = 12'h000;
    \$next\funct12  = instruction[31:20];
  end
  always @* begin
    \$next\store  = 1'h0;
    \$next\store  = \$483 ;
  end
  always @* begin
    \$next\fence_i  = 1'h0;
    \$next\fence_i  = \$493 ;
  end
  always @* begin
    \$next\csr  = 1'h0;
    \$next\csr  = \$563 ;
  end
  always @* begin
    \$next\csr_we  = 1'h0;
    \$next\csr_we  = \$569 ;
  end
  always @* begin
    \$next\privileged  = 1'h0;
    \$next\privileged  = \$575 ;
  end
  always @* begin
    \$next\ecall  = 1'h0;
    \$next\ecall  = \$579 ;
  end
  always @* begin
    \$next\ebreak  = 1'h0;
    \$next\ebreak  = \$583 ;
  end
  always @* begin
    \$next\mret  = 1'h0;
    \$next\mret  = \$587 ;
  end
  always @* begin
    \$next\bypass_x  = 1'h0;
    \$next\bypass_x  = \$595 ;
  end
  always @* begin
    \$next\bypass_m  = 1'h0;
    \$next\bypass_m  = \$597 ;
  end
  always @* begin
    \$next\iimm12  = 12'h000;
    \$next\iimm12  = instruction[31:20];
  end
  always @* begin
    \$next\illegal  = 1'h0;
    \$next\illegal  = \$629 ;
  end
  always @* begin
    \$next\simm12  = 12'h000;
    \$next\simm12  = { instruction[31:25], instruction[11:7] };
  end
  always @* begin
    \$next\bimm12  = 12'h000;
    \$next\bimm12  = { instruction[7], instruction[30:25], instruction[11:8], 1'h0 };
  end
  always @* begin
    \$next\uimm20  = 20'h00000;
    \$next\uimm20  = instruction[31:12];
  end
  always @* begin
    \$next\jimm20  = 20'h00000;
    \$next\jimm20  = { instruction[19:12], instruction[20], instruction[30:21], 1'h0 };
  end
  always @* begin
    \$next\fmt  = 3'h0;
    casez (opcode)
      5'h0d:
          \$next\fmt  = 3'h4;
      5'h05:
          \$next\fmt  = 3'h4;
      5'h1b:
          \$next\fmt  = 3'h5;
      5'h19:
          \$next\fmt  = 3'h1;
      5'h18:
          \$next\fmt  = 3'h3;
      5'h00:
          \$next\fmt  = 3'h1;
      5'h08:
          \$next\fmt  = 3'h2;
      5'h04:
          \$next\fmt  = 3'h1;
      5'h0c:
          \$next\fmt  = 3'h0;
      5'h03:
          \$next\fmt  = 3'h1;
      5'h1c:
          \$next\fmt  = 3'h1;
    endcase
  end
  assign \$8  = \$9 ;
  assign illegal = \$next\illegal ;
  assign bypass_m = \$next\bypass_m ;
  assign bypass_x = \$next\bypass_x ;
  assign mret = \$next\mret ;
  assign ebreak = \$next\ebreak ;
  assign ecall = \$next\ecall ;
  assign privileged = \$next\privileged ;
  assign csr_we = \$next\csr_we ;
  assign csr = \$next\csr ;
  assign fence_i = \$next\fence_i ;
  assign store = \$next\store ;
  assign load = \$next\load ;
  assign jump = \$next\jump ;
  assign auipc = \$next\auipc ;
  assign lui = \$next\lui ;
  assign sext = \$next\sext ;
  assign direction = \$next\direction ;
  assign shift = \$next\shift ;
  assign \logic  = \$next\logic ;
  assign adder_sub = \$next\adder_sub ;
  assign adder = \$next\adder ;
  assign branch = \$next\branch ;
  assign compare = \$next\compare ;
  assign funct3 = \$next\funct3 ;
  assign rs2_re = \$next\rs2_re ;
  assign rs1_re = \$next\rs1_re ;
  assign rd_we = \$next\rd_we ;
  assign rs2 = \$next\rs2 ;
  assign rs1 = \$next\rs1 ;
  assign rd = \$next\rd ;
  assign immediate = \$next\immediate ;
  assign fmt = \$next\fmt ;
  assign jimm20 = \$next\jimm20 ;
  assign uimm20 = \$next\uimm20 ;
  assign bimm12 = \$next\bimm12 ;
  assign simm12 = \$next\simm12 ;
  assign iimm12 = \$next\iimm12 ;
  assign funct12 = \$next\funct12 ;
  assign funct7 = \$next\funct7 ;
  assign \funct3$1  = \$next\funct3$1 ;
  assign opcode = \$next\opcode ;
endmodule

module exception_pe(o, n, i);
  wire \$1 ;
  reg \$next\n ;
  reg [3:0] \$next\o ;
  input [15:0] i;
  output n;
  output [3:0] o;
  assign \$1  = i == 1'h0;
  always @* begin
    \$next\o  = 4'h0;
    casez (i[15])
      1'h1:
          \$next\o  = 4'hf;
    endcase
    casez (i[14])
      1'h1:
          \$next\o  = 4'he;
    endcase
    casez (i[13])
      1'h1:
          \$next\o  = 4'hd;
    endcase
    casez (i[12])
      1'h1:
          \$next\o  = 4'hc;
    endcase
    casez (i[11])
      1'h1:
          \$next\o  = 4'hb;
    endcase
    casez (i[10])
      1'h1:
          \$next\o  = 4'ha;
    endcase
    casez (i[9])
      1'h1:
          \$next\o  = 4'h9;
    endcase
    casez (i[8])
      1'h1:
          \$next\o  = 4'h8;
    endcase
    casez (i[7])
      1'h1:
          \$next\o  = 4'h7;
    endcase
    casez (i[6])
      1'h1:
          \$next\o  = 4'h6;
    endcase
    casez (i[5])
      1'h1:
          \$next\o  = 4'h5;
    endcase
    casez (i[4])
      1'h1:
          \$next\o  = 4'h4;
    endcase
    casez (i[3])
      1'h1:
          \$next\o  = 4'h3;
    endcase
    casez (i[2])
      1'h1:
          \$next\o  = 4'h2;
    endcase
    casez (i[1])
      1'h1:
          \$next\o  = 4'h1;
    endcase
    casez (i[0])
      1'h1:
          \$next\o  = 4'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    \$next\n  = \$1 ;
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

module f(kill, stall, payload_branch_predict_taken, \valid$1 , \payload_branch_predict_taken$2 , payload_branch_taken, \valid$3 , rst, clk, \valid$4 , \stall$5 , \valid$6 , \kill$7 , \stall$8 , valid);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$9 ;
  reg \$next\kill$17 ;
  reg \$next\kill$7 ;
  reg \$next\stall$5 ;
  reg \$next\stall$8 ;
  reg \$next\valid$4 ;
  reg \$next\valid$6 ;
  input clk;
  input kill;
  wire \kill$17 ;
  output \kill$7 ;
  input payload_branch_predict_taken;
  input \payload_branch_predict_taken$2 ;
  input payload_branch_taken;
  input rst;
  input stall;
  output \stall$5 ;
  output \stall$8 ;
  input valid;
  input \valid$1 ;
  input \valid$3 ;
  output \valid$4 ;
  output \valid$6 ;
  reg \valid$6  = 1'h0;
  assign \$9  = ~ kill;
  assign \$11  = valid & \$9 ;
  assign \$13  = ~ \stall$8 ;
  assign \$15  = ~ stall;
  assign \$18  = \$15  | \kill$17 ;
  assign \$20  = payload_branch_predict_taken & \valid$1 ;
  assign \$22  = 1'h0 | \$20 ;
  assign \$24  = ~ payload_branch_taken;
  assign \$26  = \payload_branch_predict_taken$2  & \$24 ;
  assign \$28  = \$26  & \valid$3 ;
  assign \$30  = \$22  | \$28 ;
  assign \$32  = ~ \payload_branch_predict_taken$2 ;
  assign \$34  = \$32  & payload_branch_taken;
  assign \$36  = \$34  & \valid$3 ;
  assign \$38  = \$30  | \$36 ;
  assign \$40  = 1'h0 | stall;
  always @(posedge clk)
      \valid$6  <= \$next\valid$6 ;
  always @* begin
    \$next\valid$4  = 1'h0;
    \$next\valid$4  = \$11 ;
  end
  always @* begin
    \$next\stall$5  = 1'h0;
    \$next\stall$5  = \stall$8 ;
  end
  always @* begin
    \$next\valid$6  = \valid$6 ;
    casez ({ \$18 , \$13  })
      2'bz1:
          \$next\valid$6  = \valid$4 ;
      2'b1z:
          \$next\valid$6  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$6  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$7  = 1'h0;
    \$next\kill$7  = \kill$17 ;
  end
  always @* begin
    \$next\kill$17  = 1'h0;
    \$next\kill$17  = \$38 ;
  end
  always @* begin
    \$next\stall$8  = 1'h0;
    \$next\stall$8  = \$40 ;
  end
  assign \stall$8  = \$next\stall$8 ;
  assign \kill$17  = \$next\kill$17 ;
  assign \kill$7  = \$next\kill$7 ;
  assign \stall$5  = \$next\stall$5 ;
  assign \valid$4  = \$next\valid$4 ;
endmodule

module gprf(rp2_addr, wp_en, wp_addr, wp_data, rst, clk, rp1_data, rp2_data, rp1_addr);
  reg [31:0] \$next$signal ;
  reg [31:0] \$next$signal$1 ;
  reg [31:0] \$next$signal$10 ;
  reg [31:0] \$next$signal$11 ;
  reg [31:0] \$next$signal$12 ;
  reg [31:0] \$next$signal$13 ;
  reg [31:0] \$next$signal$14 ;
  reg [31:0] \$next$signal$15 ;
  reg [31:0] \$next$signal$16 ;
  reg [31:0] \$next$signal$17 ;
  reg [31:0] \$next$signal$18 ;
  reg [31:0] \$next$signal$19 ;
  reg [31:0] \$next$signal$2 ;
  reg [31:0] \$next$signal$20 ;
  reg [31:0] \$next$signal$21 ;
  reg [31:0] \$next$signal$22 ;
  reg [31:0] \$next$signal$23 ;
  reg [31:0] \$next$signal$24 ;
  reg [31:0] \$next$signal$25 ;
  reg [31:0] \$next$signal$26 ;
  reg [31:0] \$next$signal$27 ;
  reg [31:0] \$next$signal$28 ;
  reg [31:0] \$next$signal$29 ;
  reg [31:0] \$next$signal$3 ;
  reg [31:0] \$next$signal$30 ;
  reg [31:0] \$next$signal$31 ;
  reg [31:0] \$next$signal$4 ;
  reg [31:0] \$next$signal$5 ;
  reg [31:0] \$next$signal$6 ;
  reg [31:0] \$next$signal$7 ;
  reg [31:0] \$next$signal$8 ;
  reg [31:0] \$next$signal$9 ;
  reg [31:0] \$next\rp1_data ;
  reg [31:0] \$next\rp2_data ;
  reg [31:0] \$signal  = 32'd0;
  reg [31:0] \$signal$1  = 32'd0;
  reg [31:0] \$signal$10  = 32'd0;
  reg [31:0] \$signal$11  = 32'd0;
  reg [31:0] \$signal$12  = 32'd0;
  reg [31:0] \$signal$13  = 32'd0;
  reg [31:0] \$signal$14  = 32'd0;
  reg [31:0] \$signal$15  = 32'd0;
  reg [31:0] \$signal$16  = 32'd0;
  reg [31:0] \$signal$17  = 32'd0;
  reg [31:0] \$signal$18  = 32'd0;
  reg [31:0] \$signal$19  = 32'd0;
  reg [31:0] \$signal$2  = 32'd0;
  reg [31:0] \$signal$20  = 32'd0;
  reg [31:0] \$signal$21  = 32'd0;
  reg [31:0] \$signal$22  = 32'd0;
  reg [31:0] \$signal$23  = 32'd0;
  reg [31:0] \$signal$24  = 32'd0;
  reg [31:0] \$signal$25  = 32'd0;
  reg [31:0] \$signal$26  = 32'd0;
  reg [31:0] \$signal$27  = 32'd0;
  reg [31:0] \$signal$28  = 32'd0;
  reg [31:0] \$signal$29  = 32'd0;
  reg [31:0] \$signal$3  = 32'd0;
  reg [31:0] \$signal$30  = 32'd0;
  reg [31:0] \$signal$31  = 32'd0;
  reg [31:0] \$signal$4  = 32'd0;
  reg [31:0] \$signal$5  = 32'd0;
  reg [31:0] \$signal$6  = 32'd0;
  reg [31:0] \$signal$7  = 32'd0;
  reg [31:0] \$signal$8  = 32'd0;
  reg [31:0] \$signal$9  = 32'd0;
  input clk;
  input [4:0] rp1_addr;
  output [31:0] rp1_data;
  input [4:0] rp2_addr;
  output [31:0] rp2_data;
  input rst;
  input [4:0] wp_addr;
  input [31:0] wp_data;
  input wp_en;
  always @(posedge clk)
      \$signal  <= \$next$signal ;
  always @(posedge clk)
      \$signal$1  <= \$next$signal$1 ;
  always @(posedge clk)
      \$signal$2  <= \$next$signal$2 ;
  always @(posedge clk)
      \$signal$3  <= \$next$signal$3 ;
  always @(posedge clk)
      \$signal$4  <= \$next$signal$4 ;
  always @(posedge clk)
      \$signal$5  <= \$next$signal$5 ;
  always @(posedge clk)
      \$signal$6  <= \$next$signal$6 ;
  always @(posedge clk)
      \$signal$7  <= \$next$signal$7 ;
  always @(posedge clk)
      \$signal$8  <= \$next$signal$8 ;
  always @(posedge clk)
      \$signal$9  <= \$next$signal$9 ;
  always @(posedge clk)
      \$signal$10  <= \$next$signal$10 ;
  always @(posedge clk)
      \$signal$11  <= \$next$signal$11 ;
  always @(posedge clk)
      \$signal$12  <= \$next$signal$12 ;
  always @(posedge clk)
      \$signal$13  <= \$next$signal$13 ;
  always @(posedge clk)
      \$signal$14  <= \$next$signal$14 ;
  always @(posedge clk)
      \$signal$15  <= \$next$signal$15 ;
  always @(posedge clk)
      \$signal$16  <= \$next$signal$16 ;
  always @(posedge clk)
      \$signal$17  <= \$next$signal$17 ;
  always @(posedge clk)
      \$signal$18  <= \$next$signal$18 ;
  always @(posedge clk)
      \$signal$19  <= \$next$signal$19 ;
  always @(posedge clk)
      \$signal$20  <= \$next$signal$20 ;
  always @(posedge clk)
      \$signal$21  <= \$next$signal$21 ;
  always @(posedge clk)
      \$signal$22  <= \$next$signal$22 ;
  always @(posedge clk)
      \$signal$23  <= \$next$signal$23 ;
  always @(posedge clk)
      \$signal$24  <= \$next$signal$24 ;
  always @(posedge clk)
      \$signal$25  <= \$next$signal$25 ;
  always @(posedge clk)
      \$signal$26  <= \$next$signal$26 ;
  always @(posedge clk)
      \$signal$27  <= \$next$signal$27 ;
  always @(posedge clk)
      \$signal$28  <= \$next$signal$28 ;
  always @(posedge clk)
      \$signal$29  <= \$next$signal$29 ;
  always @(posedge clk)
      \$signal$30  <= \$next$signal$30 ;
  always @(posedge clk)
      \$signal$31  <= \$next$signal$31 ;
  always @* begin
    \$next\rp1_data  = 32'd0;
    casez (rp1_addr)
      5'h00:
          \$next\rp1_data  = \$signal ;
      5'h01:
          \$next\rp1_data  = \$signal$1 ;
      5'h02:
          \$next\rp1_data  = \$signal$2 ;
      5'h03:
          \$next\rp1_data  = \$signal$3 ;
      5'h04:
          \$next\rp1_data  = \$signal$4 ;
      5'h05:
          \$next\rp1_data  = \$signal$5 ;
      5'h06:
          \$next\rp1_data  = \$signal$6 ;
      5'h07:
          \$next\rp1_data  = \$signal$7 ;
      5'h08:
          \$next\rp1_data  = \$signal$8 ;
      5'h09:
          \$next\rp1_data  = \$signal$9 ;
      5'h0a:
          \$next\rp1_data  = \$signal$10 ;
      5'h0b:
          \$next\rp1_data  = \$signal$11 ;
      5'h0c:
          \$next\rp1_data  = \$signal$12 ;
      5'h0d:
          \$next\rp1_data  = \$signal$13 ;
      5'h0e:
          \$next\rp1_data  = \$signal$14 ;
      5'h0f:
          \$next\rp1_data  = \$signal$15 ;
      5'h10:
          \$next\rp1_data  = \$signal$16 ;
      5'h11:
          \$next\rp1_data  = \$signal$17 ;
      5'h12:
          \$next\rp1_data  = \$signal$18 ;
      5'h13:
          \$next\rp1_data  = \$signal$19 ;
      5'h14:
          \$next\rp1_data  = \$signal$20 ;
      5'h15:
          \$next\rp1_data  = \$signal$21 ;
      5'h16:
          \$next\rp1_data  = \$signal$22 ;
      5'h17:
          \$next\rp1_data  = \$signal$23 ;
      5'h18:
          \$next\rp1_data  = \$signal$24 ;
      5'h19:
          \$next\rp1_data  = \$signal$25 ;
      5'h1a:
          \$next\rp1_data  = \$signal$26 ;
      5'h1b:
          \$next\rp1_data  = \$signal$27 ;
      5'h1c:
          \$next\rp1_data  = \$signal$28 ;
      5'h1d:
          \$next\rp1_data  = \$signal$29 ;
      5'h1e:
          \$next\rp1_data  = \$signal$30 ;
      5'hzz:
          \$next\rp1_data  = \$signal$31 ;
    endcase
  end
  always @* begin
    \$next\rp2_data  = 32'd0;
    casez (rp2_addr)
      5'h00:
          \$next\rp2_data  = \$signal ;
      5'h01:
          \$next\rp2_data  = \$signal$1 ;
      5'h02:
          \$next\rp2_data  = \$signal$2 ;
      5'h03:
          \$next\rp2_data  = \$signal$3 ;
      5'h04:
          \$next\rp2_data  = \$signal$4 ;
      5'h05:
          \$next\rp2_data  = \$signal$5 ;
      5'h06:
          \$next\rp2_data  = \$signal$6 ;
      5'h07:
          \$next\rp2_data  = \$signal$7 ;
      5'h08:
          \$next\rp2_data  = \$signal$8 ;
      5'h09:
          \$next\rp2_data  = \$signal$9 ;
      5'h0a:
          \$next\rp2_data  = \$signal$10 ;
      5'h0b:
          \$next\rp2_data  = \$signal$11 ;
      5'h0c:
          \$next\rp2_data  = \$signal$12 ;
      5'h0d:
          \$next\rp2_data  = \$signal$13 ;
      5'h0e:
          \$next\rp2_data  = \$signal$14 ;
      5'h0f:
          \$next\rp2_data  = \$signal$15 ;
      5'h10:
          \$next\rp2_data  = \$signal$16 ;
      5'h11:
          \$next\rp2_data  = \$signal$17 ;
      5'h12:
          \$next\rp2_data  = \$signal$18 ;
      5'h13:
          \$next\rp2_data  = \$signal$19 ;
      5'h14:
          \$next\rp2_data  = \$signal$20 ;
      5'h15:
          \$next\rp2_data  = \$signal$21 ;
      5'h16:
          \$next\rp2_data  = \$signal$22 ;
      5'h17:
          \$next\rp2_data  = \$signal$23 ;
      5'h18:
          \$next\rp2_data  = \$signal$24 ;
      5'h19:
          \$next\rp2_data  = \$signal$25 ;
      5'h1a:
          \$next\rp2_data  = \$signal$26 ;
      5'h1b:
          \$next\rp2_data  = \$signal$27 ;
      5'h1c:
          \$next\rp2_data  = \$signal$28 ;
      5'h1d:
          \$next\rp2_data  = \$signal$29 ;
      5'h1e:
          \$next\rp2_data  = \$signal$30 ;
      5'hzz:
          \$next\rp2_data  = \$signal$31 ;
    endcase
  end
  always @* begin
    \$next$signal  = \$signal ;
    \$next$signal$1  = \$signal$1 ;
    \$next$signal$2  = \$signal$2 ;
    \$next$signal$3  = \$signal$3 ;
    \$next$signal$4  = \$signal$4 ;
    \$next$signal$5  = \$signal$5 ;
    \$next$signal$6  = \$signal$6 ;
    \$next$signal$7  = \$signal$7 ;
    \$next$signal$8  = \$signal$8 ;
    \$next$signal$9  = \$signal$9 ;
    \$next$signal$10  = \$signal$10 ;
    \$next$signal$11  = \$signal$11 ;
    \$next$signal$12  = \$signal$12 ;
    \$next$signal$13  = \$signal$13 ;
    \$next$signal$14  = \$signal$14 ;
    \$next$signal$15  = \$signal$15 ;
    \$next$signal$16  = \$signal$16 ;
    \$next$signal$17  = \$signal$17 ;
    \$next$signal$18  = \$signal$18 ;
    \$next$signal$19  = \$signal$19 ;
    \$next$signal$20  = \$signal$20 ;
    \$next$signal$21  = \$signal$21 ;
    \$next$signal$22  = \$signal$22 ;
    \$next$signal$23  = \$signal$23 ;
    \$next$signal$24  = \$signal$24 ;
    \$next$signal$25  = \$signal$25 ;
    \$next$signal$26  = \$signal$26 ;
    \$next$signal$27  = \$signal$27 ;
    \$next$signal$28  = \$signal$28 ;
    \$next$signal$29  = \$signal$29 ;
    \$next$signal$30  = \$signal$30 ;
    \$next$signal$31  = \$signal$31 ;
    casez (wp_en)
      1'h1:
          casez (wp_addr)
            5'h00:
                \$next$signal  = wp_data;
            5'h01:
                \$next$signal$1  = wp_data;
            5'h02:
                \$next$signal$2  = wp_data;
            5'h03:
                \$next$signal$3  = wp_data;
            5'h04:
                \$next$signal$4  = wp_data;
            5'h05:
                \$next$signal$5  = wp_data;
            5'h06:
                \$next$signal$6  = wp_data;
            5'h07:
                \$next$signal$7  = wp_data;
            5'h08:
                \$next$signal$8  = wp_data;
            5'h09:
                \$next$signal$9  = wp_data;
            5'h0a:
                \$next$signal$10  = wp_data;
            5'h0b:
                \$next$signal$11  = wp_data;
            5'h0c:
                \$next$signal$12  = wp_data;
            5'h0d:
                \$next$signal$13  = wp_data;
            5'h0e:
                \$next$signal$14  = wp_data;
            5'h0f:
                \$next$signal$15  = wp_data;
            5'h10:
                \$next$signal$16  = wp_data;
            5'h11:
                \$next$signal$17  = wp_data;
            5'h12:
                \$next$signal$18  = wp_data;
            5'h13:
                \$next$signal$19  = wp_data;
            5'h14:
                \$next$signal$20  = wp_data;
            5'h15:
                \$next$signal$21  = wp_data;
            5'h16:
                \$next$signal$22  = wp_data;
            5'h17:
                \$next$signal$23  = wp_data;
            5'h18:
                \$next$signal$24  = wp_data;
            5'h19:
                \$next$signal$25  = wp_data;
            5'h1a:
                \$next$signal$26  = wp_data;
            5'h1b:
                \$next$signal$27  = wp_data;
            5'h1c:
                \$next$signal$28  = wp_data;
            5'h1d:
                \$next$signal$29  = wp_data;
            5'h1e:
                \$next$signal$30  = wp_data;
            5'hzz:
                \$next$signal$31  = wp_data;
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \$next$signal  = 32'd0;
          \$next$signal$1  = 32'd0;
          \$next$signal$2  = 32'd0;
          \$next$signal$3  = 32'd0;
          \$next$signal$4  = 32'd0;
          \$next$signal$5  = 32'd0;
          \$next$signal$6  = 32'd0;
          \$next$signal$7  = 32'd0;
          \$next$signal$8  = 32'd0;
          \$next$signal$9  = 32'd0;
          \$next$signal$10  = 32'd0;
          \$next$signal$11  = 32'd0;
          \$next$signal$12  = 32'd0;
          \$next$signal$13  = 32'd0;
          \$next$signal$14  = 32'd0;
          \$next$signal$15  = 32'd0;
          \$next$signal$16  = 32'd0;
          \$next$signal$17  = 32'd0;
          \$next$signal$18  = 32'd0;
          \$next$signal$19  = 32'd0;
          \$next$signal$20  = 32'd0;
          \$next$signal$21  = 32'd0;
          \$next$signal$22  = 32'd0;
          \$next$signal$23  = 32'd0;
          \$next$signal$24  = 32'd0;
          \$next$signal$25  = 32'd0;
          \$next$signal$26  = 32'd0;
          \$next$signal$27  = 32'd0;
          \$next$signal$28  = 32'd0;
          \$next$signal$29  = 32'd0;
          \$next$signal$30  = 32'd0;
          \$next$signal$31  = 32'd0;
        end
    endcase
  end
  assign rp2_data = \$next\rp2_data ;
  assign rp1_data = \$next\rp1_data ;
endmodule

module icache(s1_stall, s2_address, s2_re, flush, refill_ready, refill_address, s2_we, refill_valid, refill_data, last_refill, s2_stall, s2_sel, s2_dat_w, rst, clk, refill_request, s2_dat_r, stall_request, s1_address);
  wire \$1001 ;
  wire \$1003 ;
  wire \$1005 ;
  wire \$1007 ;
  wire [31:0] \$1009 ;
  wire \$101 ;
  wire \$1011 ;
  wire \$1013 ;
  wire \$1015 ;
  wire \$1017 ;
  wire \$1019 ;
  wire \$1021 ;
  wire \$1023 ;
  wire \$1025 ;
  wire \$1027 ;
  wire \$1029 ;
  wire \$103 ;
  wire \$1031 ;
  wire \$1033 ;
  wire \$1035 ;
  wire \$1037 ;
  wire \$1039 ;
  wire \$1041 ;
  wire \$1043 ;
  wire \$1045 ;
  wire \$1047 ;
  wire \$1049 ;
  wire \$105 ;
  wire \$1051 ;
  wire \$1053 ;
  wire \$1055 ;
  wire \$1057 ;
  wire \$1059 ;
  wire \$1061 ;
  wire \$1063 ;
  wire \$1065 ;
  wire \$1067 ;
  wire \$1069 ;
  wire \$107 ;
  wire \$1071 ;
  wire \$1073 ;
  wire [31:0] \$1075 ;
  wire \$1077 ;
  wire \$1079 ;
  wire \$1081 ;
  wire \$1083 ;
  wire \$1085 ;
  wire \$1087 ;
  wire \$1089 ;
  wire \$109 ;
  wire \$1091 ;
  wire \$1093 ;
  wire \$1095 ;
  wire \$1097 ;
  wire \$1099 ;
  wire \$11 ;
  wire \$1101 ;
  wire \$1103 ;
  wire \$1105 ;
  wire \$1107 ;
  wire \$1109 ;
  wire \$111 ;
  wire \$1111 ;
  wire \$1113 ;
  wire \$1115 ;
  wire \$1117 ;
  wire \$1119 ;
  wire \$1121 ;
  wire \$1123 ;
  wire \$1125 ;
  wire \$1127 ;
  wire \$1129 ;
  wire \$113 ;
  wire \$1131 ;
  wire \$1133 ;
  wire \$1135 ;
  wire \$1137 ;
  wire \$1139 ;
  wire [31:0] \$1141 ;
  wire \$1143 ;
  wire \$1145 ;
  wire \$1147 ;
  wire \$1149 ;
  wire \$115 ;
  wire \$1151 ;
  wire \$1153 ;
  wire \$1155 ;
  wire \$1157 ;
  wire \$1159 ;
  wire \$1161 ;
  wire \$1163 ;
  wire \$1165 ;
  wire \$1167 ;
  wire \$1169 ;
  wire \$117 ;
  wire \$1171 ;
  wire \$1173 ;
  wire \$1175 ;
  wire \$1177 ;
  wire \$1179 ;
  wire \$1181 ;
  wire \$1183 ;
  wire \$1185 ;
  wire \$1187 ;
  wire \$1189 ;
  wire \$119 ;
  wire \$1191 ;
  wire \$1193 ;
  wire \$1195 ;
  wire \$1197 ;
  wire \$1199 ;
  wire \$1201 ;
  wire \$1203 ;
  wire \$1205 ;
  wire [31:0] \$1207 ;
  wire \$1209 ;
  wire \$121 ;
  wire \$1211 ;
  wire \$1213 ;
  wire \$1215 ;
  wire \$1217 ;
  wire \$1219 ;
  wire \$122 ;
  wire \$1221 ;
  wire \$1223 ;
  wire \$1225 ;
  wire \$1227 ;
  wire \$1229 ;
  wire \$1231 ;
  wire \$1233 ;
  wire \$1235 ;
  wire \$1237 ;
  wire \$1239 ;
  wire \$124 ;
  wire \$1241 ;
  wire \$1243 ;
  wire \$1245 ;
  wire \$1247 ;
  wire \$1249 ;
  wire \$1251 ;
  wire \$1253 ;
  wire \$1255 ;
  wire \$1257 ;
  wire \$1259 ;
  wire \$1261 ;
  wire \$1263 ;
  wire \$1265 ;
  wire \$1267 ;
  wire \$1269 ;
  wire \$127 ;
  wire \$1271 ;
  wire [31:0] \$1273 ;
  wire \$1275 ;
  wire \$1277 ;
  wire [31:0] \$1279 ;
  wire [8:0] \$1280 ;
  wire [31:0] \$1283 ;
  wire [8:0] \$1284 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire [5:0] \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire [5:0] \$22 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$24 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$251 ;
  wire \$253 ;
  wire \$255 ;
  wire \$257 ;
  wire \$259 ;
  wire \$261 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$27 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$279 ;
  wire \$281 ;
  wire [31:0] \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$289 ;
  wire \$29 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$3 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$31 ;
  wire \$311 ;
  wire \$313 ;
  wire \$315 ;
  wire \$317 ;
  wire \$319 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$327 ;
  wire \$329 ;
  wire \$33 ;
  wire \$331 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire [31:0] \$349 ;
  wire \$35 ;
  wire \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire \$359 ;
  wire \$361 ;
  wire \$363 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$37 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$377 ;
  wire \$379 ;
  wire \$381 ;
  wire \$383 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$39 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$407 ;
  wire \$409 ;
  wire \$41 ;
  wire \$411 ;
  wire \$413 ;
  wire [31:0] \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$421 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$43 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire \$45 ;
  wire \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire \$469 ;
  wire \$47 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire \$479 ;
  wire [31:0] \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire \$487 ;
  wire \$489 ;
  wire \$49 ;
  wire \$491 ;
  wire \$493 ;
  wire \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$5 ;
  wire \$501 ;
  wire \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$51 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire \$529 ;
  wire \$53 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$54 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire [31:0] \$547 ;
  wire \$549 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$56 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$571 ;
  wire \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire \$59 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire \$601 ;
  wire \$603 ;
  wire \$605 ;
  wire \$607 ;
  wire \$609 ;
  wire \$611 ;
  wire [31:0] \$613 ;
  wire \$615 ;
  wire \$617 ;
  wire \$619 ;
  wire \$62 ;
  wire \$621 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$629 ;
  wire \$631 ;
  wire \$633 ;
  wire \$635 ;
  wire \$637 ;
  wire \$639 ;
  wire \$641 ;
  wire \$643 ;
  wire \$645 ;
  wire \$647 ;
  wire \$649 ;
  wire \$65 ;
  wire \$651 ;
  wire \$653 ;
  wire \$655 ;
  wire \$657 ;
  wire \$659 ;
  wire \$661 ;
  wire \$663 ;
  wire \$665 ;
  wire \$667 ;
  wire \$669 ;
  wire \$671 ;
  wire \$673 ;
  wire \$675 ;
  wire \$677 ;
  wire [31:0] \$679 ;
  wire \$68 ;
  wire \$681 ;
  wire \$683 ;
  wire \$685 ;
  wire \$687 ;
  wire \$689 ;
  wire \$691 ;
  wire \$693 ;
  wire \$695 ;
  wire \$697 ;
  wire \$699 ;
  wire \$7 ;
  wire \$701 ;
  wire \$703 ;
  wire \$705 ;
  wire \$707 ;
  wire \$709 ;
  wire \$71 ;
  wire \$711 ;
  wire \$713 ;
  wire \$715 ;
  wire \$717 ;
  wire \$719 ;
  wire \$721 ;
  wire \$723 ;
  wire \$725 ;
  wire \$727 ;
  wire \$729 ;
  wire \$731 ;
  wire \$733 ;
  wire \$735 ;
  wire \$737 ;
  wire \$739 ;
  wire \$74 ;
  wire \$741 ;
  wire \$743 ;
  wire [31:0] \$745 ;
  wire \$747 ;
  wire \$749 ;
  wire \$751 ;
  wire \$753 ;
  wire \$755 ;
  wire \$757 ;
  wire \$759 ;
  wire \$761 ;
  wire \$763 ;
  wire \$765 ;
  wire \$767 ;
  wire \$769 ;
  wire \$77 ;
  wire \$771 ;
  wire \$773 ;
  wire \$775 ;
  wire \$777 ;
  wire \$779 ;
  wire \$781 ;
  wire \$783 ;
  wire \$785 ;
  wire \$787 ;
  wire \$789 ;
  wire \$79 ;
  wire \$791 ;
  wire \$793 ;
  wire \$795 ;
  wire \$797 ;
  wire \$799 ;
  wire \$801 ;
  wire \$803 ;
  wire \$805 ;
  wire \$807 ;
  wire \$809 ;
  wire \$81 ;
  wire [31:0] \$811 ;
  wire \$813 ;
  wire \$815 ;
  wire \$817 ;
  wire \$819 ;
  wire \$821 ;
  wire \$823 ;
  wire \$825 ;
  wire \$827 ;
  wire \$829 ;
  wire \$83 ;
  wire \$831 ;
  wire \$833 ;
  wire \$835 ;
  wire \$837 ;
  wire \$839 ;
  wire \$841 ;
  wire \$843 ;
  wire \$845 ;
  wire \$847 ;
  wire \$849 ;
  wire \$85 ;
  wire \$851 ;
  wire \$853 ;
  wire \$855 ;
  wire \$857 ;
  wire \$859 ;
  wire \$861 ;
  wire \$863 ;
  wire \$865 ;
  wire \$867 ;
  wire \$869 ;
  wire \$87 ;
  wire \$871 ;
  wire \$873 ;
  wire \$875 ;
  wire [31:0] \$877 ;
  wire \$879 ;
  wire \$881 ;
  wire \$883 ;
  wire \$885 ;
  wire \$887 ;
  wire \$889 ;
  wire \$89 ;
  wire \$891 ;
  wire \$893 ;
  wire \$895 ;
  wire \$897 ;
  wire \$899 ;
  wire \$9 ;
  wire \$901 ;
  wire \$903 ;
  wire \$905 ;
  wire \$907 ;
  wire \$909 ;
  wire \$91 ;
  wire \$911 ;
  wire \$913 ;
  wire \$915 ;
  wire \$917 ;
  wire \$919 ;
  wire \$921 ;
  wire \$923 ;
  wire \$925 ;
  wire \$927 ;
  wire \$929 ;
  wire \$93 ;
  wire \$931 ;
  wire \$933 ;
  wire \$935 ;
  wire \$937 ;
  wire \$939 ;
  wire \$941 ;
  wire [31:0] \$943 ;
  wire \$945 ;
  wire \$947 ;
  wire \$949 ;
  wire \$95 ;
  wire \$951 ;
  wire \$953 ;
  wire \$955 ;
  wire \$957 ;
  wire \$959 ;
  wire \$961 ;
  wire \$963 ;
  wire \$965 ;
  wire \$967 ;
  wire \$969 ;
  wire \$97 ;
  wire \$971 ;
  wire \$973 ;
  wire \$975 ;
  wire \$977 ;
  wire \$979 ;
  wire \$981 ;
  wire \$983 ;
  wire \$985 ;
  wire \$987 ;
  wire \$989 ;
  wire \$99 ;
  wire \$991 ;
  wire \$993 ;
  wire \$995 ;
  wire \$997 ;
  wire \$999 ;
  reg \$next$signal ;
  reg \$next$signal$57 ;
  reg \$next$signal$60 ;
  reg \$next$signal$63 ;
  reg \$next$signal$66 ;
  reg \$next$signal$69 ;
  reg \$next$signal$72 ;
  reg \$next$signal$75 ;
  reg [31:0] \$next\data ;
  reg [31:0] \$next\data_din ;
  reg [4:0] \$next\data_rp_data_mem_r_addr ;
  reg [4:0] \$next\data_wp_data_mem_w_addr ;
  reg [255:0] \$next\data_wp_data_mem_w_data ;
  reg [7:0] \$next\data_wp_data_mem_w_en ;
  reg \$next\enable ;
  reg [4:0] \$next\flush_line ;
  reg \$next\flush_stall ;
  reg \$next\flushing ;
  reg [1:0] \$next\fsm_state ;
  reg [255:0] \$next\latch_data_rp_data ;
  reg [4:0] \$next\latch_s1_line ;
  reg [4:0] \$next\latch_s1_line_no_stall ;
  reg [31:0] \$next\latch_s2_dat_r ;
  reg \$next\latch_s2_stall ;
  reg \$next\latch_stall_request ;
  reg [21:0] \$next\latch_tag_rp_data ;
  reg \$next\miss ;
  reg \$next\refill_lru ;
  reg \$next\refill_request ;
  reg \$next\refill_stall ;
  reg \$next\refilling ;
  reg \$next\restore_s2 ;
  reg [31:0] \$next\s2_dat_r ;
  reg [31:0] \$next\s2_dat_r$26 ;
  reg \$next\stall_request ;
  reg \$next\tag_din_valid ;
  reg [20:0] \$next\tag_din_value ;
  reg [4:0] \$next\tag_rp_tag_mem_r_addr ;
  reg \$next\tag_valid ;
  reg [20:0] \$next\tag_value ;
  reg [4:0] \$next\tag_wp_tag_mem_w_addr ;
  reg [21:0] \$next\tag_wp_tag_mem_w_data ;
  reg \$next\tag_wp_tag_mem_w_en ;
  reg \$next\way_sel_i ;
  reg \$signal  = 1'h0;
  reg \$signal$57  = 1'h0;
  reg \$signal$60  = 1'h0;
  reg \$signal$63  = 1'h0;
  reg \$signal$66  = 1'h0;
  reg \$signal$69  = 1'h0;
  reg \$signal$72  = 1'h0;
  reg \$signal$75  = 1'h0;
  reg \$verilog_initial_trigger  = 1'h0;
  input clk;
  wire [31:0] data;
  wire [31:0] data_din;
  wire [4:0] data_rp_data_mem_r_addr;
  wire [255:0] data_rp_data_mem_r_data;
  wire [4:0] data_wp_data_mem_w_addr;
  wire [255:0] data_wp_data_mem_w_data;
  wire [7:0] data_wp_data_mem_w_en;
  wire enable;
  input flush;
  reg [4:0] flush_line = 5'h1f;
  wire flush_stall;
  wire flushing;
  reg [1:0] fsm_state = 2'h0;
  input last_refill;
  reg [255:0] latch_data_rp_data = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  reg [4:0] latch_s1_line = 5'h00;
  reg [4:0] latch_s1_line_no_stall = 5'h00;
  reg [31:0] latch_s2_dat_r = 32'd0;
  reg latch_s2_stall = 1'h0;
  reg latch_stall_request = 1'h0;
  reg [21:0] latch_tag_rp_data = 22'h000000;
  wire miss;
  input [29:0] refill_address;
  input [31:0] refill_data;
  wire refill_lru;
  input refill_ready;
  output refill_request;
  wire refill_stall;
  input refill_valid;
  wire refilling;
  reg restore_s2 = 1'h0;
  input rst;
  input [29:0] s1_address;
  input s1_stall;
  input [29:0] s2_address;
  output [31:0] s2_dat_r;
  wire [31:0] \s2_dat_r$26 ;
  input [31:0] s2_dat_w;
  input s2_re;
  input [3:0] s2_sel;
  input s2_stall;
  input s2_we;
  output stall_request;
  wire tag_din_valid;
  wire [20:0] tag_din_value;
  wire [4:0] tag_rp_tag_mem_r_addr;
  wire [21:0] tag_rp_tag_mem_r_data;
  wire tag_valid;
  wire [20:0] tag_value;
  wire [4:0] tag_wp_tag_mem_w_addr;
  wire [21:0] tag_wp_tag_mem_w_data;
  wire tag_wp_tag_mem_w_en;
  wire way_sel_i;
  wire way_sel_n;
  wire way_sel_o;
  assign \$9  = tag_value == s2_address[28:8];
  assign \$99  = ~ stall_request;
  assign \$999  = s2_address[2:0] == 2'h3;
  assign \$1001  = s2_address[2:0] == 2'h3;
  assign \$1003  = s2_address[2:0] == 2'h3;
  assign \$1005  = s2_address[2:0] == 2'h3;
  assign \$1007  = s2_address[2:0] == 2'h3;
  assign \$1009  = { \$945 , \$947 , \$949 , \$951 , \$953 , \$955 , \$957 , \$959 , \$961 , \$963 , \$965 , \$967 , \$969 , \$971 , \$973 , \$975 , \$977 , \$979 , \$981 , \$983 , \$985 , \$987 , \$989 , \$991 , \$993 , \$995 , \$997 , \$999 , \$1001 , \$1003 , \$1005 , \$1007  } & data_din;
  assign \$1011  = s2_address[2:0] == 3'h4;
  assign \$1013  = s2_address[2:0] == 3'h4;
  assign \$1015  = s2_address[2:0] == 3'h4;
  assign \$1017  = s2_address[2:0] == 3'h4;
  assign \$101  = \$99  | refilling;
  assign \$1019  = s2_address[2:0] == 3'h4;
  assign \$1021  = s2_address[2:0] == 3'h4;
  assign \$1023  = s2_address[2:0] == 3'h4;
  assign \$1025  = s2_address[2:0] == 3'h4;
  assign \$1027  = s2_address[2:0] == 3'h4;
  assign \$1029  = s2_address[2:0] == 3'h4;
  assign \$1031  = s2_address[2:0] == 3'h4;
  assign \$1033  = s2_address[2:0] == 3'h4;
  assign \$1035  = s2_address[2:0] == 3'h4;
  assign \$1037  = s2_address[2:0] == 3'h4;
  assign \$103  = ~ latch_s2_stall;
  assign \$1039  = s2_address[2:0] == 3'h4;
  assign \$1041  = s2_address[2:0] == 3'h4;
  assign \$1043  = s2_address[2:0] == 3'h4;
  assign \$1045  = s2_address[2:0] == 3'h4;
  assign \$1047  = s2_address[2:0] == 3'h4;
  assign \$1049  = s2_address[2:0] == 3'h4;
  assign \$1051  = s2_address[2:0] == 3'h4;
  assign \$1053  = s2_address[2:0] == 3'h4;
  assign \$1055  = s2_address[2:0] == 3'h4;
  assign \$1057  = s2_address[2:0] == 3'h4;
  assign \$105  = \$103  & s2_stall;
  assign \$1059  = s2_address[2:0] == 3'h4;
  assign \$1061  = s2_address[2:0] == 3'h4;
  assign \$1063  = s2_address[2:0] == 3'h4;
  assign \$1065  = s2_address[2:0] == 3'h4;
  assign \$1067  = s2_address[2:0] == 3'h4;
  assign \$1069  = s2_address[2:0] == 3'h4;
  assign \$1071  = s2_address[2:0] == 3'h4;
  assign \$1073  = s2_address[2:0] == 3'h4;
  assign \$1075  = { \$1011 , \$1013 , \$1015 , \$1017 , \$1019 , \$1021 , \$1023 , \$1025 , \$1027 , \$1029 , \$1031 , \$1033 , \$1035 , \$1037 , \$1039 , \$1041 , \$1043 , \$1045 , \$1047 , \$1049 , \$1051 , \$1053 , \$1055 , \$1057 , \$1059 , \$1061 , \$1063 , \$1065 , \$1067 , \$1069 , \$1071 , \$1073  } & data_din;
  assign \$1077  = s2_address[2:0] == 3'h5;
  assign \$107  = latch_stall_request & refill_request;
  assign \$1079  = s2_address[2:0] == 3'h5;
  assign \$1081  = s2_address[2:0] == 3'h5;
  assign \$1083  = s2_address[2:0] == 3'h5;
  assign \$1085  = s2_address[2:0] == 3'h5;
  assign \$1087  = s2_address[2:0] == 3'h5;
  assign \$1089  = s2_address[2:0] == 3'h5;
  assign \$1091  = s2_address[2:0] == 3'h5;
  assign \$1093  = s2_address[2:0] == 3'h5;
  assign \$1095  = s2_address[2:0] == 3'h5;
  assign \$1097  = s2_address[2:0] == 3'h5;
  assign \$109  = \$105  | \$107 ;
  assign \$1099  = s2_address[2:0] == 3'h5;
  assign \$1101  = s2_address[2:0] == 3'h5;
  assign \$1103  = s2_address[2:0] == 3'h5;
  assign \$1105  = s2_address[2:0] == 3'h5;
  assign \$1107  = s2_address[2:0] == 3'h5;
  assign \$1109  = s2_address[2:0] == 3'h5;
  assign \$1111  = s2_address[2:0] == 3'h5;
  assign \$1113  = s2_address[2:0] == 3'h5;
  assign \$1115  = s2_address[2:0] == 3'h5;
  assign \$1117  = s2_address[2:0] == 3'h5;
  assign \$111  = ~ stall_request;
  assign \$1119  = s2_address[2:0] == 3'h5;
  assign \$1121  = s2_address[2:0] == 3'h5;
  assign \$1123  = s2_address[2:0] == 3'h5;
  assign \$1125  = s2_address[2:0] == 3'h5;
  assign \$1127  = s2_address[2:0] == 3'h5;
  assign \$1129  = s2_address[2:0] == 3'h5;
  assign \$1131  = s2_address[2:0] == 3'h5;
  assign \$1133  = s2_address[2:0] == 3'h5;
  assign \$1135  = s2_address[2:0] == 3'h5;
  assign \$1137  = s2_address[2:0] == 3'h5;
  assign \$113  = latch_stall_request & \$111 ;
  assign \$1139  = s2_address[2:0] == 3'h5;
  assign \$1141  = { \$1077 , \$1079 , \$1081 , \$1083 , \$1085 , \$1087 , \$1089 , \$1091 , \$1093 , \$1095 , \$1097 , \$1099 , \$1101 , \$1103 , \$1105 , \$1107 , \$1109 , \$1111 , \$1113 , \$1115 , \$1117 , \$1119 , \$1121 , \$1123 , \$1125 , \$1127 , \$1129 , \$1131 , \$1133 , \$1135 , \$1137 , \$1139  } & data_din;
  assign \$1143  = s2_address[2:0] == 3'h6;
  assign \$1145  = s2_address[2:0] == 3'h6;
  assign \$1147  = s2_address[2:0] == 3'h6;
  assign \$1149  = s2_address[2:0] == 3'h6;
  assign \$1151  = s2_address[2:0] == 3'h6;
  assign \$1153  = s2_address[2:0] == 3'h6;
  assign \$1155  = s2_address[2:0] == 3'h6;
  assign \$1157  = s2_address[2:0] == 3'h6;
  assign \$115  = \$113  & s2_stall;
  assign \$1159  = s2_address[2:0] == 3'h6;
  assign \$1161  = s2_address[2:0] == 3'h6;
  assign \$1163  = s2_address[2:0] == 3'h6;
  assign \$1165  = s2_address[2:0] == 3'h6;
  assign \$1167  = s2_address[2:0] == 3'h6;
  assign \$1169  = s2_address[2:0] == 3'h6;
  assign \$1171  = s2_address[2:0] == 3'h6;
  assign \$1173  = s2_address[2:0] == 3'h6;
  assign \$1175  = s2_address[2:0] == 3'h6;
  assign \$1177  = s2_address[2:0] == 3'h6;
  assign \$117  = \$109  | \$115 ;
  assign \$1179  = s2_address[2:0] == 3'h6;
  assign \$1181  = s2_address[2:0] == 3'h6;
  assign \$1183  = s2_address[2:0] == 3'h6;
  assign \$1185  = s2_address[2:0] == 3'h6;
  assign \$1187  = s2_address[2:0] == 3'h6;
  assign \$1189  = s2_address[2:0] == 3'h6;
  assign \$1191  = s2_address[2:0] == 3'h6;
  assign \$1193  = s2_address[2:0] == 3'h6;
  assign \$1195  = s2_address[2:0] == 3'h6;
  assign \$1197  = s2_address[2:0] == 3'h6;
  assign \$11  = \$7  & \$9 ;
  assign \$119  = latch_s2_stall & restore_s2;
  assign \$1199  = s2_address[2:0] == 3'h6;
  assign \$1201  = s2_address[2:0] == 3'h6;
  assign \$1203  = s2_address[2:0] == 3'h6;
  assign \$1205  = s2_address[2:0] == 3'h6;
  assign \$1207  = { \$1143 , \$1145 , \$1147 , \$1149 , \$1151 , \$1153 , \$1155 , \$1157 , \$1159 , \$1161 , \$1163 , \$1165 , \$1167 , \$1169 , \$1171 , \$1173 , \$1175 , \$1177 , \$1179 , \$1181 , \$1183 , \$1185 , \$1187 , \$1189 , \$1191 , \$1193 , \$1195 , \$1197 , \$1199 , \$1201 , \$1203 , \$1205  } & data_din;
  assign \$1209  = s2_address[2:0] == 3'h7;
  assign \$1211  = s2_address[2:0] == 3'h7;
  assign \$1213  = s2_address[2:0] == 3'h7;
  assign \$1215  = s2_address[2:0] == 3'h7;
  assign \$1217  = s2_address[2:0] == 3'h7;
  assign \$1219  = s2_address[2:0] == 3'h7;
  assign \$1221  = s2_address[2:0] == 3'h7;
  assign \$1223  = s2_address[2:0] == 3'h7;
  assign \$1225  = s2_address[2:0] == 3'h7;
  assign \$1227  = s2_address[2:0] == 3'h7;
  assign \$122  = refill_address == s2_address;
  assign \$1229  = s2_address[2:0] == 3'h7;
  assign \$1231  = s2_address[2:0] == 3'h7;
  assign \$1233  = s2_address[2:0] == 3'h7;
  assign \$1235  = s2_address[2:0] == 3'h7;
  assign \$1237  = s2_address[2:0] == 3'h7;
  assign \$1239  = s2_address[2:0] == 3'h7;
  assign \$1241  = s2_address[2:0] == 3'h7;
  assign \$1243  = s2_address[2:0] == 3'h7;
  assign \$1245  = s2_address[2:0] == 3'h7;
  assign \$1247  = s2_address[2:0] == 3'h7;
  assign \$124  = refilling & \$122 ;
  assign \$1249  = s2_address[2:0] == 3'h7;
  assign \$1251  = s2_address[2:0] == 3'h7;
  assign \$1253  = s2_address[2:0] == 3'h7;
  assign \$1255  = s2_address[2:0] == 3'h7;
  assign \$1257  = s2_address[2:0] == 3'h7;
  assign \$121  = ~ \$124 ;
  assign \$1259  = s2_address[2:0] == 3'h7;
  assign \$1261  = s2_address[2:0] == 3'h7;
  assign \$1263  = s2_address[2:0] == 3'h7;
  assign \$1265  = s2_address[2:0] == 3'h7;
  assign \$1267  = s2_address[2:0] == 3'h7;
  assign \$1269  = s2_address[2:0] == 3'h7;
  assign \$1271  = s2_address[2:0] == 3'h7;
  assign \$1273  = { \$1209 , \$1211 , \$1213 , \$1215 , \$1217 , \$1219 , \$1221 , \$1223 , \$1225 , \$1227 , \$1229 , \$1231 , \$1233 , \$1235 , \$1237 , \$1239 , \$1241 , \$1243 , \$1245 , \$1247 , \$1249 , \$1251 , \$1253 , \$1255 , \$1257 , \$1259 , \$1261 , \$1263 , \$1265 , \$1267 , \$1269 , \$1271  } & data_din;
  assign \$1275  = latch_s1_line == s2_address[7:3];
  assign \$1277  = latch_s1_line == s2_address[7:3];
  assign \$127  = \$119  & \$121 ;
  assign \$1280  = s2_address[2:0] * 6'h20;
  assign \$1279  = data_rp_data_mem_r_data >> \$1280 ;
  assign \$1284  = s2_address[2:0] * 6'h20;
  assign \$1283  = latch_data_rp_data >> \$1284 ;
  assign \$129  = last_refill & refill_valid;
  assign \$131  = way_sel_i >> refill_lru;
  assign \$133  = enable & s2_we;
  assign \$135  = latch_s1_line == s2_address[7:3];
  assign \$137  = latch_s1_line == s2_address[7:3];
  assign \$13  = \$11  & tag_valid;
  assign \$139  = refill_address[2:0] == 1'h0;
  assign \$141  = \$139  & enable;
  assign \$143  = refill_address[2:0] == 1'h1;
  assign \$145  = \$143  & enable;
  assign \$147  = refill_address[2:0] == 2'h2;
  assign \$149  = \$147  & enable;
  assign \$151  = refill_address[2:0] == 2'h3;
  assign \$153  = \$151  & enable;
  assign \$155  = refill_address[2:0] == 3'h4;
  assign \$157  = \$155  & enable;
  assign \$15  = s2_re & way_sel_n;
  assign \$159  = refill_address[2:0] == 3'h5;
  assign \$161  = \$159  & enable;
  assign \$163  = refill_address[2:0] == 3'h6;
  assign \$165  = \$163  & enable;
  assign \$167  = refill_address[2:0] == 3'h7;
  assign \$169  = \$167  & enable;
  assign \$171  = s2_address[2:0] == 1'h0;
  assign \$173  = enable & s2_we;
  assign \$175  = \$171  & \$173 ;
  assign \$177  = s2_address[2:0] == 1'h1;
  assign \$17  = fsm_state == 1'h0;
  assign \$179  = enable & s2_we;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = s2_address[2:0] == 2'h2;
  assign \$185  = enable & s2_we;
  assign \$187  = \$183  & \$185 ;
  assign \$189  = s2_address[2:0] == 2'h3;
  assign \$191  = enable & s2_we;
  assign \$193  = \$189  & \$191 ;
  assign \$195  = s2_address[2:0] == 3'h4;
  assign \$197  = enable & s2_we;
  assign \$19  = fsm_state == 2'h2;
  assign \$199  = \$195  & \$197 ;
  assign \$201  = s2_address[2:0] == 3'h5;
  assign \$203  = enable & s2_we;
  assign \$205  = \$201  & \$203 ;
  assign \$207  = s2_address[2:0] == 3'h6;
  assign \$209  = enable & s2_we;
  assign \$211  = \$207  & \$209 ;
  assign \$213  = s2_address[2:0] == 3'h7;
  assign \$215  = enable & s2_we;
  assign \$217  = \$213  & \$215 ;
  assign \$219  = refill_address[2:0] == 1'h0;
  assign \$221  = refill_address[2:0] == 1'h0;
  assign \$223  = refill_address[2:0] == 1'h0;
  assign \$225  = refill_address[2:0] == 1'h0;
  assign \$227  = refill_address[2:0] == 1'h0;
  assign \$22  = flush_line - 1'h1;
  assign \$229  = refill_address[2:0] == 1'h0;
  assign \$231  = refill_address[2:0] == 1'h0;
  assign \$233  = refill_address[2:0] == 1'h0;
  assign \$235  = refill_address[2:0] == 1'h0;
  assign \$237  = refill_address[2:0] == 1'h0;
  assign \$239  = refill_address[2:0] == 1'h0;
  assign \$241  = refill_address[2:0] == 1'h0;
  assign \$243  = refill_address[2:0] == 1'h0;
  assign \$245  = refill_address[2:0] == 1'h0;
  assign \$247  = refill_address[2:0] == 1'h0;
  assign \$24  = flush_line == 1'h0;
  assign \$249  = refill_address[2:0] == 1'h0;
  assign \$251  = refill_address[2:0] == 1'h0;
  assign \$253  = refill_address[2:0] == 1'h0;
  assign \$255  = refill_address[2:0] == 1'h0;
  assign \$257  = refill_address[2:0] == 1'h0;
  assign \$259  = refill_address[2:0] == 1'h0;
  assign \$261  = refill_address[2:0] == 1'h0;
  assign \$263  = refill_address[2:0] == 1'h0;
  assign \$265  = refill_address[2:0] == 1'h0;
  assign \$267  = refill_address[2:0] == 1'h0;
  assign \$269  = refill_address[2:0] == 1'h0;
  assign \$271  = refill_address[2:0] == 1'h0;
  assign \$273  = refill_address[2:0] == 1'h0;
  assign \$275  = refill_address[2:0] == 1'h0;
  assign \$277  = refill_address[2:0] == 1'h0;
  assign \$27  = refill_address[28:8] == s2_address[28:8];
  assign \$279  = refill_address[2:0] == 1'h0;
  assign \$281  = refill_address[2:0] == 1'h0;
  assign \$283  = { \$219 , \$221 , \$223 , \$225 , \$227 , \$229 , \$231 , \$233 , \$235 , \$237 , \$239 , \$241 , \$243 , \$245 , \$247 , \$249 , \$251 , \$253 , \$255 , \$257 , \$259 , \$261 , \$263 , \$265 , \$267 , \$269 , \$271 , \$273 , \$275 , \$277 , \$279 , \$281  } & refill_data;
  assign \$285  = refill_address[2:0] == 1'h1;
  assign \$287  = refill_address[2:0] == 1'h1;
  assign \$289  = refill_address[2:0] == 1'h1;
  assign \$291  = refill_address[2:0] == 1'h1;
  assign \$293  = refill_address[2:0] == 1'h1;
  assign \$295  = refill_address[2:0] == 1'h1;
  assign \$297  = refill_address[2:0] == 1'h1;
  assign \$29  = refill_address[7:3] == s2_address[7:3];
  assign \$299  = refill_address[2:0] == 1'h1;
  assign \$301  = refill_address[2:0] == 1'h1;
  assign \$303  = refill_address[2:0] == 1'h1;
  assign \$305  = refill_address[2:0] == 1'h1;
  assign \$307  = refill_address[2:0] == 1'h1;
  assign \$309  = refill_address[2:0] == 1'h1;
  assign \$311  = refill_address[2:0] == 1'h1;
  assign \$313  = refill_address[2:0] == 1'h1;
  assign \$315  = refill_address[2:0] == 1'h1;
  assign \$317  = refill_address[2:0] == 1'h1;
  assign \$31  = \$27  & \$29 ;
  assign \$319  = refill_address[2:0] == 1'h1;
  assign \$321  = refill_address[2:0] == 1'h1;
  assign \$323  = refill_address[2:0] == 1'h1;
  assign \$325  = refill_address[2:0] == 1'h1;
  assign \$327  = refill_address[2:0] == 1'h1;
  assign \$329  = refill_address[2:0] == 1'h1;
  assign \$331  = refill_address[2:0] == 1'h1;
  assign \$333  = refill_address[2:0] == 1'h1;
  assign \$335  = refill_address[2:0] == 1'h1;
  assign \$337  = refill_address[2:0] == 1'h1;
  assign \$33  = ~ s2_we;
  assign \$339  = refill_address[2:0] == 1'h1;
  assign \$341  = refill_address[2:0] == 1'h1;
  assign \$343  = refill_address[2:0] == 1'h1;
  assign \$345  = refill_address[2:0] == 1'h1;
  assign \$347  = refill_address[2:0] == 1'h1;
  assign \$349  = { \$285 , \$287 , \$289 , \$291 , \$293 , \$295 , \$297 , \$299 , \$301 , \$303 , \$305 , \$307 , \$309 , \$311 , \$313 , \$315 , \$317 , \$319 , \$321 , \$323 , \$325 , \$327 , \$329 , \$331 , \$333 , \$335 , \$337 , \$339 , \$341 , \$343 , \$345 , \$347  } & refill_data;
  assign \$351  = refill_address[2:0] == 2'h2;
  assign \$353  = refill_address[2:0] == 2'h2;
  assign \$355  = refill_address[2:0] == 2'h2;
  assign \$357  = refill_address[2:0] == 2'h2;
  assign \$35  = \$31  & \$33 ;
  assign \$359  = refill_address[2:0] == 2'h2;
  assign \$361  = refill_address[2:0] == 2'h2;
  assign \$363  = refill_address[2:0] == 2'h2;
  assign \$365  = refill_address[2:0] == 2'h2;
  assign \$367  = refill_address[2:0] == 2'h2;
  assign \$369  = refill_address[2:0] == 2'h2;
  assign \$371  = refill_address[2:0] == 2'h2;
  assign \$373  = refill_address[2:0] == 2'h2;
  assign \$375  = refill_address[2:0] == 2'h2;
  assign \$377  = refill_address[2:0] == 2'h2;
  assign \$37  = refill_address[2:0] == s2_address[2:0];
  assign \$379  = refill_address[2:0] == 2'h2;
  assign \$381  = refill_address[2:0] == 2'h2;
  assign \$383  = refill_address[2:0] == 2'h2;
  assign \$385  = refill_address[2:0] == 2'h2;
  assign \$387  = refill_address[2:0] == 2'h2;
  assign \$389  = refill_address[2:0] == 2'h2;
  assign \$391  = refill_address[2:0] == 2'h2;
  assign \$393  = refill_address[2:0] == 2'h2;
  assign \$395  = refill_address[2:0] == 2'h2;
  assign \$397  = refill_address[2:0] == 2'h2;
  assign \$3  = flush_stall | refill_stall;
  assign \$39  = refill_address[28:8] == s2_address[28:8];
  assign \$399  = refill_address[2:0] == 2'h2;
  assign \$401  = refill_address[2:0] == 2'h2;
  assign \$403  = refill_address[2:0] == 2'h2;
  assign \$405  = refill_address[2:0] == 2'h2;
  assign \$407  = refill_address[2:0] == 2'h2;
  assign \$409  = refill_address[2:0] == 2'h2;
  assign \$411  = refill_address[2:0] == 2'h2;
  assign \$413  = refill_address[2:0] == 2'h2;
  assign \$415  = { \$351 , \$353 , \$355 , \$357 , \$359 , \$361 , \$363 , \$365 , \$367 , \$369 , \$371 , \$373 , \$375 , \$377 , \$379 , \$381 , \$383 , \$385 , \$387 , \$389 , \$391 , \$393 , \$395 , \$397 , \$399 , \$401 , \$403 , \$405 , \$407 , \$409 , \$411 , \$413  } & refill_data;
  assign \$417  = refill_address[2:0] == 2'h3;
  assign \$41  = refill_address[7:3] == s2_address[7:3];
  assign \$419  = refill_address[2:0] == 2'h3;
  assign \$421  = refill_address[2:0] == 2'h3;
  assign \$423  = refill_address[2:0] == 2'h3;
  assign \$425  = refill_address[2:0] == 2'h3;
  assign \$427  = refill_address[2:0] == 2'h3;
  assign \$429  = refill_address[2:0] == 2'h3;
  assign \$431  = refill_address[2:0] == 2'h3;
  assign \$433  = refill_address[2:0] == 2'h3;
  assign \$435  = refill_address[2:0] == 2'h3;
  assign \$437  = refill_address[2:0] == 2'h3;
  assign \$43  = \$39  & \$41 ;
  assign \$439  = refill_address[2:0] == 2'h3;
  assign \$441  = refill_address[2:0] == 2'h3;
  assign \$443  = refill_address[2:0] == 2'h3;
  assign \$445  = refill_address[2:0] == 2'h3;
  assign \$447  = refill_address[2:0] == 2'h3;
  assign \$449  = refill_address[2:0] == 2'h3;
  assign \$451  = refill_address[2:0] == 2'h3;
  assign \$453  = refill_address[2:0] == 2'h3;
  assign \$455  = refill_address[2:0] == 2'h3;
  assign \$457  = refill_address[2:0] == 2'h3;
  assign \$45  = ~ s2_we;
  assign \$459  = refill_address[2:0] == 2'h3;
  assign \$461  = refill_address[2:0] == 2'h3;
  assign \$463  = refill_address[2:0] == 2'h3;
  assign \$465  = refill_address[2:0] == 2'h3;
  assign \$467  = refill_address[2:0] == 2'h3;
  assign \$469  = refill_address[2:0] == 2'h3;
  assign \$471  = refill_address[2:0] == 2'h3;
  assign \$473  = refill_address[2:0] == 2'h3;
  assign \$475  = refill_address[2:0] == 2'h3;
  assign \$477  = refill_address[2:0] == 2'h3;
  assign \$47  = \$43  & \$45 ;
  assign \$479  = refill_address[2:0] == 2'h3;
  assign \$481  = { \$417 , \$419 , \$421 , \$423 , \$425 , \$427 , \$429 , \$431 , \$433 , \$435 , \$437 , \$439 , \$441 , \$443 , \$445 , \$447 , \$449 , \$451 , \$453 , \$455 , \$457 , \$459 , \$461 , \$463 , \$465 , \$467 , \$469 , \$471 , \$473 , \$475 , \$477 , \$479  } & refill_data;
  assign \$483  = refill_address[2:0] == 3'h4;
  assign \$485  = refill_address[2:0] == 3'h4;
  assign \$487  = refill_address[2:0] == 3'h4;
  assign \$489  = refill_address[2:0] == 3'h4;
  assign \$491  = refill_address[2:0] == 3'h4;
  assign \$493  = refill_address[2:0] == 3'h4;
  assign \$495  = refill_address[2:0] == 3'h4;
  assign \$497  = refill_address[2:0] == 3'h4;
  assign \$49  = refill_address[2:0] == s2_address[2:0];
  assign \$499  = refill_address[2:0] == 3'h4;
  assign \$501  = refill_address[2:0] == 3'h4;
  assign \$503  = refill_address[2:0] == 3'h4;
  assign \$505  = refill_address[2:0] == 3'h4;
  assign \$507  = refill_address[2:0] == 3'h4;
  assign \$509  = refill_address[2:0] == 3'h4;
  assign \$511  = refill_address[2:0] == 3'h4;
  assign \$513  = refill_address[2:0] == 3'h4;
  assign \$515  = refill_address[2:0] == 3'h4;
  assign \$517  = refill_address[2:0] == 3'h4;
  assign \$51  = ~ refill_valid;
  assign \$519  = refill_address[2:0] == 3'h4;
  assign \$521  = refill_address[2:0] == 3'h4;
  assign \$523  = refill_address[2:0] == 3'h4;
  assign \$525  = refill_address[2:0] == 3'h4;
  assign \$527  = refill_address[2:0] == 3'h4;
  assign \$529  = refill_address[2:0] == 3'h4;
  assign \$531  = refill_address[2:0] == 3'h4;
  assign \$533  = refill_address[2:0] == 3'h4;
  assign \$535  = refill_address[2:0] == 3'h4;
  assign \$537  = refill_address[2:0] == 3'h4;
  assign \$539  = refill_address[2:0] == 3'h4;
  assign \$541  = refill_address[2:0] == 3'h4;
  assign \$543  = refill_address[2:0] == 3'h4;
  assign \$545  = refill_address[2:0] == 3'h4;
  assign \$547  = { \$483 , \$485 , \$487 , \$489 , \$491 , \$493 , \$495 , \$497 , \$499 , \$501 , \$503 , \$505 , \$507 , \$509 , \$511 , \$513 , \$515 , \$517 , \$519 , \$521 , \$523 , \$525 , \$527 , \$529 , \$531 , \$533 , \$535 , \$537 , \$539 , \$541 , \$543 , \$545  } & refill_data;
  assign \$54  = ~ \$signal ;
  assign \$549  = refill_address[2:0] == 3'h5;
  assign \$551  = refill_address[2:0] == 3'h5;
  assign \$553  = refill_address[2:0] == 3'h5;
  assign \$555  = refill_address[2:0] == 3'h5;
  assign \$557  = refill_address[2:0] == 3'h5;
  assign \$559  = refill_address[2:0] == 3'h5;
  assign \$561  = refill_address[2:0] == 3'h5;
  assign \$563  = refill_address[2:0] == 3'h5;
  assign \$565  = refill_address[2:0] == 3'h5;
  assign \$567  = refill_address[2:0] == 3'h5;
  assign \$569  = refill_address[2:0] == 3'h5;
  assign \$571  = refill_address[2:0] == 3'h5;
  assign \$573  = refill_address[2:0] == 3'h5;
  assign \$575  = refill_address[2:0] == 3'h5;
  assign \$577  = refill_address[2:0] == 3'h5;
  assign \$56  = ~ \$signal$57 ;
  assign \$579  = refill_address[2:0] == 3'h5;
  assign \$581  = refill_address[2:0] == 3'h5;
  assign \$583  = refill_address[2:0] == 3'h5;
  assign \$585  = refill_address[2:0] == 3'h5;
  assign \$587  = refill_address[2:0] == 3'h5;
  assign \$589  = refill_address[2:0] == 3'h5;
  assign \$591  = refill_address[2:0] == 3'h5;
  assign \$593  = refill_address[2:0] == 3'h5;
  assign \$595  = refill_address[2:0] == 3'h5;
  assign \$597  = refill_address[2:0] == 3'h5;
  assign \$5  = ~ s1_stall;
  assign \$599  = refill_address[2:0] == 3'h5;
  assign \$601  = refill_address[2:0] == 3'h5;
  assign \$603  = refill_address[2:0] == 3'h5;
  assign \$605  = refill_address[2:0] == 3'h5;
  assign \$607  = refill_address[2:0] == 3'h5;
  assign \$59  = ~ \$signal$60 ;
  assign \$609  = refill_address[2:0] == 3'h5;
  assign \$611  = refill_address[2:0] == 3'h5;
  assign \$613  = { \$549 , \$551 , \$553 , \$555 , \$557 , \$559 , \$561 , \$563 , \$565 , \$567 , \$569 , \$571 , \$573 , \$575 , \$577 , \$579 , \$581 , \$583 , \$585 , \$587 , \$589 , \$591 , \$593 , \$595 , \$597 , \$599 , \$601 , \$603 , \$605 , \$607 , \$609 , \$611  } & refill_data;
  assign \$615  = refill_address[2:0] == 3'h6;
  assign \$617  = refill_address[2:0] == 3'h6;
  assign \$619  = refill_address[2:0] == 3'h6;
  assign \$621  = refill_address[2:0] == 3'h6;
  assign \$623  = refill_address[2:0] == 3'h6;
  assign \$625  = refill_address[2:0] == 3'h6;
  assign \$627  = refill_address[2:0] == 3'h6;
  assign \$629  = refill_address[2:0] == 3'h6;
  assign \$631  = refill_address[2:0] == 3'h6;
  assign \$633  = refill_address[2:0] == 3'h6;
  assign \$635  = refill_address[2:0] == 3'h6;
  assign \$637  = refill_address[2:0] == 3'h6;
  assign \$62  = ~ \$signal$63 ;
  assign \$639  = refill_address[2:0] == 3'h6;
  assign \$641  = refill_address[2:0] == 3'h6;
  assign \$643  = refill_address[2:0] == 3'h6;
  assign \$645  = refill_address[2:0] == 3'h6;
  assign \$647  = refill_address[2:0] == 3'h6;
  assign \$649  = refill_address[2:0] == 3'h6;
  assign \$651  = refill_address[2:0] == 3'h6;
  assign \$653  = refill_address[2:0] == 3'h6;
  assign \$655  = refill_address[2:0] == 3'h6;
  assign \$657  = refill_address[2:0] == 3'h6;
  assign \$659  = refill_address[2:0] == 3'h6;
  assign \$661  = refill_address[2:0] == 3'h6;
  assign \$663  = refill_address[2:0] == 3'h6;
  assign \$665  = refill_address[2:0] == 3'h6;
  assign \$667  = refill_address[2:0] == 3'h6;
  assign \$65  = ~ \$signal$66 ;
  assign \$669  = refill_address[2:0] == 3'h6;
  assign \$671  = refill_address[2:0] == 3'h6;
  assign \$673  = refill_address[2:0] == 3'h6;
  assign \$675  = refill_address[2:0] == 3'h6;
  assign \$677  = refill_address[2:0] == 3'h6;
  assign \$679  = { \$615 , \$617 , \$619 , \$621 , \$623 , \$625 , \$627 , \$629 , \$631 , \$633 , \$635 , \$637 , \$639 , \$641 , \$643 , \$645 , \$647 , \$649 , \$651 , \$653 , \$655 , \$657 , \$659 , \$661 , \$663 , \$665 , \$667 , \$669 , \$671 , \$673 , \$675 , \$677  } & refill_data;
  assign \$681  = refill_address[2:0] == 3'h7;
  assign \$683  = refill_address[2:0] == 3'h7;
  assign \$685  = refill_address[2:0] == 3'h7;
  assign \$687  = refill_address[2:0] == 3'h7;
  assign \$689  = refill_address[2:0] == 3'h7;
  assign \$691  = refill_address[2:0] == 3'h7;
  assign \$693  = refill_address[2:0] == 3'h7;
  assign \$695  = refill_address[2:0] == 3'h7;
  assign \$697  = refill_address[2:0] == 3'h7;
  assign \$68  = ~ \$signal$69 ;
  assign \$699  = refill_address[2:0] == 3'h7;
  assign \$701  = refill_address[2:0] == 3'h7;
  assign \$703  = refill_address[2:0] == 3'h7;
  assign \$705  = refill_address[2:0] == 3'h7;
  assign \$707  = refill_address[2:0] == 3'h7;
  assign \$709  = refill_address[2:0] == 3'h7;
  assign \$711  = refill_address[2:0] == 3'h7;
  assign \$713  = refill_address[2:0] == 3'h7;
  assign \$715  = refill_address[2:0] == 3'h7;
  assign \$717  = refill_address[2:0] == 3'h7;
  assign \$719  = refill_address[2:0] == 3'h7;
  assign \$721  = refill_address[2:0] == 3'h7;
  assign \$723  = refill_address[2:0] == 3'h7;
  assign \$725  = refill_address[2:0] == 3'h7;
  assign \$727  = refill_address[2:0] == 3'h7;
  assign \$71  = ~ \$signal$72 ;
  assign \$729  = refill_address[2:0] == 3'h7;
  assign \$731  = refill_address[2:0] == 3'h7;
  assign \$733  = refill_address[2:0] == 3'h7;
  assign \$735  = refill_address[2:0] == 3'h7;
  assign \$737  = refill_address[2:0] == 3'h7;
  assign \$739  = refill_address[2:0] == 3'h7;
  assign \$741  = refill_address[2:0] == 3'h7;
  assign \$743  = refill_address[2:0] == 3'h7;
  assign \$745  = { \$681 , \$683 , \$685 , \$687 , \$689 , \$691 , \$693 , \$695 , \$697 , \$699 , \$701 , \$703 , \$705 , \$707 , \$709 , \$711 , \$713 , \$715 , \$717 , \$719 , \$721 , \$723 , \$725 , \$727 , \$729 , \$731 , \$733 , \$735 , \$737 , \$739 , \$741 , \$743  } & refill_data;
  assign \$747  = s2_address[2:0] == 1'h0;
  assign \$749  = s2_address[2:0] == 1'h0;
  assign \$751  = s2_address[2:0] == 1'h0;
  assign \$753  = s2_address[2:0] == 1'h0;
  assign \$755  = s2_address[2:0] == 1'h0;
  assign \$757  = s2_address[2:0] == 1'h0;
  assign \$74  = ~ \$signal$75 ;
  assign \$759  = s2_address[2:0] == 1'h0;
  assign \$761  = s2_address[2:0] == 1'h0;
  assign \$763  = s2_address[2:0] == 1'h0;
  assign \$765  = s2_address[2:0] == 1'h0;
  assign \$767  = s2_address[2:0] == 1'h0;
  assign \$769  = s2_address[2:0] == 1'h0;
  assign \$771  = s2_address[2:0] == 1'h0;
  assign \$773  = s2_address[2:0] == 1'h0;
  assign \$775  = s2_address[2:0] == 1'h0;
  assign \$777  = s2_address[2:0] == 1'h0;
  assign \$77  = miss | s2_we;
  assign \$779  = s2_address[2:0] == 1'h0;
  assign \$781  = s2_address[2:0] == 1'h0;
  assign \$783  = s2_address[2:0] == 1'h0;
  assign \$785  = s2_address[2:0] == 1'h0;
  assign \$787  = s2_address[2:0] == 1'h0;
  assign \$789  = s2_address[2:0] == 1'h0;
  assign \$791  = s2_address[2:0] == 1'h0;
  assign \$793  = s2_address[2:0] == 1'h0;
  assign \$795  = s2_address[2:0] == 1'h0;
  assign \$797  = s2_address[2:0] == 1'h0;
  assign \$7  = latch_s1_line_no_stall == s2_address[7:3];
  assign \$79  = refill_address[28:8] != s2_address[28:8];
  assign \$799  = s2_address[2:0] == 1'h0;
  assign \$801  = s2_address[2:0] == 1'h0;
  assign \$803  = s2_address[2:0] == 1'h0;
  assign \$805  = s2_address[2:0] == 1'h0;
  assign \$807  = s2_address[2:0] == 1'h0;
  assign \$809  = s2_address[2:0] == 1'h0;
  assign \$811  = { \$747 , \$749 , \$751 , \$753 , \$755 , \$757 , \$759 , \$761 , \$763 , \$765 , \$767 , \$769 , \$771 , \$773 , \$775 , \$777 , \$779 , \$781 , \$783 , \$785 , \$787 , \$789 , \$791 , \$793 , \$795 , \$797 , \$799 , \$801 , \$803 , \$805 , \$807 , \$809  } & data_din;
  assign \$813  = s2_address[2:0] == 1'h1;
  assign \$815  = s2_address[2:0] == 1'h1;
  assign \$817  = s2_address[2:0] == 1'h1;
  assign \$81  = \$77  | \$79 ;
  assign \$819  = s2_address[2:0] == 1'h1;
  assign \$821  = s2_address[2:0] == 1'h1;
  assign \$823  = s2_address[2:0] == 1'h1;
  assign \$825  = s2_address[2:0] == 1'h1;
  assign \$827  = s2_address[2:0] == 1'h1;
  assign \$829  = s2_address[2:0] == 1'h1;
  assign \$831  = s2_address[2:0] == 1'h1;
  assign \$833  = s2_address[2:0] == 1'h1;
  assign \$835  = s2_address[2:0] == 1'h1;
  assign \$837  = s2_address[2:0] == 1'h1;
  assign \$83  = ~ latch_s2_stall;
  assign \$839  = s2_address[2:0] == 1'h1;
  assign \$841  = s2_address[2:0] == 1'h1;
  assign \$843  = s2_address[2:0] == 1'h1;
  assign \$845  = s2_address[2:0] == 1'h1;
  assign \$847  = s2_address[2:0] == 1'h1;
  assign \$849  = s2_address[2:0] == 1'h1;
  assign \$851  = s2_address[2:0] == 1'h1;
  assign \$853  = s2_address[2:0] == 1'h1;
  assign \$855  = s2_address[2:0] == 1'h1;
  assign \$857  = s2_address[2:0] == 1'h1;
  assign \$85  = \$83  & s2_stall;
  assign \$859  = s2_address[2:0] == 1'h1;
  assign \$861  = s2_address[2:0] == 1'h1;
  assign \$863  = s2_address[2:0] == 1'h1;
  assign \$865  = s2_address[2:0] == 1'h1;
  assign \$867  = s2_address[2:0] == 1'h1;
  assign \$869  = s2_address[2:0] == 1'h1;
  assign \$871  = s2_address[2:0] == 1'h1;
  assign \$873  = s2_address[2:0] == 1'h1;
  assign \$875  = s2_address[2:0] == 1'h1;
  assign \$877  = { \$813 , \$815 , \$817 , \$819 , \$821 , \$823 , \$825 , \$827 , \$829 , \$831 , \$833 , \$835 , \$837 , \$839 , \$841 , \$843 , \$845 , \$847 , \$849 , \$851 , \$853 , \$855 , \$857 , \$859 , \$861 , \$863 , \$865 , \$867 , \$869 , \$871 , \$873 , \$875  } & data_din;
  assign \$87  = latch_stall_request & refill_request;
  assign \$879  = s2_address[2:0] == 2'h2;
  assign \$881  = s2_address[2:0] == 2'h2;
  assign \$883  = s2_address[2:0] == 2'h2;
  assign \$885  = s2_address[2:0] == 2'h2;
  assign \$887  = s2_address[2:0] == 2'h2;
  assign \$889  = s2_address[2:0] == 2'h2;
  assign \$891  = s2_address[2:0] == 2'h2;
  assign \$893  = s2_address[2:0] == 2'h2;
  assign \$895  = s2_address[2:0] == 2'h2;
  assign \$897  = s2_address[2:0] == 2'h2;
  assign \$89  = \$85  | \$87 ;
  assign \$899  = s2_address[2:0] == 2'h2;
  assign \$901  = s2_address[2:0] == 2'h2;
  assign \$903  = s2_address[2:0] == 2'h2;
  assign \$905  = s2_address[2:0] == 2'h2;
  assign \$907  = s2_address[2:0] == 2'h2;
  assign \$909  = s2_address[2:0] == 2'h2;
  assign \$911  = s2_address[2:0] == 2'h2;
  assign \$913  = s2_address[2:0] == 2'h2;
  assign \$915  = s2_address[2:0] == 2'h2;
  assign \$917  = s2_address[2:0] == 2'h2;
  assign \$91  = ~ stall_request;
  assign \$919  = s2_address[2:0] == 2'h2;
  assign \$921  = s2_address[2:0] == 2'h2;
  assign \$923  = s2_address[2:0] == 2'h2;
  assign \$925  = s2_address[2:0] == 2'h2;
  assign \$927  = s2_address[2:0] == 2'h2;
  assign \$929  = s2_address[2:0] == 2'h2;
  assign \$931  = s2_address[2:0] == 2'h2;
  assign \$933  = s2_address[2:0] == 2'h2;
  assign \$935  = s2_address[2:0] == 2'h2;
  assign \$937  = s2_address[2:0] == 2'h2;
  assign \$93  = latch_stall_request & \$91 ;
  assign \$939  = s2_address[2:0] == 2'h2;
  assign \$941  = s2_address[2:0] == 2'h2;
  assign \$943  = { \$879 , \$881 , \$883 , \$885 , \$887 , \$889 , \$891 , \$893 , \$895 , \$897 , \$899 , \$901 , \$903 , \$905 , \$907 , \$909 , \$911 , \$913 , \$915 , \$917 , \$919 , \$921 , \$923 , \$925 , \$927 , \$929 , \$931 , \$933 , \$935 , \$937 , \$939 , \$941  } & data_din;
  assign \$945  = s2_address[2:0] == 2'h3;
  assign \$947  = s2_address[2:0] == 2'h3;
  assign \$949  = s2_address[2:0] == 2'h3;
  assign \$951  = s2_address[2:0] == 2'h3;
  assign \$953  = s2_address[2:0] == 2'h3;
  assign \$955  = s2_address[2:0] == 2'h3;
  assign \$957  = s2_address[2:0] == 2'h3;
  assign \$95  = \$93  & s2_stall;
  assign \$959  = s2_address[2:0] == 2'h3;
  assign \$961  = s2_address[2:0] == 2'h3;
  assign \$963  = s2_address[2:0] == 2'h3;
  assign \$965  = s2_address[2:0] == 2'h3;
  assign \$967  = s2_address[2:0] == 2'h3;
  assign \$969  = s2_address[2:0] == 2'h3;
  assign \$971  = s2_address[2:0] == 2'h3;
  assign \$973  = s2_address[2:0] == 2'h3;
  assign \$975  = s2_address[2:0] == 2'h3;
  assign \$977  = s2_address[2:0] == 2'h3;
  assign \$97  = \$89  | \$95 ;
  assign \$979  = s2_address[2:0] == 2'h3;
  assign \$981  = s2_address[2:0] == 2'h3;
  assign \$983  = s2_address[2:0] == 2'h3;
  assign \$985  = s2_address[2:0] == 2'h3;
  assign \$987  = s2_address[2:0] == 2'h3;
  assign \$989  = s2_address[2:0] == 2'h3;
  assign \$991  = s2_address[2:0] == 2'h3;
  assign \$993  = s2_address[2:0] == 2'h3;
  assign \$995  = s2_address[2:0] == 2'h3;
  assign \$997  = s2_address[2:0] == 2'h3;
  always @(posedge clk)
      latch_data_rp_data <= \$next\latch_data_rp_data ;
  always @(posedge clk)
      latch_tag_rp_data <= \$next\latch_tag_rp_data ;
  always @(posedge clk)
      latch_s2_dat_r <= \$next\latch_s2_dat_r ;
  always @(posedge clk)
      restore_s2 <= \$next\restore_s2 ;
  always @(posedge clk)
      latch_stall_request <= \$next\latch_stall_request ;
  always @(posedge clk)
      latch_s2_stall <= \$next\latch_s2_stall ;
  always @(posedge clk)
      \$signal  <= \$next$signal ;
  always @(posedge clk)
      \$signal$57  <= \$next$signal$57 ;
  always @(posedge clk)
      \$signal$60  <= \$next$signal$60 ;
  always @(posedge clk)
      \$signal$63  <= \$next$signal$63 ;
  always @(posedge clk)
      \$signal$66  <= \$next$signal$66 ;
  always @(posedge clk)
      \$signal$69  <= \$next$signal$69 ;
  always @(posedge clk)
      \$signal$72  <= \$next$signal$72 ;
  always @(posedge clk)
      \$signal$75  <= \$next$signal$75 ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      flush_line <= \$next\flush_line ;
  always @(posedge clk)
      latch_s1_line_no_stall <= \$next\latch_s1_line_no_stall ;
  always @(posedge clk)
      latch_s1_line <= \$next\latch_s1_line ;
  reg [255:0] data_mem [31:0];
  initial begin
    data_mem[0] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[1] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[2] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[3] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[4] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[5] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[6] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[7] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[8] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[9] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[10] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[11] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[12] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[13] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[14] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[15] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[16] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[17] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[18] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[19] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[20] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[21] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[22] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[23] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[24] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[25] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[26] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[27] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[28] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[29] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[30] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    data_mem[31] = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\data_rp_data_mem_r_addr ;
    if (\$next\data_wp_data_mem_w_en [0]) data_mem[\$next\data_wp_data_mem_w_addr ][31:0] <= \$next\data_wp_data_mem_w_data [31:0];
    if (\$next\data_wp_data_mem_w_en [1]) data_mem[\$next\data_wp_data_mem_w_addr ][63:32] <= \$next\data_wp_data_mem_w_data [63:32];
    if (\$next\data_wp_data_mem_w_en [2]) data_mem[\$next\data_wp_data_mem_w_addr ][95:64] <= \$next\data_wp_data_mem_w_data [95:64];
    if (\$next\data_wp_data_mem_w_en [3]) data_mem[\$next\data_wp_data_mem_w_addr ][127:96] <= \$next\data_wp_data_mem_w_data [127:96];
    if (\$next\data_wp_data_mem_w_en [4]) data_mem[\$next\data_wp_data_mem_w_addr ][159:128] <= \$next\data_wp_data_mem_w_data [159:128];
    if (\$next\data_wp_data_mem_w_en [5]) data_mem[\$next\data_wp_data_mem_w_addr ][191:160] <= \$next\data_wp_data_mem_w_data [191:160];
    if (\$next\data_wp_data_mem_w_en [6]) data_mem[\$next\data_wp_data_mem_w_addr ][223:192] <= \$next\data_wp_data_mem_w_data [223:192];
    if (\$next\data_wp_data_mem_w_en [7]) data_mem[\$next\data_wp_data_mem_w_addr ][255:224] <= \$next\data_wp_data_mem_w_data [255:224];
  end
  assign data_rp_data_mem_r_data = data_mem[_0_];
  reg [21:0] tag_mem [31:0];
  initial begin
    tag_mem[0] = 22'h000000;
    tag_mem[1] = 22'h000000;
    tag_mem[2] = 22'h000000;
    tag_mem[3] = 22'h000000;
    tag_mem[4] = 22'h000000;
    tag_mem[5] = 22'h000000;
    tag_mem[6] = 22'h000000;
    tag_mem[7] = 22'h000000;
    tag_mem[8] = 22'h000000;
    tag_mem[9] = 22'h000000;
    tag_mem[10] = 22'h000000;
    tag_mem[11] = 22'h000000;
    tag_mem[12] = 22'h000000;
    tag_mem[13] = 22'h000000;
    tag_mem[14] = 22'h000000;
    tag_mem[15] = 22'h000000;
    tag_mem[16] = 22'h000000;
    tag_mem[17] = 22'h000000;
    tag_mem[18] = 22'h000000;
    tag_mem[19] = 22'h000000;
    tag_mem[20] = 22'h000000;
    tag_mem[21] = 22'h000000;
    tag_mem[22] = 22'h000000;
    tag_mem[23] = 22'h000000;
    tag_mem[24] = 22'h000000;
    tag_mem[25] = 22'h000000;
    tag_mem[26] = 22'h000000;
    tag_mem[27] = 22'h000000;
    tag_mem[28] = 22'h000000;
    tag_mem[29] = 22'h000000;
    tag_mem[30] = 22'h000000;
    tag_mem[31] = 22'h000000;
  end
  reg [4:0] _1_;
  always @(posedge clk) begin
    _1_ <= \$next\tag_rp_tag_mem_r_addr ;
    if (\$next\tag_wp_tag_mem_w_en ) tag_mem[\$next\tag_wp_tag_mem_w_addr ] <= \$next\tag_wp_tag_mem_w_data ;
  end
  assign tag_rp_tag_mem_r_data = tag_mem[_1_];
  way_sel way_sel (
    .i(way_sel_i),
    .n(way_sel_n),
    .o(way_sel_o)
  );
  always @* begin
    \$next\refill_lru  = 1'h0;
    \$next\refill_lru  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\enable  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
    casez (refill_lru)
      1'hz:
          \$next\enable  = 1'h1;
    endcase
  end
  always @* begin
    \$next\flush_line  = flush_line;
    casez (fsm_state)
      2'h0:
          \$next\flush_line  = \$21 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\flush_line  = 5'h1f;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$24 )
            1'h1:
                \$next\fsm_state  = 2'h1;
          endcase
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                \$next\fsm_state  = 2'h0;
            2'b1z:
                casez (refill_ready)
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
          endcase
      2'h2:
          casez (refill_valid)
            1'h1:
                casez (last_refill)
                  1'h1:
                      \$next\fsm_state  = 2'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\s2_dat_r$26  = 32'd0;
    casez (fsm_state)
      2'h1:
          casez (way_sel_o)
            1'hz:
                \$next\s2_dat_r$26  = data;
          endcase
      2'h2:
          casez (\$35 )
            1'h1:
                casez (\$37 )
                  1'h1:
                      \$next\s2_dat_r$26  = refill_data;
                  1'hz:
                      casez (way_sel_o)
                        1'hz:
                            \$next\s2_dat_r$26  = data;
                      endcase
                endcase
            1'hz:
                casez (way_sel_o)
                  1'hz:
                      \$next\s2_dat_r$26  = data;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\refill_stall  = 1'h0;
    casez (fsm_state)
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\refill_stall  = 1'h1;
          endcase
      2'h2:
          casez (\$47 )
            1'h1:
                casez (\$49 )
                  1'h1:
                      \$next\refill_stall  = \$51 ;
                  1'hz:
                      casez (s2_address[2:0])
                        3'h0:
                            \$next\refill_stall  = \$54 ;
                        3'h1:
                            \$next\refill_stall  = \$56 ;
                        3'h2:
                            \$next\refill_stall  = \$59 ;
                        3'h3:
                            \$next\refill_stall  = \$62 ;
                        3'h4:
                            \$next\refill_stall  = \$65 ;
                        3'h5:
                            \$next\refill_stall  = \$68 ;
                        3'h6:
                            \$next\refill_stall  = \$71 ;
                        3'hz:
                            \$next\refill_stall  = \$74 ;
                      endcase
                endcase
            1'hz:
                \$next\refill_stall  = \$81 ;
          endcase
    endcase
  end
  always @* begin
    \$next\refill_request  = 1'h0;
    casez (fsm_state)
      2'h1:
          casez ({ miss, flush })
            2'bz1:
                /* empty */;
            2'b1z:
                casez (refill_ready)
                  1'h1:
                      \$next\refill_request  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next$signal  = \$signal ;
    \$next$signal$57  = \$signal$57 ;
    \$next$signal$60  = \$signal$60 ;
    \$next$signal$63  = \$signal$63 ;
    \$next$signal$66  = \$signal$66 ;
    \$next$signal$69  = \$signal$69 ;
    \$next$signal$72  = \$signal$72 ;
    \$next$signal$75  = \$signal$75 ;
    casez (fsm_state)
      2'h2:
          casez (refill_valid)
            1'h1:
              begin
                casez (refill_address[2:0])
                  3'h0:
                      \$next$signal  = 1'h1;
                  3'h1:
                      \$next$signal$57  = 1'h1;
                  3'h2:
                      \$next$signal$60  = 1'h1;
                  3'h3:
                      \$next$signal$63  = 1'h1;
                  3'h4:
                      \$next$signal$66  = 1'h1;
                  3'h5:
                      \$next$signal$69  = 1'h1;
                  3'h6:
                      \$next$signal$72  = 1'h1;
                  3'hz:
                      \$next$signal$75  = 1'h1;
                endcase
                casez (last_refill)
                  1'h1:
                    begin
                      \$next$signal  = 1'h0;
                      \$next$signal$57  = 1'h0;
                      \$next$signal$60  = 1'h0;
                      \$next$signal$63  = 1'h0;
                      \$next$signal$66  = 1'h0;
                      \$next$signal$69  = 1'h0;
                      \$next$signal$72  = 1'h0;
                      \$next$signal$75  = 1'h0;
                    end
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \$next$signal  = 1'h0;
          \$next$signal$57  = 1'h0;
          \$next$signal$60  = 1'h0;
          \$next$signal$63  = 1'h0;
          \$next$signal$66  = 1'h0;
          \$next$signal$69  = 1'h0;
          \$next$signal$72  = 1'h0;
          \$next$signal$75  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\stall_request  = 1'h0;
    \$next\stall_request  = \$3 ;
  end
  always @* begin
    \$next\latch_s2_stall  = latch_s2_stall;
    \$next\latch_s2_stall  = s2_stall;
    casez (rst)
      1'h1:
          \$next\latch_s2_stall  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_stall_request  = latch_stall_request;
    \$next\latch_stall_request  = stall_request;
    casez (rst)
      1'h1:
          \$next\latch_stall_request  = 1'h0;
    endcase
  end
  always @* begin
    \$next\restore_s2  = restore_s2;
    casez (\$97 )
      1'h1:
          \$next\restore_s2  = \$101 ;
    endcase
    casez (rst)
      1'h1:
          \$next\restore_s2  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_s2_dat_r  = latch_s2_dat_r;
    casez (\$117 )
      1'h1:
          \$next\latch_s2_dat_r  = \s2_dat_r$26 ;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_s2_dat_r  = 32'd0;
    endcase
  end
  always @* begin
    \$next\s2_dat_r  = 32'd0;
    casez (\$127 )
      1'h1:
          \$next\s2_dat_r  = latch_s2_dat_r;
      1'hz:
          \$next\s2_dat_r  = \s2_dat_r$26 ;
    endcase
  end
  always @* begin
    \$next\tag_din_value  = 21'h000000;
    casez ({ s2_we, refilling })
      2'bz1:
          \$next\tag_din_value  = refill_address[28:8];
      2'b1z:
          casez (refill_lru)
            1'hz:
                \$next\tag_din_value  = tag_value;
          endcase
      2'hz:
          \$next\tag_din_value  = 21'h000000;
    endcase
  end
  always @* begin
    \$next\tag_din_valid  = 1'h0;
    casez ({ s2_we, refilling })
      2'bz1:
          \$next\tag_din_valid  = \$129 ;
      2'b1z:
          \$next\tag_din_valid  = \$131 ;
      2'hz:
          \$next\tag_din_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_s1_line  = latch_s1_line;
    \$next\latch_s1_line  = s1_address[7:3];
    casez (rst)
      1'h1:
          \$next\latch_s1_line  = 5'h00;
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_addr  = 5'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\tag_wp_tag_mem_w_addr  = refill_address[7:3];
      2'b1z:
          \$next\tag_wp_tag_mem_w_addr  = flush_line;
      2'hz:
          \$next\tag_wp_tag_mem_w_addr  = s2_address[7:3];
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_en  = 1'h0;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\tag_wp_tag_mem_w_en  = enable;
      2'b1z:
          \$next\tag_wp_tag_mem_w_en  = 1'h1;
      2'hz:
          \$next\tag_wp_tag_mem_w_en  = \$133 ;
    endcase
  end
  always @* begin
    \$next\tag_wp_tag_mem_w_data  = 22'h000000;
    \$next\tag_wp_tag_mem_w_data  = { tag_din_valid, tag_din_value };
  end
  always @* begin
    \$next\tag_rp_tag_mem_r_addr  = 5'h00;
    \$next\tag_rp_tag_mem_r_addr  = s1_address[7:3];
  end
  always @* begin
    \$next\latch_tag_rp_data  = latch_tag_rp_data;
    casez (\$135 )
      1'h1:
          \$next\latch_tag_rp_data  = tag_rp_tag_mem_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_tag_rp_data  = 22'h000000;
    endcase
  end
  always @* begin
    \$next\tag_value  = 21'h000000;
    \$next\tag_valid  = 1'h0;
    casez (\$137 )
      1'h1:
          { \$next\tag_valid , \$next\tag_value  } = tag_rp_tag_mem_r_data;
      1'hz:
          { \$next\tag_valid , \$next\tag_value  } = latch_tag_rp_data;
    endcase
  end
  always @* begin
    \$next\data_din  = 32'd0;
    casez (s2_sel[0])
      1'h1:
          \$next\data_din [7:0] = s2_dat_w[7:0];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [7:0] = data[7:0];
          endcase
    endcase
    casez (s2_sel[1])
      1'h1:
          \$next\data_din [15:8] = s2_dat_w[15:8];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [15:8] = data[15:8];
          endcase
    endcase
    casez (s2_sel[2])
      1'h1:
          \$next\data_din [23:16] = s2_dat_w[23:16];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [23:16] = data[23:16];
          endcase
    endcase
    casez (s2_sel[3])
      1'h1:
          \$next\data_din [31:24] = s2_dat_w[31:24];
      1'hz:
          casez (refill_lru)
            1'hz:
                \$next\data_din [31:24] = data[31:24];
          endcase
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_addr  = 5'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_addr  = refill_address[7:3];
      2'b1z:
          \$next\data_wp_data_mem_w_addr  = flush_line;
      2'hz:
          \$next\data_wp_data_mem_w_addr  = s2_address[7:3];
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_en  = 8'h00;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_en  = { \$169 , \$165 , \$161 , \$157 , \$153 , \$149 , \$145 , \$141  };
      2'b1z:
          /* empty */;
      2'hz:
          \$next\data_wp_data_mem_w_en  = { \$217 , \$211 , \$205 , \$199 , \$193 , \$187 , \$181 , \$175  };
    endcase
  end
  always @* begin
    \$next\latch_s1_line_no_stall  = latch_s1_line_no_stall;
    casez (\$5 )
      1'h1:
          \$next\latch_s1_line_no_stall  = s1_address[7:3];
    endcase
    casez (rst)
      1'h1:
          \$next\latch_s1_line_no_stall  = 5'h00;
    endcase
  end
  always @* begin
    \$next\data_wp_data_mem_w_data  = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    casez ({ flushing, refilling })
      2'bz1:
          \$next\data_wp_data_mem_w_data  = { \$745 , \$679 , \$613 , \$547 , \$481 , \$415 , \$349 , \$283  };
      2'b1z:
          /* empty */;
      2'hz:
          \$next\data_wp_data_mem_w_data  = { \$1273 , \$1207 , \$1141 , \$1075 , \$1009 , \$943 , \$877 , \$811  };
    endcase
  end
  always @* begin
    \$next\data_rp_data_mem_r_addr  = 5'h00;
    \$next\data_rp_data_mem_r_addr  = s1_address[7:3];
  end
  always @* begin
    \$next\latch_data_rp_data  = latch_data_rp_data;
    casez (\$1275 )
      1'h1:
          \$next\latch_data_rp_data  = data_rp_data_mem_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\latch_data_rp_data  = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\data  = 32'd0;
    casez (\$1277 )
      1'h1:
          \$next\data  = \$1279 ;
      1'hz:
          \$next\data  = \$1283 ;
    endcase
  end
  always @* begin
    \$next\way_sel_i  = 1'h0;
    \$next\way_sel_i  = \$13 ;
  end
  always @* begin
    \$next\miss  = 1'h0;
    \$next\miss  = \$15 ;
  end
  always @* begin
    \$next\flushing  = 1'h0;
    \$next\flushing  = \$17 ;
  end
  always @* begin
    \$next\refilling  = 1'h0;
    \$next\refilling  = \$19 ;
  end
  always @* begin
    \$next\flush_stall  = 1'h0;
    casez (fsm_state)
      2'h0:
          \$next\flush_stall  = 1'h1;
    endcase
  end
  assign \$21  = \$22 ;
  assign data = \$next\data ;
  assign data_rp_data_mem_r_addr = \$next\data_rp_data_mem_r_addr ;
  assign data_wp_data_mem_w_data = \$next\data_wp_data_mem_w_data ;
  assign data_wp_data_mem_w_en = \$next\data_wp_data_mem_w_en ;
  assign data_wp_data_mem_w_addr = \$next\data_wp_data_mem_w_addr ;
  assign data_din = \$next\data_din ;
  assign tag_value = \$next\tag_value ;
  assign tag_valid = \$next\tag_valid ;
  assign tag_rp_tag_mem_r_addr = \$next\tag_rp_tag_mem_r_addr ;
  assign tag_wp_tag_mem_w_data = \$next\tag_wp_tag_mem_w_data ;
  assign tag_wp_tag_mem_w_en = \$next\tag_wp_tag_mem_w_en ;
  assign tag_wp_tag_mem_w_addr = \$next\tag_wp_tag_mem_w_addr ;
  assign tag_din_valid = \$next\tag_din_valid ;
  assign tag_din_value = \$next\tag_din_value ;
  assign s2_dat_r = \$next\s2_dat_r ;
  assign refill_request = \$next\refill_request ;
  assign refill_stall = \$next\refill_stall ;
  assign \s2_dat_r$26  = \$next\s2_dat_r$26 ;
  assign flush_stall = \$next\flush_stall ;
  assign refilling = \$next\refilling ;
  assign flushing = \$next\flushing ;
  assign miss = \$next\miss ;
  assign way_sel_i = \$next\way_sel_i ;
  assign stall_request = \$next\stall_request ;
  assign enable = \$next\enable ;
  assign refill_lru = \$next\refill_lru ;
endmodule

module ifu(f_pc, f_stall, f_valid, ibus_dat_r, ibus_ack, ibus_err, rst, clk, d_branch_predict_taken, m_branch_predict_taken, m_branch_taken, d_branch_target, x_pc, m_branch_target, flush, refill_ready, s2_we, s2_sel, s2_dat_w, f_instruction, ibus_bte, ibus_cyc, ibus_stb, ibus_adr, ibus_cti, f_bus_error, a_pc, stall_request, a_stall);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire [3:0] \$25 ;
  wire [3:0] \$26 ;
  wire [3:0] \$4 ;
  wire [3:0] \$5 ;
  wire [2:0] \$7 ;
  wire \$8 ;
  reg \$next\f_bus_error ;
  reg [31:0] \$next\f_instruction ;
  reg [29:0] \$next\ibus_adr ;
  reg [1:0] \$next\ibus_bte ;
  reg [2:0] \$next\ibus_cti ;
  reg \$next\ibus_cyc ;
  reg \$next\ibus_stb ;
  reg \$next\icache_last_refill ;
  reg [29:0] \$next\icache_refill_address ;
  reg [31:0] \$next\icache_refill_data ;
  reg \$next\icache_refill_valid ;
  reg [29:0] \$next\icache_s1_address ;
  reg \$next\icache_s1_stall ;
  reg [29:0] \$next\icache_s2_address ;
  reg \$next\icache_s2_re ;
  reg \$next\icache_s2_stall ;
  reg [2:0] \$next\last_offset ;
  reg [2:0] \$next\next_cti ;
  reg [2:0] \$next\next_offset ;
  reg \$verilog_initial_trigger  = 1'h0;
  output [29:0] a_pc;
  input a_stall;
  input clk;
  input d_branch_predict_taken;
  input [29:0] d_branch_target;
  output f_bus_error;
  reg f_bus_error = 1'h0;
  output [31:0] f_instruction;
  input [29:0] f_pc;
  input f_stall;
  input f_valid;
  input flush;
  input ibus_ack;
  output [29:0] ibus_adr;
  reg [29:0] ibus_adr = 30'h00000000;
  output [1:0] ibus_bte;
  output [2:0] ibus_cti;
  reg [2:0] ibus_cti = 3'h0;
  output ibus_cyc;
  reg ibus_cyc = 1'h0;
  input [31:0] ibus_dat_r;
  input ibus_err;
  output ibus_stb;
  reg ibus_stb = 1'h0;
  wire icache_last_refill;
  wire [29:0] icache_refill_address;
  wire [31:0] icache_refill_data;
  wire icache_refill_request;
  wire icache_refill_valid;
  wire [29:0] icache_s1_address;
  wire icache_s1_stall;
  wire [29:0] icache_s2_address;
  wire [31:0] icache_s2_dat_r;
  wire icache_s2_re;
  wire icache_s2_stall;
  reg [2:0] last_offset = 3'h0;
  input m_branch_predict_taken;
  input m_branch_taken;
  input [29:0] m_branch_target;
  wire [2:0] next_cti;
  wire [2:0] next_offset;
  input refill_ready;
  input rst;
  input [31:0] s2_dat_w;
  input [3:0] s2_sel;
  input s2_we;
  output stall_request;
  input [29:0] x_pc;
  anonymous \$1  (
    .a_pc(a_pc),
    .d_branch_predict_taken(d_branch_predict_taken),
    .d_branch_target(d_branch_target),
    .f_pc(f_pc),
    .m_branch_predict_taken(m_branch_predict_taken),
    .m_branch_taken(m_branch_taken),
    .m_branch_target(m_branch_target),
    .x_pc(x_pc)
  );
  assign \$7  = \$8  ? 3'h7 : 3'h2;
  assign \$11  = ibus_adr[2:0] == last_offset;
  assign \$13  = ibus_ack | ibus_err;
  assign \$15  = ibus_cti == 3'h7;
  assign \$17  = ibus_ack | ibus_err;
  assign \$19  = ibus_cti == 3'h7;
  assign \$21  = ibus_ack | ibus_err;
  assign \$23  = ibus_ack | ibus_err;
  assign \$26  = icache_s2_address[2:0] - 1'h1;
  assign \$2  = ibus_cyc & ibus_ack;
  assign \$5  = ibus_adr[2:0] + 1'h1;
  assign \$8  = next_offset == last_offset;
  always @(posedge clk)
      last_offset <= \$next\last_offset ;
  always @(posedge clk)
      f_bus_error <= \$next\f_bus_error ;
  always @(posedge clk)
      ibus_cti <= \$next\ibus_cti ;
  always @(posedge clk)
      ibus_adr <= \$next\ibus_adr ;
  always @(posedge clk)
      ibus_stb <= \$next\ibus_stb ;
  always @(posedge clk)
      ibus_cyc <= \$next\ibus_cyc ;
  icache icache (
    .clk(clk),
    .flush(flush),
    .last_refill(icache_last_refill),
    .refill_address(icache_refill_address),
    .refill_data(icache_refill_data),
    .refill_ready(refill_ready),
    .refill_request(icache_refill_request),
    .refill_valid(icache_refill_valid),
    .rst(rst),
    .s1_address(icache_s1_address),
    .s1_stall(icache_s1_stall),
    .s2_address(icache_s2_address),
    .s2_dat_r(icache_s2_dat_r),
    .s2_dat_w(s2_dat_w),
    .s2_re(icache_s2_re),
    .s2_sel(s2_sel),
    .s2_stall(icache_s2_stall),
    .s2_we(s2_we),
    .stall_request(stall_request)
  );
  always @* begin
    \$next\icache_s1_address  = 30'h00000000;
    \$next\icache_s1_address  = a_pc;
  end
  always @* begin
    \$next\icache_s1_stall  = 1'h0;
    \$next\icache_s1_stall  = a_stall;
  end
  always @* begin
    \$next\next_cti  = 3'h0;
    \$next\next_cti  = \$7 ;
  end
  always @* begin
    \$next\icache_last_refill  = 1'h0;
    \$next\icache_last_refill  = \$11 ;
  end
  always @* begin
    \$next\ibus_bte  = 2'h0;
    \$next\ibus_bte  = 2'h2;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\ibus_cyc  = ibus_cyc;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          casez (\$13 )
            1'h1:
                casez (\$15 )
                  1'h1:
                      \$next\ibus_cyc  = 1'h0;
                endcase
          endcase
      2'b1z:
          \$next\ibus_cyc  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus_cyc  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ibus_stb  = ibus_stb;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          casez (\$17 )
            1'h1:
                casez (\$19 )
                  1'h1:
                      \$next\ibus_stb  = 1'h0;
                endcase
          endcase
      2'b1z:
          \$next\ibus_stb  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus_stb  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ibus_adr  = ibus_adr;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          casez (\$21 )
            1'h1:
                \$next\ibus_adr [2:0] = next_offset;
          endcase
      2'b1z:
          \$next\ibus_adr  = icache_s2_address;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus_adr  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\ibus_cti  = ibus_cti;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          casez (\$23 )
            1'h1:
                \$next\ibus_cti  = next_cti;
          endcase
      2'b1z:
          \$next\ibus_cti  = 3'h2;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus_cti  = 3'h0;
    endcase
  end
  always @* begin
    \$next\f_bus_error  = f_bus_error;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          \$next\f_bus_error  = ibus_err;
    endcase
    casez (rst)
      1'h1:
          \$next\f_bus_error  = 1'h0;
    endcase
  end
  always @* begin
    \$next\last_offset  = last_offset;
    casez ({ icache_refill_request, ibus_cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          \$next\last_offset  = \$25 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\last_offset  = 3'h0;
    endcase
  end
  always @* begin
    \$next\icache_s2_address  = 30'h00000000;
    \$next\icache_s2_address  = f_pc;
  end
  always @* begin
    \$next\icache_s2_stall  = 1'h0;
    \$next\icache_s2_stall  = f_stall;
  end
  always @* begin
    \$next\icache_s2_re  = 1'h0;
    \$next\icache_s2_re  = f_valid;
  end
  always @* begin
    \$next\icache_refill_address  = 30'h00000000;
    \$next\icache_refill_address  = ibus_adr;
  end
  always @* begin
    \$next\icache_refill_data  = 32'd0;
    \$next\icache_refill_data  = ibus_dat_r;
  end
  always @* begin
    \$next\icache_refill_valid  = 1'h0;
    \$next\icache_refill_valid  = \$2 ;
  end
  always @* begin
    \$next\f_instruction  = 32'd0;
    \$next\f_instruction  = icache_s2_dat_r;
  end
  always @* begin
    \$next\next_offset  = 3'h0;
    \$next\next_offset  = \$4 [2:0];
  end
  assign \$4  = \$5 ;
  assign \$25  = \$26 ;
  assign ibus_bte = \$next\ibus_bte ;
  assign icache_last_refill = \$next\icache_last_refill ;
  assign next_cti = \$next\next_cti ;
  assign next_offset = \$next\next_offset ;
  assign f_instruction = \$next\f_instruction ;
  assign icache_refill_valid = \$next\icache_refill_valid ;
  assign icache_refill_data = \$next\icache_refill_data ;
  assign icache_refill_address = \$next\icache_refill_address ;
  assign icache_s2_re = \$next\icache_s2_re ;
  assign icache_s2_stall = \$next\icache_s2_stall ;
  assign icache_s2_address = \$next\icache_s2_address ;
  assign icache_s1_stall = \$next\icache_s1_stall ;
  assign icache_s1_address = \$next\icache_s1_address ;
endmodule

module interrupt_pe(o, n, i);
  wire \$1 ;
  reg \$next\n ;
  reg [3:0] \$next\o ;
  input [15:0] i;
  output n;
  output [3:0] o;
  assign \$1  = i == 1'h0;
  always @* begin
    \$next\o  = 4'h0;
    casez (i[15])
      1'h1:
          \$next\o  = 4'hf;
    endcase
    casez (i[14])
      1'h1:
          \$next\o  = 4'he;
    endcase
    casez (i[13])
      1'h1:
          \$next\o  = 4'hd;
    endcase
    casez (i[12])
      1'h1:
          \$next\o  = 4'hc;
    endcase
    casez (i[11])
      1'h1:
          \$next\o  = 4'hb;
    endcase
    casez (i[10])
      1'h1:
          \$next\o  = 4'ha;
    endcase
    casez (i[9])
      1'h1:
          \$next\o  = 4'h9;
    endcase
    casez (i[8])
      1'h1:
          \$next\o  = 4'h8;
    endcase
    casez (i[7])
      1'h1:
          \$next\o  = 4'h7;
    endcase
    casez (i[6])
      1'h1:
          \$next\o  = 4'h6;
    endcase
    casez (i[5])
      1'h1:
          \$next\o  = 4'h5;
    endcase
    casez (i[4])
      1'h1:
          \$next\o  = 4'h4;
    endcase
    casez (i[3])
      1'h1:
          \$next\o  = 4'h3;
    endcase
    casez (i[2])
      1'h1:
          \$next\o  = 4'h2;
    endcase
    casez (i[1])
      1'h1:
          \$next\o  = 4'h1;
    endcase
    casez (i[0])
      1'h1:
          \$next\o  = 4'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    \$next\n  = \$1 ;
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

module \logic (src1, src2, result, op);
  wire [31:0] \$1 ;
  wire [31:0] \$3 ;
  wire [31:0] \$5 ;
  reg [31:0] \$next\result ;
  input [2:0] op;
  output [31:0] result;
  input [31:0] src1;
  input [31:0] src2;
  assign \$1  = src1 ^ src2;
  assign \$3  = src1 | src2;
  assign \$5  = src1 & src2;
  always @* begin
    \$next\result  = 32'd0;
    casez (op)
      3'h4:
          \$next\result  = \$1 ;
      3'h6:
          \$next\result  = \$3 ;
      3'h7:
          \$next\result  = \$5 ;
    endcase
  end
  assign result = \$next\result ;
endmodule

module lsu(x_stall, m_address, m_load, m_dcache_select, m_store, m_dbus_sel, m_store_data, dbus_ack, dbus_dat_r, m_stall, x_store, x_load, dbus_err, rst, clk, x_mask, x_store_operand, w_load_mask, w_address, w_load_data, flush, s2_stall, replace, x_dcache_select, m_load_data, dbus_bte, dbus_cyc, dbus_stb, dbus_sel, dbus_we, dbus_adr, dbus_cti, dbus_dat_w, x_dbus_sel, x_store_data, w_load_result, refill_request, stall_request, readable, writable, x_address);
  wire \$10 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$14 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$16 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$18 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$2 ;
  wire \$20 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire [31:0] \$22 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire [3:0] \$233 ;
  wire [3:0] \$234 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$33 ;
  wire \$36 ;
  wire [3:0] \$38 ;
  wire [3:0] \$39 ;
  wire \$4 ;
  wire [2:0] \$41 ;
  wire \$42 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire [3:0] \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  reg [29:0] \$next\dbus_adr ;
  reg [1:0] \$next\dbus_bte ;
  reg [2:0] \$next\dbus_cti ;
  reg \$next\dbus_cyc ;
  reg [31:0] \$next\dbus_dat_w ;
  reg [3:0] \$next\dbus_sel ;
  reg \$next\dbus_stb ;
  reg \$next\dbus_we ;
  reg \$next\dcache_last_refill ;
  reg [29:0] \$next\dcache_refill_address ;
  reg [31:0] \$next\dcache_refill_data ;
  reg \$next\dcache_refill_ready ;
  reg \$next\dcache_refill_valid ;
  reg [29:0] \$next\dcache_s1_address ;
  reg \$next\dcache_s1_stall ;
  reg [29:0] \$next\dcache_s2_address ;
  reg [31:0] \$next\dcache_s2_dat_w ;
  reg \$next\dcache_s2_re ;
  reg [3:0] \$next\dcache_s2_sel ;
  reg \$next\dcache_s2_we ;
  reg [2:0] \$next\last_offset ;
  reg \$next\m_bus_error ;
  reg [31:0] \$next\m_load_data ;
  reg [2:0] \$next\next_cti ;
  reg [2:0] \$next\next_offset ;
  reg [65:0] \$next\wrbuf_din ;
  reg [29:0] \$next\wrbuf_din_adr ;
  reg [31:0] \$next\wrbuf_din_dat_w ;
  reg [3:0] \$next\wrbuf_din_sel ;
  reg [29:0] \$next\wrbuf_dout_adr ;
  reg [31:0] \$next\wrbuf_dout_dat_w ;
  reg [3:0] \$next\wrbuf_dout_sel ;
  reg \$next\wrbuf_re ;
  reg \$next\wrbuf_we ;
  reg \$next\x_dcache_select ;
  reg \$verilog_initial_trigger  = 1'h0;
  input clk;
  input dbus_ack;
  output [29:0] dbus_adr;
  reg [29:0] dbus_adr = 30'h00000000;
  output [1:0] dbus_bte;
  output [2:0] dbus_cti;
  reg [2:0] dbus_cti = 3'h0;
  output dbus_cyc;
  reg dbus_cyc = 1'h0;
  input [31:0] dbus_dat_r;
  output [31:0] dbus_dat_w;
  reg [31:0] dbus_dat_w = 32'd0;
  input dbus_err;
  output [3:0] dbus_sel;
  reg [3:0] dbus_sel = 4'h0;
  output dbus_stb;
  reg dbus_stb = 1'h0;
  output dbus_we;
  reg dbus_we = 1'h0;
  wire dcache_last_refill;
  wire [29:0] dcache_refill_address;
  wire [31:0] dcache_refill_data;
  wire dcache_refill_ready;
  wire dcache_refill_valid;
  wire [29:0] dcache_s1_address;
  wire dcache_s1_stall;
  wire [29:0] dcache_s2_address;
  wire [31:0] dcache_s2_dat_r;
  wire [31:0] dcache_s2_dat_w;
  wire dcache_s2_re;
  wire [3:0] dcache_s2_sel;
  wire dcache_s2_we;
  input flush;
  reg [2:0] last_offset = 3'h0;
  input [31:0] m_address;
  reg m_bus_error = 1'h0;
  input [3:0] m_dbus_sel;
  input m_dcache_select;
  input m_load;
  output [31:0] m_load_data;
  input m_stall;
  input m_store;
  input [31:0] m_store_data;
  wire [2:0] next_cti;
  wire [2:0] next_offset;
  output readable;
  output refill_request;
  input replace;
  input rst;
  input s2_stall;
  output stall_request;
  input [31:0] w_address;
  input [31:0] w_load_data;
  input [2:0] w_load_mask;
  output [31:0] w_load_result;
  wire [65:0] wrbuf_din;
  wire [29:0] wrbuf_din_adr;
  wire [31:0] wrbuf_din_dat_w;
  wire [3:0] wrbuf_din_sel;
  wire [65:0] wrbuf_dout;
  wire [29:0] wrbuf_dout_adr;
  wire [31:0] wrbuf_dout_dat_w;
  wire [3:0] wrbuf_dout_sel;
  wire wrbuf_re;
  wire wrbuf_we;
  output writable;
  input [31:0] x_address;
  output [3:0] x_dbus_sel;
  output x_dcache_select;
  input x_load;
  input [2:0] x_mask;
  input x_stall;
  input x_store;
  output [31:0] x_store_data;
  input [31:0] x_store_operand;
  \anonymous$1  \$1  (
    .w_address(w_address),
    .w_load_data(w_load_data),
    .w_load_mask(w_load_mask),
    .w_load_result(w_load_result),
    .x_address(x_address),
    .x_dbus_sel(x_dbus_sel),
    .x_mask(x_mask),
    .x_store_data(x_store_data),
    .x_store_operand(x_store_operand)
  );
  assign \$99  = ~ x_stall;
  assign \$101  = \$97  & \$99 ;
  assign \$103  = dbus_ack | dbus_err;
  assign \$105  = dbus_cti == 3'h7;
  assign \$107  = ~ x_dcache_select;
  assign \$10  = ~ dbus_we;
  assign \$109  = x_store & \$107 ;
  assign \$111  = ~ x_stall;
  assign \$113  = \$109  & \$111 ;
  assign \$115  = ~ x_dcache_select;
  assign \$117  = x_load & \$115 ;
  assign \$119  = ~ x_stall;
  assign \$121  = \$117  & \$119 ;
  assign \$123  = dbus_ack | dbus_err;
  assign \$125  = dbus_cti == 3'h7;
  assign \$127  = ~ x_dcache_select;
  assign \$12  = dbus_cyc & \$10 ;
  assign \$129  = x_store & \$127 ;
  assign \$131  = ~ x_stall;
  assign \$133  = \$129  & \$131 ;
  assign \$135  = ~ x_dcache_select;
  assign \$137  = x_load & \$135 ;
  assign \$139  = ~ x_stall;
  assign \$141  = \$137  & \$139 ;
  assign \$143  = dbus_ack | dbus_err;
  assign \$145  = dbus_cti == 3'h7;
  assign \$147  = ~ x_dcache_select;
  assign \$14  = \$12  & dbus_ack;
  assign \$149  = x_store & \$147 ;
  assign \$151  = ~ x_stall;
  assign \$153  = \$149  & \$151 ;
  assign \$155  = ~ x_dcache_select;
  assign \$157  = x_load & \$155 ;
  assign \$159  = ~ x_stall;
  assign \$161  = \$157  & \$159 ;
  assign \$163  = dbus_ack | dbus_err;
  assign \$165  = dbus_cti == 3'h7;
  assign \$167  = ~ x_dcache_select;
  assign \$16  = x_address >= 1'h0;
  assign \$169  = x_store & \$167 ;
  assign \$171  = ~ x_stall;
  assign \$173  = \$169  & \$171 ;
  assign \$175  = ~ x_dcache_select;
  assign \$177  = x_load & \$175 ;
  assign \$179  = ~ x_stall;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = dbus_ack | dbus_err;
  assign \$185  = ~ x_dcache_select;
  assign \$187  = x_store & \$185 ;
  assign \$18  = x_address < 32'd2147483648;
  assign \$189  = ~ x_stall;
  assign \$191  = \$187  & \$189 ;
  assign \$193  = ~ x_dcache_select;
  assign \$195  = x_load & \$193 ;
  assign \$197  = ~ x_stall;
  assign \$199  = \$195  & \$197 ;
  assign \$201  = ~ x_dcache_select;
  assign \$203  = x_store & \$201 ;
  assign \$205  = ~ x_stall;
  assign \$207  = \$203  & \$205 ;
  assign \$20  = \$16  & \$18 ;
  assign \$209  = ~ x_dcache_select;
  assign \$211  = x_load & \$209 ;
  assign \$213  = ~ x_stall;
  assign \$215  = \$211  & \$213 ;
  assign \$217  = ~ x_dcache_select;
  assign \$219  = x_store & \$217 ;
  assign \$221  = ~ x_stall;
  assign \$223  = \$219  & \$221 ;
  assign \$225  = ~ x_dcache_select;
  assign \$227  = x_load & \$225 ;
  assign \$22  = m_dcache_select ? dcache_s2_dat_r : dbus_dat_r;
  assign \$229  = ~ x_stall;
  assign \$231  = \$227  & \$229 ;
  assign \$234  = dcache_s2_address[2:0] - 1'h1;
  assign \$24  = m_store & m_dcache_select;
  assign \$26  = ~ m_stall;
  assign \$28  = \$24  & \$26 ;
  assign \$2  = m_load & m_dcache_select;
  assign \$30  = ~ readable;
  assign \$33  = dbus_cyc & dbus_we;
  assign \$32  = ~ \$33 ;
  assign \$36  = \$30  & \$32 ;
  assign \$39  = dbus_adr[2:0] + 1'h1;
  assign \$42  = next_offset == last_offset;
  assign \$41  = \$42  ? 3'h7 : 3'h2;
  assign \$45  = dbus_adr[2:0] == last_offset;
  assign \$47  = ~ x_dcache_select;
  assign \$4  = m_store & m_dcache_select;
  assign \$49  = x_store & \$47 ;
  assign \$51  = ~ x_stall;
  assign \$53  = \$49  & \$51 ;
  assign \$55  = ~ x_dcache_select;
  assign \$57  = x_load & \$55 ;
  assign \$59  = ~ x_stall;
  assign \$61  = \$57  & \$59 ;
  assign \$63  = dbus_ack | dbus_err;
  assign \$65  = dbus_cti == 3'h7;
  assign \$67  = ~ x_dcache_select;
  assign \$69  = x_store & \$67 ;
  assign \$71  = ~ x_stall;
  assign \$73  = \$69  & \$71 ;
  assign \$75  = ~ x_dcache_select;
  assign \$77  = x_load & \$75 ;
  assign \$7  = m_dbus_sel == 1'h0;
  assign \$79  = ~ x_stall;
  assign \$81  = \$77  & \$79 ;
  assign \$83  = dbus_ack | dbus_err;
  assign \$85  = dbus_cti == 3'h7;
  assign \$87  = ~ x_dcache_select;
  assign \$6  = \$7  ? 4'hf : m_dbus_sel;
  assign \$89  = x_store & \$87 ;
  assign \$91  = ~ x_stall;
  assign \$93  = \$89  & \$91 ;
  assign \$95  = ~ x_dcache_select;
  assign \$97  = x_load & \$95 ;
  always @(posedge clk)
      last_offset <= \$next\last_offset ;
  always @(posedge clk)
      dbus_dat_w <= \$next\dbus_dat_w ;
  always @(posedge clk)
      m_bus_error <= \$next\m_bus_error ;
  always @(posedge clk)
      dbus_cti <= \$next\dbus_cti ;
  always @(posedge clk)
      dbus_adr <= \$next\dbus_adr ;
  always @(posedge clk)
      dbus_we <= \$next\dbus_we ;
  always @(posedge clk)
      dbus_sel <= \$next\dbus_sel ;
  always @(posedge clk)
      dbus_stb <= \$next\dbus_stb ;
  always @(posedge clk)
      dbus_cyc <= \$next\dbus_cyc ;
  dcache dcache (
    .clk(clk),
    .flush(flush),
    .last_refill(dcache_last_refill),
    .refill_address(dcache_refill_address),
    .refill_data(dcache_refill_data),
    .refill_ready(dcache_refill_ready),
    .refill_request(refill_request),
    .refill_valid(dcache_refill_valid),
    .rst(rst),
    .s1_address(dcache_s1_address),
    .s1_stall(dcache_s1_stall),
    .s2_address(dcache_s2_address),
    .s2_dat_r(dcache_s2_dat_r),
    .s2_dat_w(dcache_s2_dat_w),
    .s2_re(dcache_s2_re),
    .s2_sel(dcache_s2_sel),
    .s2_stall(s2_stall),
    .s2_we(dcache_s2_we),
    .stall_request(stall_request)
  );
  wrbuf wrbuf (
    .clk(clk),
    .din(wrbuf_din),
    .dout(wrbuf_dout),
    .re(wrbuf_re),
    .readable(readable),
    .replace(replace),
    .rst(rst),
    .we(wrbuf_we),
    .writable(writable)
  );
  always @* begin
    \$next\dcache_s1_address  = 30'h00000000;
    \$next\dcache_s1_address  = x_address[31:2];
  end
  always @* begin
    \$next\dcache_s1_stall  = 1'h0;
    \$next\dcache_s1_stall  = x_stall;
  end
  always @* begin
    \$next\x_dcache_select  = 1'h0;
    \$next\x_dcache_select  = \$20 ;
  end
  always @* begin
    \$next\m_load_data  = 32'd0;
    \$next\m_load_data  = \$22 ;
  end
  always @* begin
    \$next\wrbuf_din_adr  = 30'h00000000;
    \$next\wrbuf_din_adr  = m_address[31:2];
  end
  always @* begin
    \$next\wrbuf_din_sel  = 4'h0;
    \$next\wrbuf_din_sel  = m_dbus_sel;
  end
  always @* begin
    \$next\wrbuf_din_dat_w  = 32'd0;
    \$next\wrbuf_din_dat_w  = m_store_data;
  end
  always @* begin
    \$next\wrbuf_din  = 66'h00000000000000000;
    \$next\wrbuf_din  = { wrbuf_din_dat_w, wrbuf_din_sel, wrbuf_din_adr };
  end
  always @* begin
    \$next\wrbuf_dout_adr  = 30'h00000000;
    \$next\wrbuf_dout_sel  = 4'h0;
    \$next\wrbuf_dout_dat_w  = 32'd0;
    { \$next\wrbuf_dout_dat_w , \$next\wrbuf_dout_sel , \$next\wrbuf_dout_adr  } = wrbuf_dout;
  end
  always @* begin
    \$next\wrbuf_we  = 1'h0;
    \$next\wrbuf_we  = \$28 ;
  end
  always @* begin
    \$next\dcache_s2_address  = 30'h00000000;
    \$next\dcache_s2_address  = m_address[31:2];
  end
  always @* begin
    \$next\dcache_refill_ready  = 1'h0;
    \$next\dcache_refill_ready  = \$36 ;
  end
  always @* begin
    \$next\next_offset  = 3'h0;
    \$next\next_offset  = \$38 [2:0];
  end
  always @* begin
    \$next\next_cti  = 3'h0;
    \$next\next_cti  = \$41 ;
  end
  always @* begin
    \$next\dcache_last_refill  = 1'h0;
    \$next\dcache_last_refill  = \$45 ;
  end
  always @* begin
    \$next\dbus_bte  = 2'h0;
    \$next\dbus_bte  = 2'h2;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\dbus_cyc  = dbus_cyc;
    casez ({ \$61 , \$53 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$63 )
            1'h1:
                casez (\$65 )
                  1'h1:
                      \$next\dbus_cyc  = 1'h0;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_cyc  = 1'h1;
      5'bzz1zz:
          \$next\dbus_cyc  = 1'h1;
      5'bz1zzz:
          \$next\dbus_cyc  = 1'h1;
      5'h1z:
          \$next\dbus_cyc  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_cyc  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus_stb  = dbus_stb;
    casez ({ \$81 , \$73 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$83 )
            1'h1:
                casez (\$85 )
                  1'h1:
                      \$next\dbus_stb  = 1'h0;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_stb  = 1'h1;
      5'bzz1zz:
          \$next\dbus_stb  = 1'h1;
      5'bz1zzz:
          \$next\dbus_stb  = 1'h1;
      5'h1z:
          \$next\dbus_stb  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_stb  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus_sel  = dbus_sel;
    casez ({ \$101 , \$93 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$103 )
            1'h1:
                casez (\$105 )
                  1'h1:
                      \$next\dbus_sel  = 4'h0;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_sel  = wrbuf_dout_sel;
      5'bzz1zz:
          /* empty */;
      5'bz1zzz:
          \$next\dbus_sel  = x_dbus_sel;
      5'h1z:
          \$next\dbus_sel  = x_dbus_sel;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_sel  = 4'h0;
    endcase
  end
  always @* begin
    \$next\dbus_we  = dbus_we;
    casez ({ \$121 , \$113 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$123 )
            1'h1:
                casez (\$125 )
                  1'h1:
                      \$next\dbus_we  = 1'h0;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_we  = 1'h1;
      5'bzz1zz:
          /* empty */;
      5'bz1zzz:
          \$next\dbus_we  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_we  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus_adr  = dbus_adr;
    casez ({ \$141 , \$133 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$143 )
            1'h1:
                casez (\$145 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\dbus_adr [2:0] = next_offset;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_adr  = wrbuf_dout_adr;
      5'bzz1zz:
          \$next\dbus_adr  = dcache_s2_address;
      5'bz1zzz:
          \$next\dbus_adr  = x_address[31:2];
      5'h1z:
          \$next\dbus_adr  = x_address[31:2];
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_adr  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\dcache_s2_re  = 1'h0;
    \$next\dcache_s2_re  = \$2 ;
  end
  always @* begin
    \$next\dbus_cti  = dbus_cti;
    casez ({ \$161 , \$153 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$163 )
            1'h1:
                casez (\$165 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\dbus_cti  = next_cti;
                endcase
          endcase
      5'bzzz1z:
          \$next\dbus_cti  = 3'h7;
      5'bzz1zz:
          \$next\dbus_cti  = 3'h2;
      5'bz1zzz:
          \$next\dbus_cti  = 3'h7;
      5'h1z:
          \$next\dbus_cti  = 3'h7;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_cti  = 3'h0;
    endcase
  end
  always @* begin
    \$next\m_bus_error  = m_bus_error;
    casez ({ \$181 , \$173 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          casez (\$183 )
            1'h1:
                \$next\m_bus_error  = dbus_err;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\m_bus_error  = 1'h0;
    endcase
  end
  always @* begin
    \$next\wrbuf_re  = 1'h0;
    casez ({ \$199 , \$191 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          /* empty */;
      5'bzzz1z:
          \$next\wrbuf_re  = 1'h1;
    endcase
  end
  always @* begin
    \$next\dbus_dat_w  = dbus_dat_w;
    casez ({ \$215 , \$207 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          /* empty */;
      5'bzzz1z:
          \$next\dbus_dat_w  = wrbuf_dout_dat_w;
      5'bzz1zz:
          /* empty */;
      5'bz1zzz:
          \$next\dbus_dat_w  = x_store_data;
    endcase
    casez (rst)
      1'h1:
          \$next\dbus_dat_w  = 32'd0;
    endcase
  end
  always @* begin
    \$next\last_offset  = last_offset;
    casez ({ \$231 , \$223 , refill_request, readable, dbus_cyc })
      5'bzzzz1:
          /* empty */;
      5'bzzz1z:
          /* empty */;
      5'bzz1zz:
          \$next\last_offset  = \$233 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\last_offset  = 3'h0;
    endcase
  end
  always @* begin
    \$next\dcache_s2_we  = 1'h0;
    \$next\dcache_s2_we  = \$4 ;
  end
  always @* begin
    \$next\dcache_s2_sel  = 4'h0;
    \$next\dcache_s2_sel  = \$6 ;
  end
  always @* begin
    \$next\dcache_s2_dat_w  = 32'd0;
    \$next\dcache_s2_dat_w  = m_store_data;
  end
  always @* begin
    \$next\dcache_refill_address  = 30'h00000000;
    \$next\dcache_refill_address  = dbus_adr;
  end
  always @* begin
    \$next\dcache_refill_valid  = 1'h0;
    \$next\dcache_refill_valid  = \$14 ;
  end
  always @* begin
    \$next\dcache_refill_data  = 32'd0;
    \$next\dcache_refill_data  = dbus_dat_r;
  end
  assign \$38  = \$39 ;
  assign \$233  = \$234 ;
  assign wrbuf_re = \$next\wrbuf_re ;
  assign dbus_bte = \$next\dbus_bte ;
  assign dcache_last_refill = \$next\dcache_last_refill ;
  assign next_cti = \$next\next_cti ;
  assign next_offset = \$next\next_offset ;
  assign dcache_refill_ready = \$next\dcache_refill_ready ;
  assign wrbuf_we = \$next\wrbuf_we ;
  assign wrbuf_dout_adr = \$next\wrbuf_dout_adr ;
  assign wrbuf_dout_sel = \$next\wrbuf_dout_sel ;
  assign wrbuf_dout_dat_w = \$next\wrbuf_dout_dat_w ;
  assign wrbuf_din = \$next\wrbuf_din ;
  assign wrbuf_din_dat_w = \$next\wrbuf_din_dat_w ;
  assign wrbuf_din_sel = \$next\wrbuf_din_sel ;
  assign wrbuf_din_adr = \$next\wrbuf_din_adr ;
  assign m_load_data = \$next\m_load_data ;
  assign x_dcache_select = \$next\x_dcache_select ;
  assign dcache_refill_data = \$next\dcache_refill_data ;
  assign dcache_refill_valid = \$next\dcache_refill_valid ;
  assign dcache_refill_address = \$next\dcache_refill_address ;
  assign dcache_s2_dat_w = \$next\dcache_s2_dat_w ;
  assign dcache_s2_sel = \$next\dcache_s2_sel ;
  assign dcache_s2_we = \$next\dcache_s2_we ;
  assign dcache_s2_re = \$next\dcache_s2_re ;
  assign dcache_s2_address = \$next\dcache_s2_address ;
  assign dcache_s1_stall = \$next\dcache_s1_stall ;
  assign dcache_s1_address = \$next\dcache_s1_address ;
endmodule

module m(kill, stall, stall_request, m_branch_predict_taken, m_branch_taken, ibus_cyc, m_load, m_dcache_select, dbus_cyc, dbus_ack, m_store, writable, readable, \stall_request$1 , rst, clk, \valid$2 , \stall$3 , \valid$4 , \kill$5 , \stall$6 , valid);
  wire \$11 ;
  wire \$13 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$7 ;
  wire \$9 ;
  reg \$next\kill$15 ;
  reg \$next\kill$5 ;
  reg \$next\stall$3 ;
  reg \$next\stall$6 ;
  reg \$next\valid$2 ;
  reg \$next\valid$4 ;
  reg \$verilog_initial_trigger  = 1'h0;
  input clk;
  input dbus_ack;
  input dbus_cyc;
  input ibus_cyc;
  input kill;
  wire \kill$15 ;
  output \kill$5 ;
  input m_branch_predict_taken;
  input m_branch_taken;
  input m_dcache_select;
  input m_load;
  input m_store;
  input readable;
  input rst;
  input stall;
  output \stall$3 ;
  output \stall$6 ;
  input stall_request;
  input \stall_request$1 ;
  input valid;
  output \valid$2 ;
  output \valid$4 ;
  reg \valid$4  = 1'h0;
  input writable;
  assign \$9  = valid & \$7 ;
  assign \$11  = ~ \stall$6 ;
  assign \$13  = ~ stall;
  assign \$16  = \$13  | \kill$15 ;
  assign \$18  = m_branch_predict_taken != m_branch_taken;
  assign \$20  = stall_request & \$18 ;
  assign \$22  = 1'h0 | \$20 ;
  assign \$24  = ibus_cyc & m_branch_taken;
  assign \$26  = \$22  | \$24 ;
  assign \$28  = ~ m_dcache_select;
  assign \$30  = m_load & \$28 ;
  assign \$32  = \$30  & dbus_cyc;
  assign \$34  = ~ dbus_ack;
  assign \$36  = \$32  & \$34 ;
  assign \$38  = \$26  | \$36 ;
  assign \$40  = m_store & m_dcache_select;
  assign \$42  = ~ writable;
  assign \$44  = \$40  & \$42 ;
  assign \$46  = \$38  | \$44 ;
  assign \$48  = m_store | m_load;
  assign \$50  = ~ m_dcache_select;
  assign \$52  = \$48  & \$50 ;
  assign \$54  = \$52  & readable;
  assign \$56  = \$46  | \$54 ;
  assign \$58  = \$56  | \stall_request$1 ;
  assign \$60  = \$58  | stall;
  assign \$7  = ~ kill;
  always @(posedge clk)
      \valid$4  <= \$next\valid$4 ;
  always @* begin
    \$next\valid$2  = 1'h0;
    \$next\valid$2  = \$9 ;
  end
  always @* begin
    \$next\stall$3  = 1'h0;
    \$next\stall$3  = \stall$6 ;
  end
  always @* begin
    \$next\valid$4  = \valid$4 ;
    casez ({ \$16 , \$11  })
      2'bz1:
          \$next\valid$4  = \valid$2 ;
      2'b1z:
          \$next\valid$4  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$4  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$5  = 1'h0;
    \$next\kill$5  = \kill$15 ;
  end
  always @* begin
    \$next\kill$15  = 1'h0;
    \$next\kill$15  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\stall$6  = 1'h0;
    \$next\stall$6  = \$60 ;
  end
  assign \stall$6  = \$next\stall$6 ;
  assign \kill$15  = \$next\kill$15 ;
  assign \kill$5  = \$next\kill$5 ;
  assign \stall$3  = \$next\stall$3 ;
  assign \valid$2  = \$next\valid$2 ;
endmodule

module minerva_cpu(ibus_dat_r, ibus_sel, ibus_ack, ibus_we, ibus_err, dbus_dat_r, dbus_ack, dbus_err, external_interrupt, timer_interrupt, rst, clk, s2_we, s2_sel, s2_dat_w, port_dat_w_uie, port_dat_w_sie, port_dat_w_wpri0, port_dat_w_upie, port_dat_w_spie, port_dat_w_wpri1, port_dat_w_spp, port_dat_w_wpri2, port_dat_w_mpp, port_dat_w_fs, port_dat_w_xs, port_dat_w_mprv, port_dat_w_sum, port_dat_w_mxr, port_dat_w_tvm, port_dat_w_tw, port_dat_w_tsr, port_dat_w_wpri3, port_dat_w_sd, port_we, port_dat_w_mode, port_dat_w_base, port_dat_w_usip, port_dat_w_ssip, port_dat_w_wiri0, port_dat_w_msip, port_dat_w_utip, port_dat_w_stip, port_dat_w_wiri1, port_dat_w_ueip, port_dat_w_seip, port_dat_w_wiri2, port_dat_w_wiri3, \port_we$1 , port_dat_w_usie, port_dat_w_ssie, \port_dat_w_wpri0$2 , port_dat_w_msie, port_dat_w_utie, port_dat_w_stie, \port_dat_w_wpri1$3 , port_dat_w_mtie, port_dat_w_ueie, port_dat_w_seie, \port_dat_w_wpri2$4 , port_dat_w_meie, \port_dat_w_wpri3$5 , \port_we$6 , port_dat_w_value, flush, s2_stall, replace, ibus_adr, ibus_bte, ibus_cti, ibus_cyc, \ibus_dat_w$7 , \ibus_sel$8 , ibus_stb, \ibus_we$9 , dbus_adr, dbus_bte, dbus_cti, dbus_cyc, dbus_dat_w, dbus_sel, dbus_stb, dbus_we, ibus_dat_w);
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire [2:0] \$151 ;
  wire [2:0] \$153 ;
  wire [31:0] \$155 ;
  wire [31:0] \$156 ;
  wire [31:0] \$158 ;
  wire [31:0] \$161 ;
  wire [31:0] \$163 ;
  wire [31:0] \$165 ;
  wire \$166 ;
  wire [31:0] \$169 ;
  wire [31:0] \$171 ;
  wire [3:0] \$173 ;
  wire [3:0] \$174 ;
  wire [3:0] \$176 ;
  wire [3:0] \$178 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$198 ;
  wire \$200 ;
  wire \$202 ;
  wire \$204 ;
  wire \$206 ;
  wire \$208 ;
  wire \$210 ;
  wire \$212 ;
  wire \$214 ;
  wire \$216 ;
  wire \$218 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$226 ;
  wire \$228 ;
  wire \$230 ;
  wire \$232 ;
  wire \$234 ;
  wire \$236 ;
  wire \$238 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire [33:0] \$266 ;
  wire [30:0] \$267 ;
  wire [33:0] \$269 ;
  wire [31:0] \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire [32:0] \$277 ;
  wire [32:0] \$278 ;
  wire \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$286 ;
  wire \$288 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire [31:0] \$298 ;
  wire \$300 ;
  wire \$302 ;
  wire \$304 ;
  wire \$306 ;
  wire \$308 ;
  wire \$310 ;
  wire \$312 ;
  wire \$314 ;
  wire \$316 ;
  wire \$318 ;
  wire \$320 ;
  wire \$322 ;
  wire \$324 ;
  wire \$326 ;
  wire \$328 ;
  wire \$330 ;
  wire \$332 ;
  wire \$334 ;
  wire \$336 ;
  wire \$338 ;
  wire \$340 ;
  wire \$342 ;
  wire \$344 ;
  wire \$346 ;
  wire \$348 ;
  wire \$350 ;
  wire \$352 ;
  wire \$354 ;
  wire \$356 ;
  wire \$358 ;
  wire \$360 ;
  wire \$362 ;
  wire \$364 ;
  wire \$366 ;
  wire \$368 ;
  wire \$370 ;
  wire \$372 ;
  wire \$374 ;
  wire \$376 ;
  wire \$378 ;
  wire \$380 ;
  wire \$382 ;
  wire \$384 ;
  wire \$386 ;
  wire \$388 ;
  wire [30:0] \$390 ;
  wire \$392 ;
  wire \$394 ;
  wire \$396 ;
  wire \$398 ;
  wire \$400 ;
  wire \$402 ;
  wire \$404 ;
  wire \$406 ;
  wire \$408 ;
  wire \$410 ;
  wire \$412 ;
  wire \$414 ;
  wire \$416 ;
  wire \$418 ;
  wire \$420 ;
  wire \$422 ;
  wire \$424 ;
  wire \$426 ;
  wire \$428 ;
  wire \$430 ;
  wire \$432 ;
  wire \$434 ;
  wire \$436 ;
  wire \$438 ;
  wire \$440 ;
  wire \$442 ;
  wire \$444 ;
  wire \$446 ;
  wire \$448 ;
  wire \$450 ;
  wire \$452 ;
  wire \$454 ;
  wire \$456 ;
  wire \$458 ;
  wire \$460 ;
  wire \$462 ;
  wire \$464 ;
  wire \$466 ;
  wire \$468 ;
  wire \$470 ;
  wire \$472 ;
  wire \$474 ;
  wire \$476 ;
  wire \$478 ;
  wire \$480 ;
  wire \$482 ;
  wire \$484 ;
  wire \$486 ;
  wire \$488 ;
  wire \$490 ;
  wire \$492 ;
  wire \$494 ;
  wire \$496 ;
  wire \$498 ;
  wire \$500 ;
  wire \$502 ;
  wire \$504 ;
  wire \$506 ;
  wire \$508 ;
  wire \$510 ;
  wire \$512 ;
  wire \$514 ;
  wire \$516 ;
  wire \$518 ;
  wire \$520 ;
  wire \$522 ;
  wire \$524 ;
  wire \$526 ;
  wire [30:0] \$528 ;
  wire [3:0] \$529 ;
  wire \$532 ;
  wire \$534 ;
  wire [32:0] \$536 ;
  wire [32:0] \$537 ;
  wire \$539 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire \$547 ;
  wire [32:0] \$549 ;
  wire [32:0] \$550 ;
  wire [33:0] \$552 ;
  wire [30:0] \$553 ;
  wire [33:0] \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$571 ;
  wire \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  reg \$next\a_payload_branch_predict_taken ;
  reg \$next\a_payload_branch_taken ;
  reg \$next\a_stall ;
  reg \$next\a_valid ;
  reg \$next\adder_op ;
  reg [31:0] \$next\adder_src1 ;
  reg [31:0] \$next\adder_src2 ;
  reg \$next\bp_d_branch ;
  reg \$next\bp_d_jump ;
  reg [31:0] \$next\bp_d_offset ;
  reg [29:0] \$next\bp_d_pc ;
  reg \$next\bp_d_rs1_re ;
  reg [31:0] \$next\bp_d_src1 ;
  reg \$next\bu_cmp_carry ;
  reg \$next\bu_cmp_negative ;
  reg \$next\bu_cmp_overflow ;
  reg \$next\bu_cmp_zero ;
  reg [2:0] \$next\bu_condition ;
  reg [30:0] \$next\csrf_port_dat_w_ecode ;
  reg \$next\csrf_port_dat_w_interrupt ;
  reg \$next\csrf_port_dat_w_meip ;
  reg \$next\csrf_port_dat_w_mie ;
  reg \$next\csrf_port_dat_w_mpie ;
  reg \$next\csrf_port_dat_w_mtip ;
  reg [31:0] \$next\csrf_port_dat_w_value ;
  reg [31:0] \$next\csrf_port_dat_w_value$37 ;
  reg \$next\csrf_port_we ;
  reg \$next\csrf_port_we$33 ;
  reg \$next\csrf_port_we$34 ;
  reg \$next\csrf_port_we$35 ;
  reg \$next\csrf_port_we$36 ;
  reg [11:0] \$next\csrf_rp_addr ;
  reg [11:0] \$next\csrf_wp_addr ;
  reg [31:0] \$next\csrf_wp_data ;
  reg \$next\csrf_wp_en ;
  reg \$next\d_branch_predict_taken ;
  reg [31:0] \$next\d_branch_target ;
  reg \$next\d_kill ;
  reg \$next\d_m_lock ;
  reg \$next\d_payload_illegal ;
  reg [31:0] \$next\d_src1 ;
  reg [31:0] \$next\d_src2 ;
  reg \$next\d_stall ;
  reg \$next\d_valid ;
  reg \$next\d_x_lock ;
  reg [29:0] \$next\dbus_adr ;
  reg [1:0] \$next\dbus_bte ;
  reg [2:0] \$next\dbus_cti ;
  reg \$next\dbus_cyc ;
  reg [31:0] \$next\dbus_dat_w ;
  reg [3:0] \$next\dbus_sel ;
  reg \$next\dbus_stb ;
  reg \$next\dbus_we ;
  reg \$next\dcache_stall_request ;
  reg [31:0] \$next\decoder_instruction ;
  reg [15:0] \$next\exception_pe_i ;
  reg \$next\f_kill ;
  reg \$next\f_payload_branch_predict_taken ;
  reg \$next\f_stall ;
  reg \$next\f_valid ;
  reg [4:0] \$next\gprf_rp1_addr ;
  reg [4:0] \$next\gprf_rp2_addr ;
  reg [4:0] \$next\gprf_wp_addr ;
  reg [31:0] \$next\gprf_wp_data ;
  reg \$next\gprf_wp_en ;
  reg [29:0] \$next\ibus_adr ;
  reg [1:0] \$next\ibus_bte ;
  reg [2:0] \$next\ibus_cti ;
  reg \$next\ibus_cyc ;
  reg [31:0] \$next\ibus_dat_w$7 ;
  reg [3:0] \$next\ibus_sel$8 ;
  reg \$next\ibus_stb ;
  reg \$next\ibus_we$9 ;
  reg \$next\ifu_a_stall ;
  reg \$next\ifu_d_branch_predict_taken ;
  reg [29:0] \$next\ifu_d_branch_target ;
  reg [29:0] \$next\ifu_f_pc ;
  reg \$next\ifu_f_stall ;
  reg \$next\ifu_f_valid ;
  reg \$next\ifu_flush ;
  reg \$next\ifu_ibus_ack ;
  reg [31:0] \$next\ifu_ibus_dat_r ;
  reg \$next\ifu_ibus_err ;
  reg [29:0] \$next\ifu_m_branch_target ;
  reg \$next\ifu_refill_ready ;
  reg [29:0] \$next\ifu_x_pc ;
  reg [15:0] \$next\interrupt_pe_i ;
  reg [2:0] \$next\logic_op ;
  reg [31:0] \$next\logic_src1 ;
  reg [31:0] \$next\logic_src2 ;
  reg \$next\lsu_dbus_ack ;
  reg [31:0] \$next\lsu_dbus_dat_r ;
  reg \$next\lsu_dbus_err ;
  reg [31:0] \$next\lsu_m_address ;
  reg [3:0] \$next\lsu_m_dbus_sel ;
  reg \$next\lsu_m_stall ;
  reg [31:0] \$next\lsu_m_store_data ;
  reg [31:0] \$next\lsu_w_address ;
  reg [31:0] \$next\lsu_w_load_data ;
  reg [2:0] \$next\lsu_w_load_mask ;
  reg [31:0] \$next\lsu_x_address ;
  reg [2:0] \$next\lsu_x_mask ;
  reg \$next\lsu_x_stall ;
  reg [31:0] \$next\lsu_x_store_operand ;
  reg \$next\m_kill ;
  reg \$next\m_m_branch_predict_taken ;
  reg \$next\m_m_branch_taken ;
  reg \$next\m_m_dcache_select ;
  reg \$next\m_m_load ;
  reg \$next\m_m_store ;
  reg \$next\m_raw_csr ;
  reg \$next\m_raw_rs1 ;
  reg \$next\m_raw_rs2 ;
  reg [31:0] \$next\m_result ;
  reg \$next\m_stall ;
  reg \$next\m_valid ;
  reg \$next\payload_adder_sub ;
  reg \$next\payload_adder_sub$58 ;
  reg \$next\payload_branch ;
  reg \$next\payload_branch$65 ;
  reg \$next\payload_branch_predict_taken ;
  reg \$next\payload_branch_predict_taken$100 ;
  reg \$next\payload_branch_taken ;
  reg [31:0] \$next\payload_branch_target ;
  reg [31:0] \$next\payload_branch_target$66 ;
  reg [31:0] \$next\payload_branch_target$98 ;
  reg [31:0] \$next\payload_branch_target$99 ;
  reg \$next\payload_bus_error ;
  reg \$next\payload_bus_error$43 ;
  reg \$next\payload_bus_error$71 ;
  reg \$next\payload_bus_error$72 ;
  reg \$next\payload_bypass_m ;
  reg \$next\payload_bypass_m$54 ;
  reg \$next\payload_bypass_m$82 ;
  reg \$next\payload_bypass_m$83 ;
  reg \$next\payload_bypass_x ;
  reg \$next\payload_bypass_x$53 ;
  reg \$next\payload_compare ;
  reg \$next\payload_compare$64 ;
  reg \$next\payload_compare$95 ;
  reg \$next\payload_compare$96 ;
  reg \$next\payload_condition_met ;
  reg \$next\payload_condition_met$97 ;
  reg \$next\payload_csr ;
  reg \$next\payload_csr$68 ;
  reg [11:0] \$next\payload_csr_adr ;
  reg [11:0] \$next\payload_csr_adr$101 ;
  reg [11:0] \$next\payload_csr_adr$102 ;
  reg [11:0] \$next\payload_csr_adr$127 ;
  reg [11:0] \$next\payload_csr_adr$128 ;
  reg [11:0] \$next\payload_csr_adr$69 ;
  reg [31:0] \$next\payload_csr_result ;
  reg [31:0] \$next\payload_csr_result$105 ;
  reg [31:0] \$next\payload_csr_result$131 ;
  reg [31:0] \$next\payload_csr_result$132 ;
  reg \$next\payload_csr_we ;
  reg \$next\payload_csr_we$103 ;
  reg \$next\payload_csr_we$104 ;
  reg \$next\payload_csr_we$129 ;
  reg \$next\payload_csr_we$130 ;
  reg \$next\payload_csr_we$70 ;
  reg [3:0] \$next\payload_dbus_sel ;
  reg [3:0] \$next\payload_dbus_sel$93 ;
  reg \$next\payload_dcache_select ;
  reg \$next\payload_dcache_select$87 ;
  reg \$next\payload_direction ;
  reg \$next\payload_direction$61 ;
  reg \$next\payload_ebreak ;
  reg \$next\payload_ebreak$74 ;
  reg \$next\payload_ecall ;
  reg \$next\payload_ecall$73 ;
  reg \$next\payload_exception ;
  reg \$next\payload_exception$108 ;
  reg \$next\payload_exception$125 ;
  reg \$next\payload_exception$126 ;
  reg \$next\payload_fence_i ;
  reg \$next\payload_fence_i$67 ;
  reg [2:0] \$next\payload_funct3 ;
  reg [2:0] \$next\payload_funct3$55 ;
  reg \$next\payload_illegal ;
  reg [31:0] \$next\payload_immediate ;
  reg [31:0] \$next\payload_immediate$52 ;
  reg [31:0] \$next\payload_instruction ;
  reg [31:0] \$next\payload_instruction$42 ;
  reg \$next\payload_jump ;
  reg \$next\payload_jump$63 ;
  reg \$next\payload_load ;
  reg \$next\payload_load$120 ;
  reg \$next\payload_load$121 ;
  reg \$next\payload_load$56 ;
  reg \$next\payload_load$88 ;
  reg \$next\payload_load$89 ;
  reg [31:0] \$next\payload_load_data ;
  reg [31:0] \$next\payload_load_data$124 ;
  reg [2:0] \$next\payload_load_mask ;
  reg [2:0] \$next\payload_load_mask$122 ;
  reg [2:0] \$next\payload_load_mask$123 ;
  reg [2:0] \$next\payload_load_mask$90 ;
  reg \$next\payload_logic ;
  reg \$next\payload_logic$59 ;
  reg [30:0] \$next\payload_mcause_ecode ;
  reg [30:0] \$next\payload_mcause_ecode$109 ;
  reg [30:0] \$next\payload_mcause_ecode$135 ;
  reg [30:0] \$next\payload_mcause_ecode$137 ;
  reg \$next\payload_mcause_interrupt ;
  reg \$next\payload_mcause_interrupt$110 ;
  reg \$next\payload_mcause_interrupt$136 ;
  reg \$next\payload_mcause_interrupt$138 ;
  reg [31:0] \$next\payload_mepc_value ;
  reg [31:0] \$next\payload_mepc_value$111 ;
  reg [31:0] \$next\payload_mepc_value$139 ;
  reg [31:0] \$next\payload_mepc_value$140 ;
  reg \$next\payload_mret ;
  reg \$next\payload_mret$106 ;
  reg \$next\payload_mret$107 ;
  reg \$next\payload_mret$133 ;
  reg \$next\payload_mret$134 ;
  reg \$next\payload_mret$75 ;
  reg [30:0] \$next\payload_pc ;
  reg [29:0] \$next\payload_pc$112 ;
  reg [29:0] \$next\payload_pc$113 ;
  reg [30:0] \$next\payload_pc$39 ;
  reg [29:0] \$next\payload_pc$40 ;
  reg [29:0] \$next\payload_pc$41 ;
  reg [29:0] \$next\payload_pc$44 ;
  reg [29:0] \$next\payload_pc$45 ;
  reg [29:0] \$next\payload_pc$76 ;
  reg [29:0] \$next\payload_pc$77 ;
  reg [4:0] \$next\payload_rd ;
  reg [4:0] \$next\payload_rd$114 ;
  reg [4:0] \$next\payload_rd$115 ;
  reg [4:0] \$next\payload_rd$46 ;
  reg [4:0] \$next\payload_rd$78 ;
  reg [4:0] \$next\payload_rd$79 ;
  reg \$next\payload_rd_we ;
  reg \$next\payload_rd_we$116 ;
  reg \$next\payload_rd_we$117 ;
  reg \$next\payload_rd_we$48 ;
  reg \$next\payload_rd_we$80 ;
  reg \$next\payload_rd_we$81 ;
  reg [31:0] \$next\payload_result ;
  reg [31:0] \$next\payload_result$118 ;
  reg [31:0] \$next\payload_result$119 ;
  reg [31:0] \$next\payload_result$84 ;
  reg [4:0] \$next\payload_rs1 ;
  reg [4:0] \$next\payload_rs1$47 ;
  reg \$next\payload_rs1_re ;
  reg \$next\payload_rs1_re$49 ;
  reg \$next\payload_sext ;
  reg \$next\payload_sext$62 ;
  reg \$next\payload_shift ;
  reg \$next\payload_shift$60 ;
  reg \$next\payload_shift$85 ;
  reg \$next\payload_shift$86 ;
  reg [31:0] \$next\payload_src1 ;
  reg [31:0] \$next\payload_src1$50 ;
  reg [31:0] \$next\payload_src2 ;
  reg [31:0] \$next\payload_src2$51 ;
  reg \$next\payload_store ;
  reg \$next\payload_store$57 ;
  reg \$next\payload_store$91 ;
  reg \$next\payload_store$92 ;
  reg [31:0] \$next\payload_store_data ;
  reg [31:0] \$next\payload_store_data$94 ;
  reg \$next\shifter_x_direction ;
  reg \$next\shifter_x_sext ;
  reg [4:0] \$next\shifter_x_shamt ;
  reg [31:0] \$next\shifter_x_src1 ;
  reg \$next\shifter_x_stall ;
  reg \$next\w_kill ;
  reg \$next\w_raw_csr ;
  reg \$next\w_raw_rs1 ;
  reg \$next\w_raw_rs2 ;
  reg [31:0] \$next\w_result ;
  reg \$next\w_valid ;
  reg \$next\x_branch_taken ;
  reg [31:0] \$next\x_csr_result ;
  reg \$next\x_exception ;
  reg \$next\x_kill ;
  reg [31:0] \$next\x_mepc_value ;
  reg [29:0] \$next\x_mtvec_base ;
  reg [1:0] \$next\x_mtvec_mode ;
  reg \$next\x_raw_csr ;
  reg \$next\x_raw_rs1 ;
  reg \$next\x_raw_rs2 ;
  reg [31:0] \$next\x_result ;
  reg \$next\x_stall ;
  reg \$next\x_valid ;
  reg \$next\x_x_load ;
  reg \$next\x_x_store ;
  reg \$verilog_initial_trigger  = 1'h0;
  wire a_kill;
  wire a_payload_branch_predict_taken;
  wire a_payload_branch_taken;
  wire a_stall;
  wire \a_stall$12 ;
  wire a_valid;
  wire \a_valid$10 ;
  wire \a_valid$11 ;
  wire adder_carry;
  wire adder_op;
  wire adder_overflow;
  wire [31:0] adder_result;
  wire [31:0] adder_src1;
  wire [31:0] adder_src2;
  wire bp_d_branch;
  wire bp_d_branch_predict_taken;
  wire [31:0] bp_d_branch_target;
  wire bp_d_jump;
  wire [31:0] bp_d_offset;
  wire [29:0] bp_d_pc;
  wire bp_d_rs1_re;
  wire [31:0] bp_d_src1;
  wire bu_cmp_carry;
  wire bu_cmp_negative;
  wire bu_cmp_overflow;
  wire bu_cmp_zero;
  wire [2:0] bu_condition;
  wire bu_condition_met;
  input clk;
  wire [29:0] csrf_port_dat_r_base;
  wire csrf_port_dat_r_meie;
  wire csrf_port_dat_r_meip;
  wire csrf_port_dat_r_mie;
  wire [1:0] csrf_port_dat_r_mode;
  wire csrf_port_dat_r_mpie;
  wire csrf_port_dat_r_msie;
  wire csrf_port_dat_r_msip;
  wire csrf_port_dat_r_mtie;
  wire csrf_port_dat_r_mtip;
  wire [31:0] csrf_port_dat_r_value;
  wire [31:0] \csrf_port_dat_r_value$38 ;
  wire [30:0] csrf_port_dat_w_ecode;
  wire csrf_port_dat_w_interrupt;
  wire csrf_port_dat_w_meip;
  wire csrf_port_dat_w_mie;
  wire csrf_port_dat_w_mpie;
  wire csrf_port_dat_w_mtip;
  wire [31:0] csrf_port_dat_w_value;
  wire [31:0] \csrf_port_dat_w_value$37 ;
  wire csrf_port_we;
  wire \csrf_port_we$33 ;
  wire \csrf_port_we$34 ;
  wire \csrf_port_we$35 ;
  wire \csrf_port_we$36 ;
  wire [11:0] csrf_rp_addr;
  wire [31:0] csrf_rp_data;
  wire [11:0] csrf_wp_addr;
  wire [31:0] csrf_wp_data;
  wire csrf_wp_en;
  wire d_branch_predict_taken;
  wire [31:0] d_branch_target;
  wire d_kill;
  wire \d_kill$22 ;
  wire d_m_lock;
  reg d_payload_illegal = 1'h0;
  wire [31:0] d_src1;
  wire [31:0] d_src2;
  wire d_stall;
  wire \d_stall$20 ;
  wire \d_stall$23 ;
  wire d_valid;
  wire \d_valid$19 ;
  wire \d_valid$21 ;
  wire d_x_lock;
  input dbus_ack;
  output [29:0] dbus_adr;
  output [1:0] dbus_bte;
  output [2:0] dbus_cti;
  output dbus_cyc;
  input [31:0] dbus_dat_r;
  output [31:0] dbus_dat_w;
  input dbus_err;
  output [3:0] dbus_sel;
  output dbus_stb;
  output dbus_we;
  wire dcache_stall_request;
  wire decoder_adder_sub;
  wire decoder_auipc;
  wire decoder_branch;
  wire decoder_bypass_m;
  wire decoder_bypass_x;
  wire decoder_compare;
  wire decoder_csr;
  wire decoder_csr_we;
  wire decoder_direction;
  wire decoder_ebreak;
  wire decoder_ecall;
  wire decoder_fence_i;
  wire [2:0] decoder_funct3;
  wire decoder_illegal;
  wire [31:0] decoder_immediate;
  wire [31:0] decoder_instruction;
  wire decoder_jump;
  wire decoder_load;
  wire decoder_logic;
  wire decoder_lui;
  wire decoder_mret;
  wire [4:0] decoder_rd;
  wire decoder_rd_we;
  wire [4:0] decoder_rs1;
  wire decoder_rs1_re;
  wire [4:0] decoder_rs2;
  wire decoder_rs2_re;
  wire decoder_sext;
  wire decoder_shift;
  wire decoder_store;
  wire [15:0] exception_pe_i;
  wire exception_pe_n;
  wire [3:0] exception_pe_o;
  input [31:0] external_interrupt;
  wire f_kill;
  wire \f_kill$17 ;
  wire f_payload_branch_predict_taken;
  wire f_stall;
  wire \f_stall$15 ;
  wire \f_stall$18 ;
  wire f_valid;
  wire \f_valid$13 ;
  wire \f_valid$14 ;
  wire \f_valid$16 ;
  input flush;
  wire [4:0] gprf_rp1_addr;
  wire [31:0] gprf_rp1_data;
  wire [4:0] gprf_rp2_addr;
  wire [31:0] gprf_rp2_data;
  wire [4:0] gprf_wp_addr;
  wire [31:0] gprf_wp_data;
  wire gprf_wp_en;
  input ibus_ack;
  output [29:0] ibus_adr;
  output [1:0] ibus_bte;
  output [2:0] ibus_cti;
  output ibus_cyc;
  input [31:0] ibus_dat_r;
  input [31:0] ibus_dat_w;
  output [31:0] \ibus_dat_w$7 ;
  input ibus_err;
  input [3:0] ibus_sel;
  output [3:0] \ibus_sel$8 ;
  output ibus_stb;
  input ibus_we;
  output \ibus_we$9 ;
  wire [29:0] ifu_a_pc;
  wire ifu_a_stall;
  wire ifu_d_branch_predict_taken;
  wire [29:0] ifu_d_branch_target;
  wire ifu_f_bus_error;
  wire [31:0] ifu_f_instruction;
  wire [29:0] ifu_f_pc;
  wire ifu_f_stall;
  wire ifu_f_valid;
  wire ifu_flush;
  wire ifu_ibus_ack;
  wire [29:0] ifu_ibus_adr;
  wire [1:0] ifu_ibus_bte;
  wire [2:0] ifu_ibus_cti;
  wire ifu_ibus_cyc;
  wire [31:0] ifu_ibus_dat_r;
  wire ifu_ibus_err;
  wire ifu_ibus_stb;
  wire [29:0] ifu_m_branch_target;
  wire ifu_refill_ready;
  wire [29:0] ifu_x_pc;
  wire [15:0] interrupt_pe_i;
  wire interrupt_pe_n;
  wire [3:0] interrupt_pe_o;
  wire [2:0] logic_op;
  wire [31:0] logic_result;
  wire [31:0] logic_src1;
  wire [31:0] logic_src2;
  wire lsu_dbus_ack;
  wire [29:0] lsu_dbus_adr;
  wire [1:0] lsu_dbus_bte;
  wire [2:0] lsu_dbus_cti;
  wire lsu_dbus_cyc;
  wire [31:0] lsu_dbus_dat_r;
  wire [31:0] lsu_dbus_dat_w;
  wire lsu_dbus_err;
  wire [3:0] lsu_dbus_sel;
  wire lsu_dbus_stb;
  wire lsu_dbus_we;
  wire [31:0] lsu_m_address;
  wire [3:0] lsu_m_dbus_sel;
  wire [31:0] lsu_m_load_data;
  wire lsu_m_stall;
  wire [31:0] lsu_m_store_data;
  wire [31:0] lsu_w_address;
  wire [31:0] lsu_w_load_data;
  wire [2:0] lsu_w_load_mask;
  wire [31:0] lsu_w_load_result;
  wire [31:0] lsu_x_address;
  wire [3:0] lsu_x_dbus_sel;
  wire [2:0] lsu_x_mask;
  wire lsu_x_stall;
  wire [31:0] lsu_x_store_data;
  wire [31:0] lsu_x_store_operand;
  wire m_kill;
  wire \m_kill$30 ;
  wire m_m_branch_predict_taken;
  wire m_m_branch_taken;
  wire m_m_dcache_select;
  wire m_m_load;
  wire m_m_store;
  wire m_raw_csr;
  wire m_raw_rs1;
  wire m_raw_rs2;
  wire [31:0] m_result;
  wire m_stall;
  wire \m_stall$28 ;
  wire \m_stall$31 ;
  wire m_stall_request;
  wire m_valid;
  wire \m_valid$29 ;
  wire m_writable;
  wire payload_adder_sub;
  reg \payload_adder_sub$58  = 1'h0;
  wire payload_branch;
  reg \payload_branch$65  = 1'h0;
  reg payload_branch_predict_taken = 1'h0;
  reg \payload_branch_predict_taken$100  = 1'h0;
  reg payload_branch_taken = 1'h0;
  wire [31:0] payload_branch_target;
  reg [31:0] \payload_branch_target$66  = 32'd0;
  wire [31:0] \payload_branch_target$98 ;
  reg [31:0] \payload_branch_target$99  = 32'd0;
  wire payload_bus_error;
  reg \payload_bus_error$43  = 1'h0;
  wire \payload_bus_error$71 ;
  reg \payload_bus_error$72  = 1'h0;
  wire payload_bypass_m;
  reg \payload_bypass_m$54  = 1'h0;
  wire \payload_bypass_m$82 ;
  reg \payload_bypass_m$83  = 1'h0;
  wire payload_bypass_x;
  reg \payload_bypass_x$53  = 1'h0;
  wire payload_compare;
  reg \payload_compare$64  = 1'h0;
  wire \payload_compare$95 ;
  reg \payload_compare$96  = 1'h0;
  wire payload_condition_met;
  reg \payload_condition_met$97  = 1'h0;
  wire payload_csr;
  reg \payload_csr$68  = 1'h0;
  wire [11:0] payload_csr_adr;
  wire [11:0] \payload_csr_adr$101 ;
  reg [11:0] \payload_csr_adr$102  = 12'h000;
  wire [11:0] \payload_csr_adr$127 ;
  reg [11:0] \payload_csr_adr$128  = 12'h000;
  reg [11:0] \payload_csr_adr$69  = 12'h000;
  wire [31:0] payload_csr_result;
  reg [31:0] \payload_csr_result$105  = 32'd0;
  wire [31:0] \payload_csr_result$131 ;
  reg [31:0] \payload_csr_result$132  = 32'd0;
  wire payload_csr_we;
  wire \payload_csr_we$103 ;
  reg \payload_csr_we$104  = 1'h0;
  wire \payload_csr_we$129 ;
  reg \payload_csr_we$130  = 1'h0;
  reg \payload_csr_we$70  = 1'h0;
  wire [3:0] payload_dbus_sel;
  reg [3:0] \payload_dbus_sel$93  = 4'h0;
  wire payload_dcache_select;
  reg \payload_dcache_select$87  = 1'h0;
  wire payload_direction;
  reg \payload_direction$61  = 1'h0;
  wire payload_ebreak;
  reg \payload_ebreak$74  = 1'h0;
  wire payload_ecall;
  reg \payload_ecall$73  = 1'h0;
  wire payload_exception;
  reg \payload_exception$108  = 1'h0;
  wire \payload_exception$125 ;
  reg \payload_exception$126  = 1'h0;
  wire payload_fence_i;
  reg \payload_fence_i$67  = 1'h0;
  wire [2:0] payload_funct3;
  reg [2:0] \payload_funct3$55  = 3'h0;
  wire payload_illegal;
  wire [31:0] payload_immediate;
  reg [31:0] \payload_immediate$52  = 32'd0;
  wire [31:0] payload_instruction;
  reg [31:0] \payload_instruction$42  = 32'd0;
  wire payload_jump;
  reg \payload_jump$63  = 1'h0;
  wire payload_load;
  wire \payload_load$120 ;
  reg \payload_load$121  = 1'h0;
  reg \payload_load$56  = 1'h0;
  wire \payload_load$88 ;
  reg \payload_load$89  = 1'h0;
  wire [31:0] payload_load_data;
  reg [31:0] \payload_load_data$124  = 32'd0;
  wire [2:0] payload_load_mask;
  wire [2:0] \payload_load_mask$122 ;
  reg [2:0] \payload_load_mask$123  = 3'h0;
  reg [2:0] \payload_load_mask$90  = 3'h0;
  wire payload_logic;
  reg \payload_logic$59  = 1'h0;
  wire [30:0] payload_mcause_ecode;
  reg [30:0] \payload_mcause_ecode$109  = 31'h00000000;
  wire [30:0] \payload_mcause_ecode$135 ;
  reg [30:0] \payload_mcause_ecode$137  = 31'h00000000;
  wire payload_mcause_interrupt;
  reg \payload_mcause_interrupt$110  = 1'h0;
  wire \payload_mcause_interrupt$136 ;
  reg \payload_mcause_interrupt$138  = 1'h0;
  wire [31:0] payload_mepc_value;
  reg [31:0] \payload_mepc_value$111  = 32'd0;
  wire [31:0] \payload_mepc_value$139 ;
  reg [31:0] \payload_mepc_value$140  = 32'd0;
  wire payload_mret;
  wire \payload_mret$106 ;
  reg \payload_mret$107  = 1'h0;
  wire \payload_mret$133 ;
  reg \payload_mret$134  = 1'h0;
  reg \payload_mret$75  = 1'h0;
  wire [30:0] payload_pc;
  wire [29:0] \payload_pc$112 ;
  reg [29:0] \payload_pc$113  = 30'h00000000;
  reg [30:0] \payload_pc$39  = 31'h7fffffff;
  wire [29:0] \payload_pc$40 ;
  reg [29:0] \payload_pc$41  = 30'h00000000;
  wire [29:0] \payload_pc$44 ;
  reg [29:0] \payload_pc$45  = 30'h00000000;
  wire [29:0] \payload_pc$76 ;
  reg [29:0] \payload_pc$77  = 30'h00000000;
  wire [4:0] payload_rd;
  wire [4:0] \payload_rd$114 ;
  reg [4:0] \payload_rd$115  = 5'h00;
  reg [4:0] \payload_rd$46  = 5'h00;
  wire [4:0] \payload_rd$78 ;
  reg [4:0] \payload_rd$79  = 5'h00;
  wire payload_rd_we;
  wire \payload_rd_we$116 ;
  reg \payload_rd_we$117  = 1'h0;
  reg \payload_rd_we$48  = 1'h0;
  wire \payload_rd_we$80 ;
  reg \payload_rd_we$81  = 1'h0;
  wire [31:0] payload_result;
  wire [31:0] \payload_result$118 ;
  reg [31:0] \payload_result$119  = 32'd0;
  reg [31:0] \payload_result$84  = 32'd0;
  wire [4:0] payload_rs1;
  reg [4:0] \payload_rs1$47  = 5'h00;
  wire payload_rs1_re;
  reg \payload_rs1_re$49  = 1'h0;
  wire payload_sext;
  reg \payload_sext$62  = 1'h0;
  wire payload_shift;
  reg \payload_shift$60  = 1'h0;
  wire \payload_shift$85 ;
  reg \payload_shift$86  = 1'h0;
  wire [31:0] payload_src1;
  reg [31:0] \payload_src1$50  = 32'd0;
  wire [31:0] payload_src2;
  reg [31:0] \payload_src2$51  = 32'd0;
  wire payload_store;
  reg \payload_store$57  = 1'h0;
  wire \payload_store$91 ;
  reg \payload_store$92  = 1'h0;
  wire [31:0] payload_store_data;
  reg [31:0] \payload_store_data$94  = 32'd0;
  input [29:0] port_dat_w_base;
  input [1:0] port_dat_w_fs;
  input port_dat_w_meie;
  input [1:0] port_dat_w_mode;
  input [1:0] port_dat_w_mpp;
  input port_dat_w_mprv;
  input port_dat_w_msie;
  input port_dat_w_msip;
  input port_dat_w_mtie;
  input port_dat_w_mxr;
  input port_dat_w_sd;
  input port_dat_w_seie;
  input port_dat_w_seip;
  input port_dat_w_sie;
  input port_dat_w_spie;
  input port_dat_w_spp;
  input port_dat_w_ssie;
  input port_dat_w_ssip;
  input port_dat_w_stie;
  input port_dat_w_stip;
  input port_dat_w_sum;
  input port_dat_w_tsr;
  input port_dat_w_tvm;
  input port_dat_w_tw;
  input port_dat_w_ueie;
  input port_dat_w_ueip;
  input port_dat_w_uie;
  input port_dat_w_upie;
  input port_dat_w_usie;
  input port_dat_w_usip;
  input port_dat_w_utie;
  input port_dat_w_utip;
  input [31:0] port_dat_w_value;
  input port_dat_w_wiri0;
  input port_dat_w_wiri1;
  input port_dat_w_wiri2;
  input [19:0] port_dat_w_wiri3;
  input port_dat_w_wpri0;
  input \port_dat_w_wpri0$2 ;
  input port_dat_w_wpri1;
  input \port_dat_w_wpri1$3 ;
  input [1:0] port_dat_w_wpri2;
  input \port_dat_w_wpri2$4 ;
  input [7:0] port_dat_w_wpri3;
  input [19:0] \port_dat_w_wpri3$5 ;
  input [1:0] port_dat_w_xs;
  input port_we;
  input \port_we$1 ;
  input \port_we$6 ;
  input replace;
  input rst;
  input [31:0] s2_dat_w;
  input [3:0] s2_sel;
  input s2_stall;
  input s2_we;
  wire [31:0] shifter_m_result;
  wire shifter_x_direction;
  wire shifter_x_sext;
  wire [4:0] shifter_x_shamt;
  wire [31:0] shifter_x_src1;
  wire shifter_x_stall;
  input timer_interrupt;
  wire w_kill;
  wire w_raw_csr;
  wire w_raw_rs1;
  wire w_raw_rs2;
  wire [31:0] w_result;
  wire w_stall;
  wire w_valid;
  wire \w_valid$32 ;
  wire x_branch_taken;
  wire [31:0] x_csr_result;
  wire x_exception;
  wire x_kill;
  wire \x_kill$26 ;
  wire [31:0] x_mepc_value;
  wire [29:0] x_mtvec_base;
  wire [1:0] x_mtvec_mode;
  wire x_raw_csr;
  wire x_raw_rs1;
  wire x_raw_rs2;
  wire x_readable;
  wire x_refill_request;
  wire [31:0] x_result;
  wire x_stall;
  wire \x_stall$24 ;
  wire \x_stall$27 ;
  wire x_stall_request;
  wire x_valid;
  wire \x_valid$25 ;
  wire x_x_dcache_select;
  wire x_x_load;
  wire x_x_store;
  assign \$141  = payload_fence_i & \f_valid$13 ;
  assign \$143  = ~ dcache_stall_request;
  assign \$145  = d_branch_predict_taken & \d_valid$19 ;
  assign \$147  = a_payload_branch_taken & \a_valid$10 ;
  assign \$149  = a_payload_branch_predict_taken & \a_valid$10 ;
  assign \$151  = payload_funct3 | 3'h4;
  assign \$153  = payload_csr ? \$151  : payload_funct3;
  assign \$156  = + payload_rs1;
  assign \$158  = payload_funct3[2] ? \$156  : payload_src1;
  assign \$155  = ~ \$158 ;
  assign \$161  = + payload_rs1;
  assign \$163  = payload_funct3[2] ? \$161  : payload_src1;
  assign \$166  = payload_funct3[1] & payload_funct3[0];
  assign \$165  = \$166  ? \$155  : \$163 ;
  assign \$169  = payload_csr ? \$165  : payload_src1;
  assign \$171  = payload_store ? payload_immediate : payload_src2;
  assign \$174  = payload_funct3 <<< 1'h1;
  assign \$176  = + payload_funct3;
  assign \$178  = payload_compare ? \$174  : \$176 ;
  assign \$180  = payload_src1 == payload_src2;
  assign \$182  = \payload_load$88  & \a_valid$10 ;
  assign \$184  = \payload_store$91  & \a_valid$10 ;
  assign \$186  = ~ \x_stall$27 ;
  assign \$188  = payload_load & \f_valid$13 ;
  assign \$190  = payload_store & \f_valid$13 ;
  assign \$192  = payload_rd == decoder_rs1;
  assign \$194  = \$192  & payload_rd_we;
  assign \$196  = \$194  & \f_valid$13 ;
  assign \$198  = \payload_rd$78  == decoder_rs1;
  assign \$200  = \$198  & \payload_rd_we$80 ;
  assign \$202  = \$200  & \a_valid$10 ;
  assign \$204  = \payload_rd$114  == decoder_rs1;
  assign \$206  = \$204  & \payload_rd_we$116 ;
  assign \$208  = \$206  & \w_valid$32 ;
  assign \$210  = payload_rd == decoder_rs2;
  assign \$212  = \$210  & payload_rd_we;
  assign \$214  = \$212  & \f_valid$13 ;
  assign \$216  = \payload_rd$78  == decoder_rs2;
  assign \$218  = \$216  & \payload_rd_we$80 ;
  assign \$220  = \$218  & \a_valid$10 ;
  assign \$222  = \payload_rd$114  == decoder_rs2;
  assign \$224  = \$222  & \payload_rd_we$116 ;
  assign \$226  = \$224  & \w_valid$32 ;
  assign \$228  = payload_csr_adr == csrf_rp_addr;
  assign \$230  = \$228  & payload_csr_we;
  assign \$232  = \$230  & \f_valid$13 ;
  assign \$234  = \payload_csr_adr$101  == csrf_rp_addr;
  assign \$236  = \$234  & \payload_csr_we$103 ;
  assign \$238  = \$236  & \a_valid$10 ;
  assign \$240  = \payload_csr_adr$127  == csrf_rp_addr;
  assign \$242  = \$240  & \payload_csr_we$129 ;
  assign \$244  = \$242  & \w_valid$32 ;
  assign \$246  = ~ payload_bypass_x;
  assign \$248  = decoder_rs1_re & x_raw_rs1;
  assign \$250  = decoder_rs2_re & x_raw_rs2;
  assign \$252  = \$248  | \$250 ;
  assign \$254  = \$246  & \$252 ;
  assign \$256  = ~ \payload_bypass_m$82 ;
  assign \$258  = decoder_rs1_re & m_raw_rs1;
  assign \$260  = decoder_rs2_re & m_raw_rs2;
  assign \$262  = \$258  | \$260 ;
  assign \$264  = \$256  & \$262 ;
  assign \$267  = \payload_pc$44  + 1'h1;
  assign \$269  = \$267  <<< 2'h2;
  assign \$271  = + payload_condition_met;
  assign \$273  = decoder_rs1 == 1'h0;
  assign \$275  = decoder_rs1_re & \$273 ;
  assign \$278  = \payload_pc$40  <<< 2'h2;
  assign \$280  = ~ decoder_rs2_re;
  assign \$282  = decoder_rs2 == 1'h0;
  assign \$284  = payload_branch & bu_condition_met;
  assign \$286  = payload_jump | \$284 ;
  assign \$288  = payload_branch_target[1:0] != 1'h0;
  assign \$290  = x_branch_taken & \$288 ;
  assign \$292  = csrf_port_dat_r_msip & csrf_port_dat_r_msie;
  assign \$294  = csrf_port_dat_r_mtip & csrf_port_dat_r_mtie;
  assign \$296  = csrf_port_dat_r_meip & csrf_port_dat_r_meie;
  assign \$298  = external_interrupt & \csrf_port_dat_r_value$38 ;
  assign \$300  = \csrf_port_dat_w_value$37 [0] | \csrf_port_dat_w_value$37 [1];
  assign \$302  = \$300  | \csrf_port_dat_w_value$37 [2];
  assign \$304  = \$302  | \csrf_port_dat_w_value$37 [3];
  assign \$306  = \$304  | \csrf_port_dat_w_value$37 [4];
  assign \$308  = \$306  | \csrf_port_dat_w_value$37 [5];
  assign \$310  = \$308  | \csrf_port_dat_w_value$37 [6];
  assign \$312  = \$310  | \csrf_port_dat_w_value$37 [7];
  assign \$314  = \$312  | \csrf_port_dat_w_value$37 [8];
  assign \$316  = \$314  | \csrf_port_dat_w_value$37 [9];
  assign \$318  = \$316  | \csrf_port_dat_w_value$37 [10];
  assign \$320  = \$318  | \csrf_port_dat_w_value$37 [11];
  assign \$322  = \$320  | \csrf_port_dat_w_value$37 [12];
  assign \$324  = \$322  | \csrf_port_dat_w_value$37 [13];
  assign \$326  = \$324  | \csrf_port_dat_w_value$37 [14];
  assign \$328  = \$326  | \csrf_port_dat_w_value$37 [15];
  assign \$330  = \$328  | \csrf_port_dat_w_value$37 [16];
  assign \$332  = \$330  | \csrf_port_dat_w_value$37 [17];
  assign \$334  = \$332  | \csrf_port_dat_w_value$37 [18];
  assign \$336  = \$334  | \csrf_port_dat_w_value$37 [19];
  assign \$338  = \$336  | \csrf_port_dat_w_value$37 [20];
  assign \$340  = \$338  | \csrf_port_dat_w_value$37 [21];
  assign \$342  = \$340  | \csrf_port_dat_w_value$37 [22];
  assign \$344  = \$342  | \csrf_port_dat_w_value$37 [23];
  assign \$346  = \$344  | \csrf_port_dat_w_value$37 [24];
  assign \$348  = \$346  | \csrf_port_dat_w_value$37 [25];
  assign \$350  = \$348  | \csrf_port_dat_w_value$37 [26];
  assign \$352  = \$350  | \csrf_port_dat_w_value$37 [27];
  assign \$354  = \$352  | \csrf_port_dat_w_value$37 [28];
  assign \$356  = \$354  | \csrf_port_dat_w_value$37 [29];
  assign \$358  = \$356  | \csrf_port_dat_w_value$37 [30];
  assign \$360  = \$358  | \csrf_port_dat_w_value$37 [31];
  assign \$362  = ~ exception_pe_n;
  assign \$364  = \$362  & \f_valid$13 ;
  assign \$366  = ~ interrupt_pe_n;
  assign \$368  = csrf_port_dat_r_mie & \$366 ;
  assign \$370  = \$364  | \$368 ;
  assign \$372  = \payload_csr_adr$101  == 10'h341;
  assign \$374  = \payload_csr_we$103  & \$372 ;
  assign \$376  = \payload_csr_adr$127  == 10'h341;
  assign \$378  = \payload_csr_we$129  & \$376 ;
  assign \$380  = \payload_csr_adr$101  == 10'h305;
  assign \$382  = \payload_csr_we$103  & \$380 ;
  assign \$384  = \payload_csr_adr$127  == 10'h305;
  assign \$386  = \payload_csr_we$129  & \$384 ;
  assign \$388  = ~ \a_stall$12 ;
  assign \$390  = + ifu_a_pc;
  assign \$392  = ~ \f_stall$18 ;
  assign \$394  = ~ \f_stall$18 ;
  assign \$396  = ~ \f_stall$18 ;
  assign \$398  = ~ \d_stall$23 ;
  assign \$400  = ~ \d_stall$23 ;
  assign \$402  = ~ \d_stall$23 ;
  assign \$404  = ~ \d_stall$23 ;
  assign \$406  = ~ \d_stall$23 ;
  assign \$408  = ~ \d_stall$23 ;
  assign \$410  = ~ \d_stall$23 ;
  assign \$412  = ~ \d_stall$23 ;
  assign \$414  = ~ \d_stall$23 ;
  assign \$416  = ~ \d_stall$23 ;
  assign \$418  = ~ \d_stall$23 ;
  assign \$420  = ~ \d_stall$23 ;
  assign \$422  = ~ \d_stall$23 ;
  assign \$424  = ~ \d_stall$23 ;
  assign \$426  = ~ \d_stall$23 ;
  assign \$428  = ~ \d_stall$23 ;
  assign \$430  = ~ \d_stall$23 ;
  assign \$432  = ~ \d_stall$23 ;
  assign \$434  = ~ \d_stall$23 ;
  assign \$436  = ~ \d_stall$23 ;
  assign \$438  = ~ \d_stall$23 ;
  assign \$440  = ~ \d_stall$23 ;
  assign \$442  = ~ \d_stall$23 ;
  assign \$444  = ~ \d_stall$23 ;
  assign \$446  = ~ \d_stall$23 ;
  assign \$448  = ~ \d_stall$23 ;
  assign \$450  = ~ \d_stall$23 ;
  assign \$452  = ~ \d_stall$23 ;
  assign \$454  = ~ \d_stall$23 ;
  assign \$456  = ~ \d_stall$23 ;
  assign \$458  = ~ \d_stall$23 ;
  assign \$460  = ~ \d_stall$23 ;
  assign \$462  = ~ \x_stall$27 ;
  assign \$464  = ~ \x_stall$27 ;
  assign \$466  = ~ \x_stall$27 ;
  assign \$468  = payload_ecall | payload_ebreak;
  assign \$470  = ~ interrupt_pe_n;
  assign \$472  = csrf_port_dat_r_mie & \$470 ;
  assign \$474  = \$468  | \$472 ;
  assign \$476  = ~ \x_stall$27 ;
  assign \$478  = payload_bypass_m | payload_bypass_x;
  assign \$480  = ~ \x_stall$27 ;
  assign \$482  = ~ \x_stall$27 ;
  assign \$484  = ~ \x_stall$27 ;
  assign \$486  = ~ \x_stall$27 ;
  assign \$488  = ~ \x_stall$27 ;
  assign \$490  = ~ \x_stall$27 ;
  assign \$492  = ~ \x_stall$27 ;
  assign \$494  = ~ \x_stall$27 ;
  assign \$496  = ~ \x_stall$27 ;
  assign \$498  = payload_csr & payload_csr_we;
  assign \$500  = ~ \x_stall$27 ;
  assign \$502  = ~ \x_stall$27 ;
  assign \$504  = ~ \x_stall$27 ;
  assign \$506  = ~ \x_stall$27 ;
  assign \$508  = ~ \x_stall$27 ;
  assign \$510  = x_branch_taken | x_exception;
  assign \$512  = \$510  | payload_mret;
  assign \$514  = ~ \x_stall$27 ;
  assign \$516  = ~ x_exception;
  assign \$518  = f_payload_branch_predict_taken & \$516 ;
  assign \$520  = ~ \x_stall$27 ;
  assign \$522  = ~ interrupt_pe_n;
  assign \$524  = csrf_port_dat_r_mie & \$522 ;
  assign \$526  = ~ \x_stall$27 ;
  assign \$529  = exception_pe_n ? interrupt_pe_o : exception_pe_o;
  assign \$528  = + \$529 ;
  assign \$532  = ~ \x_stall$27 ;
  assign \$534  = ~ \x_stall$27 ;
  assign \$537  = x_mtvec_base <<< 2'h2;
  assign \$539  = ~ \x_stall$27 ;
  assign \$541  = payload_ecall | payload_ebreak;
  assign \$543  = ~ interrupt_pe_n;
  assign \$545  = csrf_port_dat_r_mie & \$543 ;
  assign \$547  = \$541  | \$545 ;
  assign \$550  = \payload_pc$44  <<< 2'h2;
  assign \$553  = \payload_pc$44  + 1'h1;
  assign \$555  = \$553  <<< 2'h2;
  assign \$557  = ~ \m_stall$31 ;
  assign \$559  = ~ \m_stall$31 ;
  assign \$561  = ~ \m_stall$31 ;
  assign \$563  = ~ \m_stall$31 ;
  assign \$565  = ~ \m_stall$31 ;
  assign \$567  = ~ \m_stall$31 ;
  assign \$569  = ~ \m_stall$31 ;
  assign \$571  = ~ \m_stall$31 ;
  assign \$573  = ~ \m_stall$31 ;
  assign \$575  = ~ \m_stall$31 ;
  assign \$577  = ~ \m_stall$31 ;
  assign \$579  = ~ \m_stall$31 ;
  assign \$581  = ~ \m_stall$31 ;
  assign \$583  = ~ \m_stall$31 ;
  assign \$585  = \payload_rd$114  != 1'h0;
  assign \$587  = \$585  & \payload_rd_we$116 ;
  assign \$589  = \$587  & \w_valid$32 ;
  assign \$591  = \payload_csr_we$129  & \w_valid$32 ;
  assign \$593  = \payload_exception$125  | \payload_mret$133 ;
  assign \$595  = \$593  & \w_valid$32 ;
  assign \$597  = \payload_exception$125  & \w_valid$32 ;
  assign \$599  = \payload_exception$125  & \w_valid$32 ;
  always @(posedge clk)
      \payload_result$119  <= \$next\payload_result$119 ;
  always @(posedge clk)
      \payload_csr_adr$128  <= \$next\payload_csr_adr$128 ;
  always @(posedge clk)
      \payload_load_data$124  <= \$next\payload_load_data$124 ;
  always @(posedge clk)
      \payload_load_mask$123  <= \$next\payload_load_mask$123 ;
  always @(posedge clk)
      \payload_load$121  <= \$next\payload_load$121 ;
  always @(posedge clk)
      \payload_rd$115  <= \$next\payload_rd$115 ;
  always @(posedge clk)
      \payload_pc$113  <= \$next\payload_pc$113 ;
  always @(posedge clk)
      \payload_mepc_value$111  <= \$next\payload_mepc_value$111 ;
  always @(posedge clk)
      \payload_branch_target$99  <= \$next\payload_branch_target$99 ;
  always @(posedge clk)
      \payload_result$84  <= \$next\payload_result$84 ;
  always @(posedge clk)
      \payload_mcause_ecode$109  <= \$next\payload_mcause_ecode$109 ;
  always @(posedge clk)
      \payload_rd_we$117  <= \$next\payload_rd_we$117 ;
  always @(posedge clk)
      \payload_mcause_interrupt$110  <= \$next\payload_mcause_interrupt$110 ;
  always @(posedge clk)
      \payload_branch_predict_taken$100  <= \$next\payload_branch_predict_taken$100 ;
  always @(posedge clk)
      payload_branch_taken <= \$next\payload_branch_taken ;
  always @(posedge clk)
      \payload_condition_met$97  <= \$next\payload_condition_met$97 ;
  always @(posedge clk)
      \payload_mret$107  <= \$next\payload_mret$107 ;
  always @(posedge clk)
      \payload_exception$108  <= \$next\payload_exception$108 ;
  always @(posedge clk)
      \payload_csr_result$105  <= \$next\payload_csr_result$105 ;
  always @(posedge clk)
      \payload_csr_we$104  <= \$next\payload_csr_we$104 ;
  always @(posedge clk)
      \payload_csr_adr$102  <= \$next\payload_csr_adr$102 ;
  always @(posedge clk)
      \payload_shift$86  <= \$next\payload_shift$86 ;
  always @(posedge clk)
      \payload_mepc_value$140  <= \$next\payload_mepc_value$140 ;
  always @(posedge clk)
      \payload_compare$96  <= \$next\payload_compare$96 ;
  always @(posedge clk)
      \payload_store_data$94  <= \$next\payload_store_data$94 ;
  always @(posedge clk)
      \payload_dbus_sel$93  <= \$next\payload_dbus_sel$93 ;
  always @(posedge clk)
      \payload_store$92  <= \$next\payload_store$92 ;
  always @(posedge clk)
      \payload_load_mask$90  <= \$next\payload_load_mask$90 ;
  always @(posedge clk)
      \payload_load$89  <= \$next\payload_load$89 ;
  always @(posedge clk)
      \payload_bypass_m$83  <= \$next\payload_bypass_m$83 ;
  always @(posedge clk)
      \payload_rd_we$81  <= \$next\payload_rd_we$81 ;
  always @(posedge clk)
      \payload_rd$79  <= \$next\payload_rd$79 ;
  always @(posedge clk)
      \payload_pc$77  <= \$next\payload_pc$77 ;
  always @(posedge clk)
      \payload_mcause_ecode$137  <= \$next\payload_mcause_ecode$137 ;
  always @(posedge clk)
      \payload_branch_target$66  <= \$next\payload_branch_target$66 ;
  always @(posedge clk)
      payload_branch_predict_taken <= \$next\payload_branch_predict_taken ;
  always @(posedge clk)
      \payload_src2$51  <= \$next\payload_src2$51 ;
  always @(posedge clk)
      \payload_src1$50  <= \$next\payload_src1$50 ;
  always @(posedge clk)
      d_payload_illegal <= \$next\d_payload_illegal ;
  always @(posedge clk)
      \payload_mret$75  <= \$next\payload_mret$75 ;
  always @(posedge clk)
      \payload_ebreak$74  <= \$next\payload_ebreak$74 ;
  always @(posedge clk)
      \payload_ecall$73  <= \$next\payload_ecall$73 ;
  always @(posedge clk)
      \payload_csr_we$70  <= \$next\payload_csr_we$70 ;
  always @(posedge clk)
      \payload_csr_adr$69  <= \$next\payload_csr_adr$69 ;
  always @(posedge clk)
      \payload_mcause_interrupt$138  <= \$next\payload_mcause_interrupt$138 ;
  always @(posedge clk)
      \payload_csr$68  <= \$next\payload_csr$68 ;
  always @(posedge clk)
      \payload_fence_i$67  <= \$next\payload_fence_i$67 ;
  always @(posedge clk)
      \payload_branch$65  <= \$next\payload_branch$65 ;
  always @(posedge clk)
      \payload_jump$63  <= \$next\payload_jump$63 ;
  always @(posedge clk)
      \payload_sext$62  <= \$next\payload_sext$62 ;
  always @(posedge clk)
      \payload_direction$61  <= \$next\payload_direction$61 ;
  always @(posedge clk)
      \payload_shift$60  <= \$next\payload_shift$60 ;
  always @(posedge clk)
      \payload_logic$59  <= \$next\payload_logic$59 ;
  always @(posedge clk)
      \payload_compare$64  <= \$next\payload_compare$64 ;
  always @(posedge clk)
      \payload_adder_sub$58  <= \$next\payload_adder_sub$58 ;
  always @(posedge clk)
      \payload_exception$126  <= \$next\payload_exception$126 ;
  always @(posedge clk)
      \payload_store$57  <= \$next\payload_store$57 ;
  always @(posedge clk)
      \payload_load$56  <= \$next\payload_load$56 ;
  always @(posedge clk)
      \payload_funct3$55  <= \$next\payload_funct3$55 ;
  always @(posedge clk)
      \payload_bypass_m$54  <= \$next\payload_bypass_m$54 ;
  always @(posedge clk)
      \payload_bypass_x$53  <= \$next\payload_bypass_x$53 ;
  always @(posedge clk)
      \payload_immediate$52  <= \$next\payload_immediate$52 ;
  always @(posedge clk)
      \payload_rs1_re$49  <= \$next\payload_rs1_re$49 ;
  always @(posedge clk)
      \payload_rd_we$48  <= \$next\payload_rd_we$48 ;
  always @(posedge clk)
      \payload_rs1$47  <= \$next\payload_rs1$47 ;
  always @(posedge clk)
      \payload_rd$46  <= \$next\payload_rd$46 ;
  always @(posedge clk)
      \payload_mret$134  <= \$next\payload_mret$134 ;
  always @(posedge clk)
      \payload_bus_error$72  <= \$next\payload_bus_error$72 ;
  always @(posedge clk)
      \payload_pc$45  <= \$next\payload_pc$45 ;
  always @(posedge clk)
      \payload_bus_error$43  <= \$next\payload_bus_error$43 ;
  always @(posedge clk)
      \payload_instruction$42  <= \$next\payload_instruction$42 ;
  always @(posedge clk)
      \payload_pc$41  <= \$next\payload_pc$41 ;
  always @(posedge clk)
      \payload_pc$39  <= \$next\payload_pc$39 ;
  always @(posedge clk)
      \payload_dcache_select$87  <= \$next\payload_dcache_select$87 ;
  always @(posedge clk)
      \payload_csr_result$132  <= \$next\payload_csr_result$132 ;
  always @(posedge clk)
      \payload_csr_we$130  <= \$next\payload_csr_we$130 ;
  a a (
    .clk(clk),
    .kill(a_kill),
    .payload_branch_predict_taken(a_payload_branch_predict_taken),
    .payload_branch_taken(a_payload_branch_taken),
    .rst(rst),
    .stall(a_stall),
    .\stall$3 (\a_stall$12 ),
    .valid(a_valid),
    .\valid$1 (\a_valid$10 ),
    .\valid$2 (\a_valid$11 )
  );
  adder adder (
    .carry(adder_carry),
    .op(adder_op),
    .overflow(adder_overflow),
    .result(adder_result),
    .src1(adder_src1),
    .src2(adder_src2)
  );
  bp bp (
    .d_branch(bp_d_branch),
    .d_branch_predict_taken(bp_d_branch_predict_taken),
    .d_branch_target(bp_d_branch_target),
    .d_jump(bp_d_jump),
    .d_offset(bp_d_offset),
    .d_pc(bp_d_pc),
    .d_rs1_re(bp_d_rs1_re),
    .d_src1(bp_d_src1)
  );
  bu bu (
    .cmp_carry(bu_cmp_carry),
    .cmp_negative(bu_cmp_negative),
    .cmp_overflow(bu_cmp_overflow),
    .cmp_zero(bu_cmp_zero),
    .condition(bu_condition),
    .condition_met(bu_condition_met)
  );
  csrf csrf (
    .clk(clk),
    .port_dat_r_base(csrf_port_dat_r_base),
    .port_dat_r_meie(csrf_port_dat_r_meie),
    .port_dat_r_meip(csrf_port_dat_r_meip),
    .port_dat_r_mie(csrf_port_dat_r_mie),
    .port_dat_r_mode(csrf_port_dat_r_mode),
    .port_dat_r_mpie(csrf_port_dat_r_mpie),
    .port_dat_r_msie(csrf_port_dat_r_msie),
    .port_dat_r_msip(csrf_port_dat_r_msip),
    .port_dat_r_mtie(csrf_port_dat_r_mtie),
    .port_dat_r_mtip(csrf_port_dat_r_mtip),
    .port_dat_r_value(csrf_port_dat_r_value),
    .\port_dat_r_value$14 (\csrf_port_dat_r_value$38 ),
    .port_dat_w_base(port_dat_w_base),
    .port_dat_w_ecode(csrf_port_dat_w_ecode),
    .port_dat_w_fs(port_dat_w_fs),
    .port_dat_w_interrupt(csrf_port_dat_w_interrupt),
    .port_dat_w_meie(port_dat_w_meie),
    .port_dat_w_meip(csrf_port_dat_w_meip),
    .port_dat_w_mie(csrf_port_dat_w_mie),
    .port_dat_w_mode(port_dat_w_mode),
    .port_dat_w_mpie(csrf_port_dat_w_mpie),
    .port_dat_w_mpp(port_dat_w_mpp),
    .port_dat_w_mprv(port_dat_w_mprv),
    .port_dat_w_msie(port_dat_w_msie),
    .port_dat_w_msip(port_dat_w_msip),
    .port_dat_w_mtie(port_dat_w_mtie),
    .port_dat_w_mtip(csrf_port_dat_w_mtip),
    .port_dat_w_mxr(port_dat_w_mxr),
    .port_dat_w_sd(port_dat_w_sd),
    .port_dat_w_seie(port_dat_w_seie),
    .port_dat_w_seip(port_dat_w_seip),
    .port_dat_w_sie(port_dat_w_sie),
    .port_dat_w_spie(port_dat_w_spie),
    .port_dat_w_spp(port_dat_w_spp),
    .port_dat_w_ssie(port_dat_w_ssie),
    .port_dat_w_ssip(port_dat_w_ssip),
    .port_dat_w_stie(port_dat_w_stie),
    .port_dat_w_stip(port_dat_w_stip),
    .port_dat_w_sum(port_dat_w_sum),
    .port_dat_w_tsr(port_dat_w_tsr),
    .port_dat_w_tvm(port_dat_w_tvm),
    .port_dat_w_tw(port_dat_w_tw),
    .port_dat_w_ueie(port_dat_w_ueie),
    .port_dat_w_ueip(port_dat_w_ueip),
    .port_dat_w_uie(port_dat_w_uie),
    .port_dat_w_upie(port_dat_w_upie),
    .port_dat_w_usie(port_dat_w_usie),
    .port_dat_w_usip(port_dat_w_usip),
    .port_dat_w_utie(port_dat_w_utie),
    .port_dat_w_utip(port_dat_w_utip),
    .port_dat_w_value(csrf_port_dat_w_value),
    .\port_dat_w_value$11 (\csrf_port_dat_w_value$37 ),
    .\port_dat_w_value$13 (port_dat_w_value),
    .port_dat_w_wiri0(port_dat_w_wiri0),
    .port_dat_w_wiri1(port_dat_w_wiri1),
    .port_dat_w_wiri2(port_dat_w_wiri2),
    .port_dat_w_wiri3(port_dat_w_wiri3),
    .port_dat_w_wpri0(port_dat_w_wpri0),
    .\port_dat_w_wpri0$6 (\port_dat_w_wpri0$2 ),
    .port_dat_w_wpri1(port_dat_w_wpri1),
    .\port_dat_w_wpri1$7 (\port_dat_w_wpri1$3 ),
    .port_dat_w_wpri2(port_dat_w_wpri2),
    .\port_dat_w_wpri2$8 (\port_dat_w_wpri2$4 ),
    .port_dat_w_wpri3(port_dat_w_wpri3),
    .\port_dat_w_wpri3$9 (\port_dat_w_wpri3$5 ),
    .port_dat_w_xs(port_dat_w_xs),
    .port_we(csrf_port_we),
    .\port_we$1 (port_we),
    .\port_we$10 (\csrf_port_we$36 ),
    .\port_we$12 (\port_we$6 ),
    .\port_we$2 (\csrf_port_we$33 ),
    .\port_we$3 (\csrf_port_we$34 ),
    .\port_we$4 (\csrf_port_we$35 ),
    .\port_we$5 (\port_we$1 ),
    .rp_addr(csrf_rp_addr),
    .rp_data(csrf_rp_data),
    .rst(rst),
    .wp_addr(csrf_wp_addr),
    .wp_data(csrf_wp_data),
    .wp_en(csrf_wp_en)
  );
  d d (
    .clk(clk),
    .kill(d_kill),
    .\kill$5 (\d_kill$22 ),
    .m_lock(d_m_lock),
    .payload_branch_predict_taken(a_payload_branch_predict_taken),
    .payload_branch_taken(a_payload_branch_taken),
    .payload_illegal(d_payload_illegal),
    .rst(rst),
    .stall(d_stall),
    .\stall$3 (\d_stall$20 ),
    .\stall$6 (\d_stall$23 ),
    .valid(d_valid),
    .\valid$1 (\a_valid$10 ),
    .\valid$2 (\d_valid$19 ),
    .\valid$4 (\d_valid$21 ),
    .x_lock(d_x_lock)
  );
  decoder decoder (
    .adder_sub(decoder_adder_sub),
    .auipc(decoder_auipc),
    .branch(decoder_branch),
    .bypass_m(decoder_bypass_m),
    .bypass_x(decoder_bypass_x),
    .compare(decoder_compare),
    .csr(decoder_csr),
    .csr_we(decoder_csr_we),
    .direction(decoder_direction),
    .ebreak(decoder_ebreak),
    .ecall(decoder_ecall),
    .fence_i(decoder_fence_i),
    .funct3(decoder_funct3),
    .illegal(decoder_illegal),
    .immediate(decoder_immediate),
    .instruction(decoder_instruction),
    .jump(decoder_jump),
    .load(decoder_load),
    .\logic (decoder_logic),
    .lui(decoder_lui),
    .mret(decoder_mret),
    .rd(decoder_rd),
    .rd_we(decoder_rd_we),
    .rs1(decoder_rs1),
    .rs1_re(decoder_rs1_re),
    .rs2(decoder_rs2),
    .rs2_re(decoder_rs2_re),
    .sext(decoder_sext),
    .shift(decoder_shift),
    .store(decoder_store)
  );
  exception_pe exception_pe (
    .i(exception_pe_i),
    .n(exception_pe_n),
    .o(exception_pe_o)
  );
  f f (
    .clk(clk),
    .kill(f_kill),
    .\kill$7 (\f_kill$17 ),
    .payload_branch_predict_taken(f_payload_branch_predict_taken),
    .\payload_branch_predict_taken$2 (a_payload_branch_predict_taken),
    .payload_branch_taken(a_payload_branch_taken),
    .rst(rst),
    .stall(f_stall),
    .\stall$5 (\f_stall$15 ),
    .\stall$8 (\f_stall$18 ),
    .valid(f_valid),
    .\valid$1 (\f_valid$13 ),
    .\valid$3 (\a_valid$10 ),
    .\valid$4 (\f_valid$14 ),
    .\valid$6 (\f_valid$16 )
  );
  gprf gprf (
    .clk(clk),
    .rp1_addr(gprf_rp1_addr),
    .rp1_data(gprf_rp1_data),
    .rp2_addr(gprf_rp2_addr),
    .rp2_data(gprf_rp2_data),
    .rst(rst),
    .wp_addr(gprf_wp_addr),
    .wp_data(gprf_wp_data),
    .wp_en(gprf_wp_en)
  );
  ifu ifu (
    .a_pc(ifu_a_pc),
    .a_stall(ifu_a_stall),
    .clk(clk),
    .d_branch_predict_taken(ifu_d_branch_predict_taken),
    .d_branch_target(ifu_d_branch_target),
    .f_bus_error(ifu_f_bus_error),
    .f_instruction(ifu_f_instruction),
    .f_pc(ifu_f_pc),
    .f_stall(ifu_f_stall),
    .f_valid(ifu_f_valid),
    .flush(ifu_flush),
    .ibus_ack(ifu_ibus_ack),
    .ibus_adr(ifu_ibus_adr),
    .ibus_bte(ifu_ibus_bte),
    .ibus_cti(ifu_ibus_cti),
    .ibus_cyc(ifu_ibus_cyc),
    .ibus_dat_r(ifu_ibus_dat_r),
    .ibus_err(ifu_ibus_err),
    .ibus_stb(ifu_ibus_stb),
    .m_branch_predict_taken(m_m_branch_predict_taken),
    .m_branch_taken(m_m_branch_taken),
    .m_branch_target(ifu_m_branch_target),
    .refill_ready(ifu_refill_ready),
    .rst(rst),
    .s2_dat_w(s2_dat_w),
    .s2_sel(s2_sel),
    .s2_we(s2_we),
    .stall_request(x_stall_request),
    .x_pc(ifu_x_pc)
  );
  interrupt_pe interrupt_pe (
    .i(interrupt_pe_i),
    .n(interrupt_pe_n),
    .o(interrupt_pe_o)
  );
  \logic  \logic  (
    .op(logic_op),
    .result(logic_result),
    .src1(logic_src1),
    .src2(logic_src2)
  );
  lsu lsu (
    .clk(clk),
    .dbus_ack(lsu_dbus_ack),
    .dbus_adr(lsu_dbus_adr),
    .dbus_bte(lsu_dbus_bte),
    .dbus_cti(lsu_dbus_cti),
    .dbus_cyc(lsu_dbus_cyc),
    .dbus_dat_r(lsu_dbus_dat_r),
    .dbus_dat_w(lsu_dbus_dat_w),
    .dbus_err(lsu_dbus_err),
    .dbus_sel(lsu_dbus_sel),
    .dbus_stb(lsu_dbus_stb),
    .dbus_we(lsu_dbus_we),
    .flush(flush),
    .m_address(lsu_m_address),
    .m_dbus_sel(lsu_m_dbus_sel),
    .m_dcache_select(m_m_dcache_select),
    .m_load(m_m_load),
    .m_load_data(lsu_m_load_data),
    .m_stall(lsu_m_stall),
    .m_store(m_m_store),
    .m_store_data(lsu_m_store_data),
    .readable(x_readable),
    .refill_request(x_refill_request),
    .replace(replace),
    .rst(rst),
    .s2_stall(s2_stall),
    .stall_request(m_stall_request),
    .w_address(lsu_w_address),
    .w_load_data(lsu_w_load_data),
    .w_load_mask(lsu_w_load_mask),
    .w_load_result(lsu_w_load_result),
    .writable(m_writable),
    .x_address(lsu_x_address),
    .x_dbus_sel(lsu_x_dbus_sel),
    .x_dcache_select(x_x_dcache_select),
    .x_load(x_x_load),
    .x_mask(lsu_x_mask),
    .x_stall(lsu_x_stall),
    .x_store(x_x_store),
    .x_store_data(lsu_x_store_data),
    .x_store_operand(lsu_x_store_operand)
  );
  m m (
    .clk(clk),
    .dbus_ack(dbus_ack),
    .dbus_cyc(dbus_cyc),
    .ibus_cyc(ibus_cyc),
    .kill(m_kill),
    .\kill$5 (\m_kill$30 ),
    .m_branch_predict_taken(m_m_branch_predict_taken),
    .m_branch_taken(m_m_branch_taken),
    .m_dcache_select(m_m_dcache_select),
    .m_load(m_m_load),
    .m_store(m_m_store),
    .readable(x_readable),
    .rst(rst),
    .stall(m_stall),
    .\stall$3 (\m_stall$28 ),
    .\stall$6 (\m_stall$31 ),
    .stall_request(x_stall_request),
    .\stall_request$1 (m_stall_request),
    .valid(m_valid),
    .\valid$2 (\a_valid$10 ),
    .\valid$4 (\m_valid$29 ),
    .writable(m_writable)
  );
  shifter shifter (
    .clk(clk),
    .m_result(shifter_m_result),
    .rst(rst),
    .x_direction(shifter_x_direction),
    .x_sext(shifter_x_sext),
    .x_shamt(shifter_x_shamt),
    .x_src1(shifter_x_src1),
    .x_stall(shifter_x_stall)
  );
  w w (
    .kill(w_kill),
    .stall(w_stall),
    .valid(w_valid),
    .\valid$1 (\w_valid$32 )
  );
  x x (
    .clk(clk),
    .dbus_cyc(dbus_cyc),
    .kill(x_kill),
    .\kill$4 (\x_kill$26 ),
    .readable(x_readable),
    .refill_request(x_refill_request),
    .rst(rst),
    .stall(x_stall),
    .\stall$2 (\x_stall$24 ),
    .\stall$5 (\x_stall$27 ),
    .stall_request(x_stall_request),
    .valid(x_valid),
    .\valid$1 (\f_valid$13 ),
    .\valid$3 (\x_valid$25 ),
    .x_dcache_select(x_x_dcache_select),
    .x_load(x_x_load),
    .x_store(x_x_store)
  );
  always @* begin
    \$next\f_valid  = 1'h0;
    \$next\f_valid  = \a_valid$11 ;
  end
  always @* begin
    \$next\a_stall  = 1'h0;
    \$next\a_stall  = \f_stall$15 ;
  end
  always @* begin
    \$next\x_valid  = 1'h0;
    \$next\x_valid  = \d_valid$21 ;
  end
  always @* begin
    \$next\ibus_cyc  = 1'h0;
    \$next\ibus_cyc  = ifu_ibus_cyc;
  end
  always @* begin
    \$next\ibus_stb  = 1'h0;
    \$next\ibus_stb  = ifu_ibus_stb;
  end
  always @* begin
    \$next\ifu_ibus_ack  = 1'h0;
    \$next\ifu_ibus_ack  = ibus_ack;
  end
  always @* begin
    \$next\ibus_we$9  = 1'h0;
    \$next\ibus_we$9  = ibus_we;
  end
  always @* begin
    \$next\ibus_cti  = 3'h0;
    \$next\ibus_cti  = ifu_ibus_cti;
  end
  always @* begin
    \$next\ibus_bte  = 2'h0;
    \$next\ibus_bte  = ifu_ibus_bte;
  end
  always @* begin
    \$next\ifu_ibus_err  = 1'h0;
    \$next\ifu_ibus_err  = ibus_err;
  end
  always @* begin
    \$next\ifu_a_stall  = 1'h0;
    \$next\ifu_a_stall  = \a_stall$12 ;
  end
  always @* begin
    \$next\ifu_f_pc  = 30'h00000000;
    \$next\ifu_f_pc  = payload_pc[29:0];
  end
  always @* begin
    \$next\ifu_d_branch_predict_taken  = 1'h0;
    \$next\ifu_d_branch_predict_taken  = \$145 ;
  end
  always @* begin
    \$next\d_stall  = 1'h0;
    \$next\d_stall  = \x_stall$24 ;
  end
  always @* begin
    \$next\ifu_d_branch_target  = 30'h00000000;
    \$next\ifu_d_branch_target  = d_branch_target[31:2];
  end
  always @* begin
    \$next\ifu_x_pc  = 30'h00000000;
    \$next\ifu_x_pc  = \payload_pc$44 ;
  end
  always @* begin
    \$next\m_m_branch_taken  = 1'h0;
    \$next\m_m_branch_taken  = \$147 ;
  end
  always @* begin
    \$next\ifu_m_branch_target  = 30'h00000000;
    \$next\ifu_m_branch_target  = \payload_branch_target$98 [31:2];
  end
  always @* begin
    \$next\m_m_branch_predict_taken  = 1'h0;
    \$next\m_m_branch_predict_taken  = \$149 ;
  end
  always @* begin
    \$next\decoder_instruction  = 32'd0;
    \$next\decoder_instruction  = payload_instruction;
  end
  always @* begin
    \$next\gprf_rp1_addr  = 5'h00;
    \$next\gprf_rp1_addr  = decoder_rs1;
  end
  always @* begin
    \$next\gprf_rp2_addr  = 5'h00;
    \$next\gprf_rp2_addr  = decoder_rs2;
  end
  always @* begin
    \$next\csrf_rp_addr  = 12'h000;
    \$next\csrf_rp_addr  = decoder_immediate[11:0];
  end
  always @* begin
    \$next\logic_op  = 3'h0;
    \$next\logic_op  = \$153 ;
  end
  always @* begin
    \$next\x_kill  = 1'h0;
    \$next\x_kill  = \d_kill$22 ;
  end
  always @* begin
    \$next\logic_src1  = 32'd0;
    \$next\logic_src1  = \$169 ;
  end
  always @* begin
    \$next\logic_src2  = 32'd0;
    \$next\logic_src2  = payload_src2;
  end
  always @* begin
    \$next\adder_op  = 1'h0;
    \$next\adder_op  = payload_adder_sub;
  end
  always @* begin
    \$next\adder_src1  = 32'd0;
    \$next\adder_src1  = payload_src1;
  end
  always @* begin
    \$next\adder_src2  = 32'd0;
    \$next\adder_src2  = \$171 ;
  end
  always @* begin
    \$next\bu_condition  = 3'h0;
    \$next\bu_condition  = \$173 [2:0];
  end
  always @* begin
    \$next\bu_cmp_zero  = 1'h0;
    \$next\bu_cmp_zero  = \$180 ;
  end
  always @* begin
    \$next\bu_cmp_negative  = 1'h0;
    \$next\bu_cmp_negative  = adder_result[31];
  end
  always @* begin
    \$next\bu_cmp_overflow  = 1'h0;
    \$next\bu_cmp_overflow  = adder_overflow;
  end
  always @* begin
    \$next\bu_cmp_carry  = 1'h0;
    \$next\bu_cmp_carry  = adder_carry;
  end
  always @* begin
    \$next\payload_pc$44  = 30'h00000000;
    \$next\payload_pc$44  = \payload_pc$45 ;
  end
  always @* begin
    \$next\shifter_x_direction  = 1'h0;
    \$next\shifter_x_direction  = payload_direction;
  end
  always @* begin
    \$next\shifter_x_sext  = 1'h0;
    \$next\shifter_x_sext  = payload_sext;
  end
  always @* begin
    \$next\shifter_x_shamt  = 5'h00;
    \$next\shifter_x_shamt  = payload_src2[4:0];
  end
  always @* begin
    \$next\shifter_x_src1  = 32'd0;
    \$next\shifter_x_src1  = payload_src1;
  end
  always @* begin
    \$next\shifter_x_stall  = 1'h0;
    \$next\shifter_x_stall  = \x_stall$27 ;
  end
  always @* begin
    \$next\lsu_m_address  = 32'd0;
    \$next\lsu_m_address  = payload_result;
  end
  always @* begin
    \$next\m_m_dcache_select  = 1'h0;
    \$next\m_m_dcache_select  = payload_dcache_select;
  end
  always @* begin
    \$next\m_m_load  = 1'h0;
    \$next\m_m_load  = \$182 ;
  end
  always @* begin
    \$next\m_m_store  = 1'h0;
    \$next\m_m_store  = \$184 ;
  end
  always @* begin
    \$next\lsu_m_dbus_sel  = 4'h0;
    \$next\lsu_m_dbus_sel  = payload_dbus_sel;
  end
  always @* begin
    \$next\payload_rd  = 5'h00;
    \$next\payload_rd  = \payload_rd$46 ;
  end
  always @* begin
    \$next\lsu_m_store_data  = 32'd0;
    \$next\lsu_m_store_data  = payload_store_data;
  end
  always @* begin
    \$next\lsu_m_stall  = 1'h0;
    \$next\lsu_m_stall  = \m_stall$31 ;
  end
  always @* begin
    \$next\payload_dcache_select$87  = \payload_dcache_select$87 ;
    casez (\$186 )
      1'h1:
          \$next\payload_dcache_select$87  = x_x_dcache_select;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_dcache_select$87  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dcache_stall_request  = 1'h0;
    \$next\dcache_stall_request  = m_stall_request;
  end
  always @* begin
    \$next\dbus_adr  = 30'h00000000;
    \$next\dbus_adr  = lsu_dbus_adr;
  end
  always @* begin
    \$next\dbus_dat_w  = 32'd0;
    \$next\dbus_dat_w  = lsu_dbus_dat_w;
  end
  always @* begin
    \$next\lsu_dbus_dat_r  = 32'd0;
    \$next\lsu_dbus_dat_r  = dbus_dat_r;
  end
  always @* begin
    \$next\dbus_sel  = 4'h0;
    \$next\dbus_sel  = lsu_dbus_sel;
  end
  always @* begin
    \$next\dbus_cyc  = 1'h0;
    \$next\dbus_cyc  = lsu_dbus_cyc;
  end
  always @* begin
    \$next\dbus_stb  = 1'h0;
    \$next\dbus_stb  = lsu_dbus_stb;
  end
  always @* begin
    \$next\payload_rs1  = 5'h00;
    \$next\payload_rs1  = \payload_rs1$47 ;
  end
  always @* begin
    \$next\lsu_dbus_ack  = 1'h0;
    \$next\lsu_dbus_ack  = dbus_ack;
  end
  always @* begin
    \$next\dbus_we  = 1'h0;
    \$next\dbus_we  = lsu_dbus_we;
  end
  always @* begin
    \$next\dbus_cti  = 3'h0;
    \$next\dbus_cti  = lsu_dbus_cti;
  end
  always @* begin
    \$next\dbus_bte  = 2'h0;
    \$next\dbus_bte  = lsu_dbus_bte;
  end
  always @* begin
    \$next\lsu_dbus_err  = 1'h0;
    \$next\lsu_dbus_err  = dbus_err;
  end
  always @* begin
    \$next\lsu_x_address  = 32'd0;
    \$next\lsu_x_address  = adder_result;
  end
  always @* begin
    \$next\x_x_load  = 1'h0;
    \$next\x_x_load  = \$188 ;
  end
  always @* begin
    \$next\x_x_store  = 1'h0;
    \$next\x_x_store  = \$190 ;
  end
  always @* begin
    \$next\lsu_x_store_operand  = 32'd0;
    \$next\lsu_x_store_operand  = payload_src2;
  end
  always @* begin
    \$next\lsu_x_mask  = 3'h0;
    \$next\lsu_x_mask  = payload_funct3;
  end
  always @* begin
    \$next\payload_rd_we  = 1'h0;
    \$next\payload_rd_we  = \payload_rd_we$48 ;
  end
  always @* begin
    \$next\lsu_x_stall  = 1'h0;
    \$next\lsu_x_stall  = \x_stall$27 ;
  end
  always @* begin
    \$next\lsu_w_address  = 32'd0;
    \$next\lsu_w_address  = \payload_result$118 ;
  end
  always @* begin
    \$next\lsu_w_load_mask  = 3'h0;
    \$next\lsu_w_load_mask  = \payload_load_mask$122 ;
  end
  always @* begin
    \$next\lsu_w_load_data  = 32'd0;
    \$next\lsu_w_load_data  = payload_load_data;
  end
  always @* begin
    \$next\x_raw_rs1  = 1'h0;
    \$next\x_raw_rs1  = \$196 ;
  end
  always @* begin
    \$next\m_raw_rs1  = 1'h0;
    \$next\m_raw_rs1  = \$202 ;
  end
  always @* begin
    \$next\w_raw_rs1  = 1'h0;
    \$next\w_raw_rs1  = \$208 ;
  end
  always @* begin
    \$next\x_raw_rs2  = 1'h0;
    \$next\x_raw_rs2  = \$214 ;
  end
  always @* begin
    \$next\m_raw_rs2  = 1'h0;
    \$next\m_raw_rs2  = \$220 ;
  end
  always @* begin
    \$next\w_raw_rs2  = 1'h0;
    \$next\w_raw_rs2  = \$226 ;
  end
  always @* begin
    \$next\payload_rs1_re  = 1'h0;
    \$next\payload_rs1_re  = \payload_rs1_re$49 ;
  end
  always @* begin
    \$next\x_raw_csr  = 1'h0;
    \$next\x_raw_csr  = \$232 ;
  end
  always @* begin
    \$next\m_raw_csr  = 1'h0;
    \$next\m_raw_csr  = \$238 ;
  end
  always @* begin
    \$next\w_raw_csr  = 1'h0;
    \$next\w_raw_csr  = \$244 ;
  end
  always @* begin
    \$next\d_x_lock  = 1'h0;
    \$next\d_x_lock  = \$254 ;
  end
  always @* begin
    \$next\d_m_lock  = 1'h0;
    \$next\d_m_lock  = \$264 ;
  end
  always @* begin
    \$next\x_result  = 32'd0;
    casez ({ payload_csr, payload_logic, payload_jump })
      3'bzz1:
          \$next\x_result  = \$266 [31:0];
      3'bz1z:
          \$next\x_result  = logic_result;
      3'b1zz:
          \$next\x_result  = payload_src2;
      3'hz:
          \$next\x_result  = adder_result;
    endcase
  end
  always @* begin
    \$next\m_result  = 32'd0;
    casez ({ \payload_shift$85 , \payload_compare$95  })
      2'bz1:
          \$next\m_result  = \$271 ;
      2'b1z:
          \$next\m_result  = shifter_m_result;
      2'hz:
          \$next\m_result  = payload_result;
    endcase
  end
  always @* begin
    \$next\w_result  = 32'd0;
    casez (\payload_load$120 )
      1'h1:
          \$next\w_result  = lsu_w_load_result;
      1'hz:
          \$next\w_result  = \payload_result$118 ;
    endcase
  end
  always @* begin
    \$next\x_csr_result  = 32'd0;
    casez (payload_funct3[1])
      1'h1:
          \$next\x_csr_result  = logic_result;
      1'hz:
          \$next\x_csr_result  = payload_src1;
    endcase
  end
  always @* begin
    \$next\d_src1  = 32'd0;
    casez ({ w_raw_rs1, m_raw_rs1, x_raw_rs1, \$275 , decoder_auipc, decoder_lui })
      6'bzzzzz1:
          \$next\d_src1  = 32'd0;
      6'bzzzz1z:
          \$next\d_src1  = \$277 [31:0];
      6'bzzz1zz:
          \$next\d_src1  = 32'd0;
      6'bzz1zzz:
          \$next\d_src1  = x_result;
      6'bz1zzzz:
          \$next\d_src1  = m_result;
      6'b1zzzzz:
          \$next\d_src1  = w_result;
      6'hzz:
          \$next\d_src1  = gprf_rp1_data;
    endcase
  end
  always @* begin
    \$next\payload_src1  = 32'd0;
    \$next\payload_src1  = \payload_src1$50 ;
  end
  always @* begin
    \$next\d_src2  = 32'd0;
    casez ({ w_raw_rs2, m_raw_rs2, x_raw_rs2, \$282 , \$280 , decoder_csr })
      6'bzzzzz1:
          casez ({ w_raw_csr, m_raw_csr, x_raw_csr })
            3'bzz1:
                \$next\d_src2  = x_csr_result;
            3'bz1z:
                \$next\d_src2  = payload_csr_result;
            3'b1zz:
                \$next\d_src2  = \payload_csr_result$131 ;
            3'hz:
                \$next\d_src2  = csrf_rp_data;
          endcase
      6'bzzzz1z:
          \$next\d_src2  = decoder_immediate;
      6'bzzz1zz:
          \$next\d_src2  = 32'd0;
      6'bzz1zzz:
          \$next\d_src2  = x_result;
      6'bz1zzzz:
          \$next\d_src2  = m_result;
      6'b1zzzzz:
          \$next\d_src2  = w_result;
      6'hzz:
          \$next\d_src2  = gprf_rp2_data;
    endcase
  end
  always @* begin
    \$next\bp_d_branch  = 1'h0;
    \$next\bp_d_branch  = decoder_branch;
  end
  always @* begin
    \$next\bp_d_jump  = 1'h0;
    \$next\bp_d_jump  = decoder_jump;
  end
  always @* begin
    \$next\bp_d_offset  = 32'd0;
    \$next\bp_d_offset  = decoder_immediate;
  end
  always @* begin
    \$next\bp_d_pc  = 30'h00000000;
    \$next\bp_d_pc  = \payload_pc$40 ;
  end
  always @* begin
    \$next\bp_d_rs1_re  = 1'h0;
    \$next\bp_d_rs1_re  = decoder_rs1_re;
  end
  always @* begin
    \$next\bp_d_src1  = 32'd0;
    \$next\bp_d_src1  = d_src1;
  end
  always @* begin
    \$next\d_branch_predict_taken  = 1'h0;
    \$next\d_branch_predict_taken  = bp_d_branch_predict_taken;
  end
  always @* begin
    \$next\d_branch_target  = 32'd0;
    \$next\d_branch_target  = bp_d_branch_target;
  end
  always @* begin
    \$next\x_branch_taken  = 1'h0;
    \$next\x_branch_taken  = \$286 ;
  end
  always @* begin
    \$next\payload_src2  = 32'd0;
    \$next\payload_src2  = \payload_src2$51 ;
  end
  always @* begin
    \$next\exception_pe_i  = 16'h0000;
    \$next\exception_pe_i [0] = \$290 ;
    \$next\exception_pe_i [1] = \payload_bus_error$71 ;
    \$next\exception_pe_i [2] = payload_illegal;
    \$next\exception_pe_i [3] = payload_ebreak;
    \$next\exception_pe_i [11] = payload_ecall;
  end
  always @* begin
    \$next\interrupt_pe_i  = 16'h0000;
    \$next\interrupt_pe_i [3] = \$292 ;
    \$next\interrupt_pe_i [7] = \$294 ;
    \$next\interrupt_pe_i [11] = \$296 ;
  end
  always @* begin
    \$next\csrf_port_we$36  = 1'h0;
    \$next\csrf_port_we$36  = 1'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\csrf_port_dat_w_value$37  = 32'd0;
    \$next\csrf_port_dat_w_value$37  = \$298 ;
  end
  always @* begin
    \$next\csrf_port_we$35  = 1'h0;
    \$next\csrf_port_we$35  = 1'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\csrf_port_dat_w_mtip  = 1'h0;
    \$next\csrf_port_dat_w_mtip  = timer_interrupt;
  end
  always @* begin
    \$next\csrf_port_dat_w_meip  = 1'h0;
    \$next\csrf_port_dat_w_meip  = \$360 ;
  end
  always @* begin
    \$next\x_exception  = 1'h0;
    \$next\x_exception  = \$370 ;
  end
  always @* begin
    \$next\x_mepc_value  = 32'd0;
    casez ({ \$378 , \$374  })
      2'bz1:
          \$next\x_mepc_value  = payload_csr_result;
      2'b1z:
          \$next\x_mepc_value  = \payload_csr_result$131 ;
      2'hz:
          \$next\x_mepc_value  = csrf_port_dat_r_value;
    endcase
  end
  always @* begin
    \$next\x_mtvec_mode  = 2'h0;
    \$next\x_mtvec_base  = 30'h00000000;
    casez ({ \$386 , \$382  })
      2'bz1:
          { \$next\x_mtvec_base , \$next\x_mtvec_mode  } = payload_csr_result;
      2'b1z:
          { \$next\x_mtvec_base , \$next\x_mtvec_mode  } = \payload_csr_result$131 ;
      2'hz:
          { \$next\x_mtvec_base , \$next\x_mtvec_mode  } = { csrf_port_dat_r_base, csrf_port_dat_r_mode };
    endcase
  end
  always @* begin
    \$next\f_kill  = 1'h0;
    \$next\f_kill  = a_kill;
  end
  always @* begin
    \$next\payload_immediate  = 32'd0;
    \$next\payload_immediate  = \payload_immediate$52 ;
  end
  always @* begin
    \$next\payload_pc$39  = \payload_pc$39 ;
    casez (\$388 )
      1'h1:
          \$next\payload_pc$39  = \$390 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_pc$39  = 31'h7fffffff;
    endcase
  end
  always @* begin
    \$next\payload_pc$41  = \payload_pc$41 ;
    casez (\$392 )
      1'h1:
          \$next\payload_pc$41  = payload_pc[29:0];
    endcase
    casez (rst)
      1'h1:
          \$next\payload_pc$41  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload_instruction$42  = \payload_instruction$42 ;
    casez (\$394 )
      1'h1:
          \$next\payload_instruction$42  = ifu_f_instruction;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_instruction$42  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_bus_error$43  = \payload_bus_error$43 ;
    casez (\$396 )
      1'h1:
          \$next\payload_bus_error$43  = ifu_f_bus_error;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_bus_error$43  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_pc$45  = \payload_pc$45 ;
    casez (\$398 )
      1'h1:
          \$next\payload_pc$45  = \payload_pc$40 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_pc$45  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload_bus_error$72  = \payload_bus_error$72 ;
    casez (\$400 )
      1'h1:
          \$next\payload_bus_error$72  = payload_bus_error;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_bus_error$72  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_rd$46  = \payload_rd$46 ;
    casez (\$402 )
      1'h1:
          \$next\payload_rd$46  = decoder_rd;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd$46  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload_rs1$47  = \payload_rs1$47 ;
    casez (\$404 )
      1'h1:
          \$next\payload_rs1$47  = decoder_rs1;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rs1$47  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload_rd_we$48  = \payload_rd_we$48 ;
    casez (\$406 )
      1'h1:
          \$next\payload_rd_we$48  = decoder_rd_we;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd_we$48  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_bypass_x  = 1'h0;
    \$next\payload_bypass_x  = \payload_bypass_x$53 ;
  end
  always @* begin
    \$next\payload_rs1_re$49  = \payload_rs1_re$49 ;
    casez (\$408 )
      1'h1:
          \$next\payload_rs1_re$49  = decoder_rs1_re;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rs1_re$49  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_immediate$52  = \payload_immediate$52 ;
    casez (\$410 )
      1'h1:
          \$next\payload_immediate$52  = decoder_immediate;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_immediate$52  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_bypass_x$53  = \payload_bypass_x$53 ;
    casez (\$412 )
      1'h1:
          \$next\payload_bypass_x$53  = decoder_bypass_x;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_bypass_x$53  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_bypass_m$54  = \payload_bypass_m$54 ;
    casez (\$414 )
      1'h1:
          \$next\payload_bypass_m$54  = decoder_bypass_m;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_bypass_m$54  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_funct3$55  = \payload_funct3$55 ;
    casez (\$416 )
      1'h1:
          \$next\payload_funct3$55  = decoder_funct3;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_funct3$55  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload_load$56  = \payload_load$56 ;
    casez (\$418 )
      1'h1:
          \$next\payload_load$56  = decoder_load;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load$56  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_store$57  = \payload_store$57 ;
    casez (\$420 )
      1'h1:
          \$next\payload_store$57  = decoder_store;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_store$57  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_adder_sub$58  = \payload_adder_sub$58 ;
    casez (\$422 )
      1'h1:
          \$next\payload_adder_sub$58  = decoder_adder_sub;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_adder_sub$58  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_compare$64  = \payload_compare$64 ;
    casez (\$424 )
      1'h1:
          \$next\payload_compare$64  = decoder_compare;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_compare$64  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_logic$59  = \payload_logic$59 ;
    casez (\$426 )
      1'h1:
          \$next\payload_logic$59  = decoder_logic;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_logic$59  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_bypass_m  = 1'h0;
    \$next\payload_bypass_m  = \payload_bypass_m$54 ;
  end
  always @* begin
    \$next\payload_shift$60  = \payload_shift$60 ;
    casez (\$428 )
      1'h1:
          \$next\payload_shift$60  = decoder_shift;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_shift$60  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_direction$61  = \payload_direction$61 ;
    casez (\$430 )
      1'h1:
          \$next\payload_direction$61  = decoder_direction;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_direction$61  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_sext$62  = \payload_sext$62 ;
    casez (\$432 )
      1'h1:
          \$next\payload_sext$62  = decoder_sext;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_sext$62  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_jump$63  = \payload_jump$63 ;
    casez (\$434 )
      1'h1:
          \$next\payload_jump$63  = decoder_jump;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_jump$63  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_branch$65  = \payload_branch$65 ;
    casez (\$436 )
      1'h1:
          \$next\payload_branch$65  = decoder_branch;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch$65  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_fence_i$67  = \payload_fence_i$67 ;
    casez (\$438 )
      1'h1:
          \$next\payload_fence_i$67  = decoder_fence_i;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_fence_i$67  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_csr$68  = \payload_csr$68 ;
    casez (\$440 )
      1'h1:
          \$next\payload_csr$68  = decoder_csr;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr$68  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_csr_adr$69  = \payload_csr_adr$69 ;
    casez (\$442 )
      1'h1:
          \$next\payload_csr_adr$69  = decoder_immediate[11:0];
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_adr$69  = 12'h000;
    endcase
  end
  always @* begin
    \$next\payload_csr_we$70  = \payload_csr_we$70 ;
    casez (\$444 )
      1'h1:
          \$next\payload_csr_we$70  = decoder_csr_we;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_we$70  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_ecall$73  = \payload_ecall$73 ;
    casez (\$446 )
      1'h1:
          \$next\payload_ecall$73  = decoder_ecall;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_ecall$73  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_funct3  = 3'h0;
    \$next\payload_funct3  = \payload_funct3$55 ;
  end
  always @* begin
    \$next\payload_ebreak$74  = \payload_ebreak$74 ;
    casez (\$448 )
      1'h1:
          \$next\payload_ebreak$74  = decoder_ebreak;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_ebreak$74  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_mret$75  = \payload_mret$75 ;
    casez (\$450 )
      1'h1:
          \$next\payload_mret$75  = decoder_mret;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mret$75  = 1'h0;
    endcase
  end
  always @* begin
    \$next\d_payload_illegal  = d_payload_illegal;
    casez (\$452 )
      1'h1:
          \$next\d_payload_illegal  = decoder_illegal;
    endcase
    casez (rst)
      1'h1:
          \$next\d_payload_illegal  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_src1$50  = \payload_src1$50 ;
    casez (\$454 )
      1'h1:
          \$next\payload_src1$50  = d_src1;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_src1$50  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_src2$51  = \payload_src2$51 ;
    casez (\$456 )
      1'h1:
          \$next\payload_src2$51  = d_src2;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_src2$51  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_branch_predict_taken  = payload_branch_predict_taken;
    casez (\$458 )
      1'h1:
          \$next\payload_branch_predict_taken  = bp_d_branch_predict_taken;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch_predict_taken  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_branch_target$66  = \payload_branch_target$66 ;
    casez (\$460 )
      1'h1:
          \$next\payload_branch_target$66  = bp_d_branch_target;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch_target$66  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_pc$77  = \payload_pc$77 ;
    casez (\$462 )
      1'h1:
          \$next\payload_pc$77  = \payload_pc$44 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_pc$77  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload_rd$79  = \payload_rd$79 ;
    casez (\$464 )
      1'h1:
          \$next\payload_rd$79  = payload_rd;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd$79  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload_rd_we$81  = \payload_rd_we$81 ;
    casez (\$466 )
      1'h1:
        begin
          \$next\payload_rd_we$81  = payload_rd_we;
          casez (\$474 )
            1'h1:
                \$next\payload_rd_we$81  = 1'h0;
            1'hz:
                \$next\payload_rd_we$81  = payload_rd_we;
          endcase
        end
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd_we$81  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_load  = 1'h0;
    \$next\payload_load  = \payload_load$56 ;
  end
  always @* begin
    \$next\payload_bypass_m$83  = \payload_bypass_m$83 ;
    casez (\$476 )
      1'h1:
          \$next\payload_bypass_m$83  = \$478 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_bypass_m$83  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_load$89  = \payload_load$89 ;
    casez (\$480 )
      1'h1:
          \$next\payload_load$89  = payload_load;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load$89  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_load_mask$90  = \payload_load_mask$90 ;
    casez (\$482 )
      1'h1:
          \$next\payload_load_mask$90  = payload_funct3;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load_mask$90  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload_store$92  = \payload_store$92 ;
    casez (\$484 )
      1'h1:
          \$next\payload_store$92  = payload_store;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_store$92  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_dbus_sel$93  = \payload_dbus_sel$93 ;
    casez (\$486 )
      1'h1:
          \$next\payload_dbus_sel$93  = lsu_x_dbus_sel;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_dbus_sel$93  = 4'h0;
    endcase
  end
  always @* begin
    \$next\payload_store_data$94  = \payload_store_data$94 ;
    casez (\$488 )
      1'h1:
          \$next\payload_store_data$94  = lsu_x_store_data;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_store_data$94  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_compare$96  = \payload_compare$96 ;
    casez (\$490 )
      1'h1:
          \$next\payload_compare$96  = payload_compare;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_compare$96  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_shift$86  = \payload_shift$86 ;
    casez (\$492 )
      1'h1:
          \$next\payload_shift$86  = payload_shift;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_shift$86  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_csr_adr$102  = \payload_csr_adr$102 ;
    casez (\$494 )
      1'h1:
          \$next\payload_csr_adr$102  = payload_csr_adr;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_adr$102  = 12'h000;
    endcase
  end
  always @* begin
    \$next\payload_csr_we$104  = \payload_csr_we$104 ;
    casez (\$496 )
      1'h1:
          \$next\payload_csr_we$104  = \$498 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_we$104  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_store  = 1'h0;
    \$next\payload_store  = \payload_store$57 ;
  end
  always @* begin
    \$next\payload_csr_result$105  = \payload_csr_result$105 ;
    casez (\$500 )
      1'h1:
          \$next\payload_csr_result$105  = x_csr_result;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_result$105  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_exception$108  = \payload_exception$108 ;
    casez (\$502 )
      1'h1:
          \$next\payload_exception$108  = x_exception;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_exception$108  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_mret$107  = \payload_mret$107 ;
    casez (\$504 )
      1'h1:
          \$next\payload_mret$107  = payload_mret;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mret$107  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_condition_met$97  = \payload_condition_met$97 ;
    casez (\$506 )
      1'h1:
          \$next\payload_condition_met$97  = bu_condition_met;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_condition_met$97  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_branch_taken  = payload_branch_taken;
    casez (\$508 )
      1'h1:
          \$next\payload_branch_taken  = \$512 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch_taken  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_branch_predict_taken$100  = \payload_branch_predict_taken$100 ;
    casez (\$514 )
      1'h1:
          \$next\payload_branch_predict_taken$100  = \$518 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch_predict_taken$100  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_mcause_interrupt$110  = \payload_mcause_interrupt$110 ;
    casez (\$520 )
      1'h1:
          \$next\payload_mcause_interrupt$110  = \$524 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mcause_interrupt$110  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_mcause_ecode$109  = \payload_mcause_ecode$109 ;
    casez (\$526 )
      1'h1:
          \$next\payload_mcause_ecode$109  = \$528 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mcause_ecode$109  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\payload_result$84  = \payload_result$84 ;
    casez (\$532 )
      1'h1:
          \$next\payload_result$84  = x_result;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_result$84  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_branch_target$99  = \payload_branch_target$99 ;
    casez (\$534 )
      1'h1:
          casez ({ payload_mret, x_exception })
            2'bz1:
                \$next\payload_branch_target$99  = \$536 [31:0];
            2'b1z:
                \$next\payload_branch_target$99  = x_mepc_value;
            2'hz:
                \$next\payload_branch_target$99  = payload_branch_target;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\payload_branch_target$99  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_adder_sub  = 1'h0;
    \$next\payload_adder_sub  = \payload_adder_sub$58 ;
  end
  always @* begin
    \$next\payload_mepc_value$111  = \payload_mepc_value$111 ;
    casez (\$539 )
      1'h1:
          casez (\$547 )
            1'h1:
                \$next\payload_mepc_value$111  = \$549 [31:0];
            1'hz:
                \$next\payload_mepc_value$111  = \$552 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mepc_value$111  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_pc$113  = \payload_pc$113 ;
    casez (\$557 )
      1'h1:
          \$next\payload_pc$113  = \payload_pc$76 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_pc$113  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload_rd$115  = \payload_rd$115 ;
    casez (\$559 )
      1'h1:
          \$next\payload_rd$115  = \payload_rd$78 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd$115  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload_load$121  = \payload_load$121 ;
    casez (\$561 )
      1'h1:
          \$next\payload_load$121  = \payload_load$88 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load$121  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_load_mask$123  = \payload_load_mask$123 ;
    casez (\$563 )
      1'h1:
          \$next\payload_load_mask$123  = payload_load_mask;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load_mask$123  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload_load_data$124  = \payload_load_data$124 ;
    casez (\$565 )
      1'h1:
          \$next\payload_load_data$124  = lsu_m_load_data;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_load_data$124  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_csr_adr$128  = \payload_csr_adr$128 ;
    casez (\$567 )
      1'h1:
          \$next\payload_csr_adr$128  = \payload_csr_adr$101 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_adr$128  = 12'h000;
    endcase
  end
  always @* begin
    \$next\payload_csr_we$130  = \payload_csr_we$130 ;
    casez (\$569 )
      1'h1:
          \$next\payload_csr_we$130  = \payload_csr_we$103 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_we$130  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_csr_result$132  = \payload_csr_result$132 ;
    casez (\$571 )
      1'h1:
          \$next\payload_csr_result$132  = payload_csr_result;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_csr_result$132  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_mret$134  = \payload_mret$134 ;
    casez (\$573 )
      1'h1:
          \$next\payload_mret$134  = \payload_mret$106 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mret$134  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_logic  = 1'h0;
    \$next\payload_logic  = \payload_logic$59 ;
  end
  always @* begin
    \$next\payload_exception$126  = \payload_exception$126 ;
    casez (\$575 )
      1'h1:
          \$next\payload_exception$126  = payload_exception;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_exception$126  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_mcause_ecode$137  = \payload_mcause_ecode$137 ;
    \$next\payload_mcause_interrupt$138  = \payload_mcause_interrupt$138 ;
    casez (\$577 )
      1'h1:
          { \$next\payload_mcause_interrupt$138 , \$next\payload_mcause_ecode$137  } = { payload_mcause_interrupt, payload_mcause_ecode };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\payload_mcause_ecode$137  = 31'h00000000;
          \$next\payload_mcause_interrupt$138  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\payload_mepc_value$140  = \payload_mepc_value$140 ;
    casez (\$579 )
      1'h1:
          \$next\payload_mepc_value$140  = payload_mepc_value;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_mepc_value$140  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload_rd_we$117  = \payload_rd_we$117 ;
    casez (\$581 )
      1'h1:
          \$next\payload_rd_we$117  = \payload_rd_we$80 ;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_rd_we$117  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload_result$119  = \payload_result$119 ;
    casez (\$583 )
      1'h1:
          \$next\payload_result$119  = m_result;
    endcase
    casez (rst)
      1'h1:
          \$next\payload_result$119  = 32'd0;
    endcase
  end
  always @* begin
    \$next\gprf_wp_en  = 1'h0;
    \$next\gprf_wp_en  = \$589 ;
  end
  always @* begin
    \$next\gprf_wp_addr  = 5'h00;
    \$next\gprf_wp_addr  = \payload_rd$114 ;
  end
  always @* begin
    \$next\gprf_wp_data  = 32'd0;
    \$next\gprf_wp_data  = w_result;
  end
  always @* begin
    \$next\csrf_wp_en  = 1'h0;
    \$next\csrf_wp_en  = \$591 ;
  end
  always @* begin
    \$next\payload_shift  = 1'h0;
    \$next\payload_shift  = \payload_shift$60 ;
  end
  always @* begin
    \$next\csrf_wp_addr  = 12'h000;
    \$next\csrf_wp_addr  = \payload_csr_adr$127 ;
  end
  always @* begin
    \$next\csrf_wp_data  = 32'd0;
    \$next\csrf_wp_data  = \payload_csr_result$131 ;
  end
  always @* begin
    \$next\csrf_port_we  = 1'h0;
    \$next\csrf_port_we  = \$595 ;
  end
  always @* begin
    \$next\csrf_port_dat_w_mpie  = 1'h0;
    casez ({ \payload_mret$133 , \payload_exception$125  })
      2'bz1:
          \$next\csrf_port_dat_w_mpie  = csrf_port_dat_r_mie;
    endcase
  end
  always @* begin
    \$next\csrf_port_dat_w_mie  = 1'h0;
    casez ({ \payload_mret$133 , \payload_exception$125  })
      2'bz1:
          \$next\csrf_port_dat_w_mie  = 1'h0;
      2'b1z:
          \$next\csrf_port_dat_w_mie  = csrf_port_dat_r_mpie;
    endcase
  end
  always @* begin
    \$next\csrf_port_we$33  = 1'h0;
    \$next\csrf_port_we$33  = \$597 ;
  end
  always @* begin
    \$next\csrf_port_dat_w_ecode  = 31'h00000000;
    \$next\csrf_port_dat_w_interrupt  = 1'h0;
    { \$next\csrf_port_dat_w_interrupt , \$next\csrf_port_dat_w_ecode  } = { \payload_mcause_interrupt$136 , \payload_mcause_ecode$135  };
  end
  always @* begin
    \$next\csrf_port_we$34  = 1'h0;
    \$next\csrf_port_we$34  = \$599 ;
  end
  always @* begin
    \$next\csrf_port_dat_w_value  = 32'd0;
    \$next\csrf_port_dat_w_value  = \payload_mepc_value$139 ;
  end
  always @* begin
    \$next\payload_direction  = 1'h0;
    \$next\payload_direction  = \payload_direction$61 ;
  end
  always @* begin
    \$next\payload_pc  = 31'h00000000;
    \$next\payload_pc  = \payload_pc$39 ;
  end
  always @* begin
    \$next\payload_sext  = 1'h0;
    \$next\payload_sext  = \payload_sext$62 ;
  end
  always @* begin
    \$next\payload_jump  = 1'h0;
    \$next\payload_jump  = \payload_jump$63 ;
  end
  always @* begin
    \$next\payload_compare  = 1'h0;
    \$next\payload_compare  = \payload_compare$64 ;
  end
  always @* begin
    \$next\payload_branch  = 1'h0;
    \$next\payload_branch  = \payload_branch$65 ;
  end
  always @* begin
    \$next\payload_branch_target  = 32'd0;
    \$next\payload_branch_target  = \payload_branch_target$66 ;
  end
  always @* begin
    \$next\f_payload_branch_predict_taken  = 1'h0;
    \$next\f_payload_branch_predict_taken  = payload_branch_predict_taken;
  end
  always @* begin
    \$next\payload_fence_i  = 1'h0;
    \$next\payload_fence_i  = \payload_fence_i$67 ;
  end
  always @* begin
    \$next\payload_csr  = 1'h0;
    \$next\payload_csr  = \payload_csr$68 ;
  end
  always @* begin
    \$next\payload_csr_adr  = 12'h000;
    \$next\payload_csr_adr  = \payload_csr_adr$69 ;
  end
  always @* begin
    \$next\payload_csr_we  = 1'h0;
    \$next\payload_csr_we  = \payload_csr_we$70 ;
  end
  always @* begin
    \$next\d_valid  = 1'h0;
    \$next\d_valid  = \f_valid$16 ;
  end
  always @* begin
    \$next\payload_bus_error$71  = 1'h0;
    \$next\payload_bus_error$71  = \payload_bus_error$72 ;
  end
  always @* begin
    \$next\payload_ecall  = 1'h0;
    \$next\payload_ecall  = \payload_ecall$73 ;
  end
  always @* begin
    \$next\payload_ebreak  = 1'h0;
    \$next\payload_ebreak  = \payload_ebreak$74 ;
  end
  always @* begin
    \$next\payload_mret  = 1'h0;
    \$next\payload_mret  = \payload_mret$75 ;
  end
  always @* begin
    \$next\payload_illegal  = 1'h0;
    \$next\payload_illegal  = d_payload_illegal;
  end
  always @* begin
    \$next\m_valid  = 1'h0;
    \$next\m_valid  = \x_valid$25 ;
  end
  always @* begin
    \$next\x_stall  = 1'h0;
    \$next\x_stall  = \m_stall$28 ;
  end
  always @* begin
    \$next\m_kill  = 1'h0;
    \$next\m_kill  = \x_kill$26 ;
  end
  always @* begin
    \$next\payload_pc$76  = 30'h00000000;
    \$next\payload_pc$76  = \payload_pc$77 ;
  end
  always @* begin
    \$next\payload_rd$78  = 5'h00;
    \$next\payload_rd$78  = \payload_rd$79 ;
  end
  always @* begin
    \$next\f_stall  = 1'h0;
    \$next\f_stall  = \d_stall$20 ;
  end
  always @* begin
    \$next\payload_rd_we$80  = 1'h0;
    \$next\payload_rd_we$80  = \payload_rd_we$81 ;
  end
  always @* begin
    \$next\payload_bypass_m$82  = 1'h0;
    \$next\payload_bypass_m$82  = \payload_bypass_m$83 ;
  end
  always @* begin
    \$next\payload_result  = 32'd0;
    \$next\payload_result  = \payload_result$84 ;
  end
  always @* begin
    \$next\payload_shift$85  = 1'h0;
    \$next\payload_shift$85  = \payload_shift$86 ;
  end
  always @* begin
    \$next\payload_dcache_select  = 1'h0;
    \$next\payload_dcache_select  = \payload_dcache_select$87 ;
  end
  always @* begin
    \$next\payload_load$88  = 1'h0;
    \$next\payload_load$88  = \payload_load$89 ;
  end
  always @* begin
    \$next\payload_load_mask  = 3'h0;
    \$next\payload_load_mask  = \payload_load_mask$90 ;
  end
  always @* begin
    \$next\payload_store$91  = 1'h0;
    \$next\payload_store$91  = \payload_store$92 ;
  end
  always @* begin
    \$next\payload_dbus_sel  = 4'h0;
    \$next\payload_dbus_sel  = \payload_dbus_sel$93 ;
  end
  always @* begin
    \$next\payload_store_data  = 32'd0;
    \$next\payload_store_data  = \payload_store_data$94 ;
  end
  always @* begin
    \$next\d_kill  = 1'h0;
    \$next\d_kill  = \f_kill$17 ;
  end
  always @* begin
    \$next\payload_compare$95  = 1'h0;
    \$next\payload_compare$95  = \payload_compare$96 ;
  end
  always @* begin
    \$next\payload_condition_met  = 1'h0;
    \$next\payload_condition_met  = \payload_condition_met$97 ;
  end
  always @* begin
    \$next\payload_branch_target$98  = 32'd0;
    \$next\payload_branch_target$98  = \payload_branch_target$99 ;
  end
  always @* begin
    \$next\a_payload_branch_taken  = 1'h0;
    \$next\a_payload_branch_taken  = payload_branch_taken;
  end
  always @* begin
    \$next\a_payload_branch_predict_taken  = 1'h0;
    \$next\a_payload_branch_predict_taken  = \payload_branch_predict_taken$100 ;
  end
  always @* begin
    \$next\payload_csr_adr$101  = 12'h000;
    \$next\payload_csr_adr$101  = \payload_csr_adr$102 ;
  end
  always @* begin
    \$next\payload_csr_we$103  = 1'h0;
    \$next\payload_csr_we$103  = \payload_csr_we$104 ;
  end
  always @* begin
    \$next\payload_csr_result  = 32'd0;
    \$next\payload_csr_result  = \payload_csr_result$105 ;
  end
  always @* begin
    \$next\payload_mret$106  = 1'h0;
    \$next\payload_mret$106  = \payload_mret$107 ;
  end
  always @* begin
    \$next\payload_exception  = 1'h0;
    \$next\payload_exception  = \payload_exception$108 ;
  end
  always @* begin
    \$next\payload_pc$40  = 30'h00000000;
    \$next\payload_pc$40  = \payload_pc$41 ;
  end
  always @* begin
    \$next\payload_mcause_ecode  = 31'h00000000;
    \$next\payload_mcause_interrupt  = 1'h0;
    { \$next\payload_mcause_interrupt , \$next\payload_mcause_ecode  } = { \payload_mcause_interrupt$110 , \payload_mcause_ecode$109  };
  end
  always @* begin
    \$next\payload_mepc_value  = 32'd0;
    \$next\payload_mepc_value  = \payload_mepc_value$111 ;
  end
  always @* begin
    \$next\w_valid  = 1'h0;
    \$next\w_valid  = \m_valid$29 ;
  end
  always @* begin
    \$next\m_stall  = 1'h0;
    \$next\m_stall  = w_stall;
  end
  always @* begin
    \$next\w_kill  = 1'h0;
    \$next\w_kill  = \m_kill$30 ;
  end
  always @* begin
    \$next\payload_pc$112  = 30'h00000000;
    \$next\payload_pc$112  = \payload_pc$113 ;
  end
  always @* begin
    \$next\payload_rd$114  = 5'h00;
    \$next\payload_rd$114  = \payload_rd$115 ;
  end
  always @* begin
    \$next\payload_rd_we$116  = 1'h0;
    \$next\payload_rd_we$116  = \payload_rd_we$117 ;
  end
  always @* begin
    \$next\payload_result$118  = 32'd0;
    \$next\payload_result$118  = \payload_result$119 ;
  end
  always @* begin
    \$next\payload_instruction  = 32'd0;
    \$next\payload_instruction  = \payload_instruction$42 ;
  end
  always @* begin
    \$next\payload_load$120  = 1'h0;
    \$next\payload_load$120  = \payload_load$121 ;
  end
  always @* begin
    \$next\payload_load_mask$122  = 3'h0;
    \$next\payload_load_mask$122  = \payload_load_mask$123 ;
  end
  always @* begin
    \$next\payload_load_data  = 32'd0;
    \$next\payload_load_data  = \payload_load_data$124 ;
  end
  always @* begin
    \$next\payload_exception$125  = 1'h0;
    \$next\payload_exception$125  = \payload_exception$126 ;
  end
  always @* begin
    \$next\payload_csr_adr$127  = 12'h000;
    \$next\payload_csr_adr$127  = \payload_csr_adr$128 ;
  end
  always @* begin
    \$next\payload_csr_we$129  = 1'h0;
    \$next\payload_csr_we$129  = \payload_csr_we$130 ;
  end
  always @* begin
    \$next\payload_csr_result$131  = 32'd0;
    \$next\payload_csr_result$131  = \payload_csr_result$132 ;
  end
  always @* begin
    \$next\payload_mret$133  = 1'h0;
    \$next\payload_mret$133  = \payload_mret$134 ;
  end
  always @* begin
    \$next\payload_mcause_ecode$135  = 31'h00000000;
    \$next\payload_mcause_interrupt$136  = 1'h0;
    { \$next\payload_mcause_interrupt$136 , \$next\payload_mcause_ecode$135  } = { \payload_mcause_interrupt$138 , \payload_mcause_ecode$137  };
  end
  always @* begin
    \$next\payload_bus_error  = 1'h0;
    \$next\payload_bus_error  = \payload_bus_error$43 ;
  end
  always @* begin
    \$next\payload_mepc_value$139  = 32'd0;
    \$next\payload_mepc_value$139  = \payload_mepc_value$140 ;
  end
  always @* begin
    \$next\a_valid  = 1'h0;
    \$next\a_valid  = 1'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\ifu_f_stall  = 1'h0;
    \$next\ifu_f_stall  = \f_stall$18 ;
  end
  always @* begin
    \$next\ifu_f_valid  = 1'h0;
    \$next\ifu_f_valid  = \f_valid$14 ;
  end
  always @* begin
    \$next\ifu_flush  = 1'h0;
    \$next\ifu_flush  = \$141 ;
  end
  always @* begin
    \$next\ifu_refill_ready  = 1'h0;
    \$next\ifu_refill_ready  = \$143 ;
  end
  always @* begin
    \$next\ibus_adr  = 30'h00000000;
    \$next\ibus_adr  = ifu_ibus_adr;
  end
  always @* begin
    \$next\ibus_dat_w$7  = 32'd0;
    \$next\ibus_dat_w$7  = ibus_dat_w;
  end
  always @* begin
    \$next\ifu_ibus_dat_r  = 32'd0;
    \$next\ifu_ibus_dat_r  = ibus_dat_r;
  end
  always @* begin
    \$next\ibus_sel$8  = 4'h0;
    \$next\ibus_sel$8  = ibus_sel;
  end
  assign \$173  = \$178 ;
  assign \$266  = \$269 ;
  assign \$277  = \$278 ;
  assign \$536  = \$537 ;
  assign \$549  = \$550 ;
  assign \$552  = \$555 ;
  assign csrf_port_dat_w_value = \$next\csrf_port_dat_w_value ;
  assign \csrf_port_we$34  = \$next\csrf_port_we$34 ;
  assign csrf_port_dat_w_ecode = \$next\csrf_port_dat_w_ecode ;
  assign csrf_port_dat_w_interrupt = \$next\csrf_port_dat_w_interrupt ;
  assign \csrf_port_we$33  = \$next\csrf_port_we$33 ;
  assign csrf_port_dat_w_mie = \$next\csrf_port_dat_w_mie ;
  assign csrf_port_dat_w_mpie = \$next\csrf_port_dat_w_mpie ;
  assign csrf_port_we = \$next\csrf_port_we ;
  assign csrf_wp_data = \$next\csrf_wp_data ;
  assign csrf_wp_addr = \$next\csrf_wp_addr ;
  assign csrf_wp_en = \$next\csrf_wp_en ;
  assign gprf_wp_data = \$next\gprf_wp_data ;
  assign gprf_wp_addr = \$next\gprf_wp_addr ;
  assign gprf_wp_en = \$next\gprf_wp_en ;
  assign x_mtvec_mode = \$next\x_mtvec_mode ;
  assign x_mtvec_base = \$next\x_mtvec_base ;
  assign x_mepc_value = \$next\x_mepc_value ;
  assign x_exception = \$next\x_exception ;
  assign csrf_port_dat_w_meip = \$next\csrf_port_dat_w_meip ;
  assign csrf_port_dat_w_mtip = \$next\csrf_port_dat_w_mtip ;
  assign \csrf_port_we$35  = \$next\csrf_port_we$35 ;
  assign \csrf_port_dat_w_value$37  = \$next\csrf_port_dat_w_value$37 ;
  assign \csrf_port_we$36  = \$next\csrf_port_we$36 ;
  assign interrupt_pe_i = \$next\interrupt_pe_i ;
  assign exception_pe_i = \$next\exception_pe_i ;
  assign x_branch_taken = \$next\x_branch_taken ;
  assign d_branch_target = \$next\d_branch_target ;
  assign d_branch_predict_taken = \$next\d_branch_predict_taken ;
  assign bp_d_src1 = \$next\bp_d_src1 ;
  assign bp_d_rs1_re = \$next\bp_d_rs1_re ;
  assign bp_d_pc = \$next\bp_d_pc ;
  assign bp_d_offset = \$next\bp_d_offset ;
  assign bp_d_jump = \$next\bp_d_jump ;
  assign bp_d_branch = \$next\bp_d_branch ;
  assign d_src2 = \$next\d_src2 ;
  assign d_src1 = \$next\d_src1 ;
  assign x_csr_result = \$next\x_csr_result ;
  assign w_result = \$next\w_result ;
  assign m_result = \$next\m_result ;
  assign x_result = \$next\x_result ;
  assign d_m_lock = \$next\d_m_lock ;
  assign d_x_lock = \$next\d_x_lock ;
  assign w_raw_csr = \$next\w_raw_csr ;
  assign m_raw_csr = \$next\m_raw_csr ;
  assign x_raw_csr = \$next\x_raw_csr ;
  assign w_raw_rs2 = \$next\w_raw_rs2 ;
  assign m_raw_rs2 = \$next\m_raw_rs2 ;
  assign x_raw_rs2 = \$next\x_raw_rs2 ;
  assign w_raw_rs1 = \$next\w_raw_rs1 ;
  assign m_raw_rs1 = \$next\m_raw_rs1 ;
  assign x_raw_rs1 = \$next\x_raw_rs1 ;
  assign lsu_w_load_data = \$next\lsu_w_load_data ;
  assign lsu_w_load_mask = \$next\lsu_w_load_mask ;
  assign lsu_w_address = \$next\lsu_w_address ;
  assign lsu_x_stall = \$next\lsu_x_stall ;
  assign lsu_x_mask = \$next\lsu_x_mask ;
  assign lsu_x_store_operand = \$next\lsu_x_store_operand ;
  assign x_x_store = \$next\x_x_store ;
  assign x_x_load = \$next\x_x_load ;
  assign lsu_x_address = \$next\lsu_x_address ;
  assign lsu_dbus_err = \$next\lsu_dbus_err ;
  assign dbus_bte = \$next\dbus_bte ;
  assign dbus_cti = \$next\dbus_cti ;
  assign dbus_we = \$next\dbus_we ;
  assign lsu_dbus_ack = \$next\lsu_dbus_ack ;
  assign dbus_stb = \$next\dbus_stb ;
  assign dbus_cyc = \$next\dbus_cyc ;
  assign dbus_sel = \$next\dbus_sel ;
  assign lsu_dbus_dat_r = \$next\lsu_dbus_dat_r ;
  assign dbus_dat_w = \$next\dbus_dat_w ;
  assign dbus_adr = \$next\dbus_adr ;
  assign dcache_stall_request = \$next\dcache_stall_request ;
  assign lsu_m_stall = \$next\lsu_m_stall ;
  assign lsu_m_store_data = \$next\lsu_m_store_data ;
  assign lsu_m_dbus_sel = \$next\lsu_m_dbus_sel ;
  assign m_m_store = \$next\m_m_store ;
  assign m_m_load = \$next\m_m_load ;
  assign m_m_dcache_select = \$next\m_m_dcache_select ;
  assign lsu_m_address = \$next\lsu_m_address ;
  assign shifter_x_stall = \$next\shifter_x_stall ;
  assign shifter_x_src1 = \$next\shifter_x_src1 ;
  assign shifter_x_shamt = \$next\shifter_x_shamt ;
  assign shifter_x_sext = \$next\shifter_x_sext ;
  assign shifter_x_direction = \$next\shifter_x_direction ;
  assign bu_cmp_carry = \$next\bu_cmp_carry ;
  assign bu_cmp_overflow = \$next\bu_cmp_overflow ;
  assign bu_cmp_negative = \$next\bu_cmp_negative ;
  assign bu_cmp_zero = \$next\bu_cmp_zero ;
  assign bu_condition = \$next\bu_condition ;
  assign adder_src2 = \$next\adder_src2 ;
  assign adder_src1 = \$next\adder_src1 ;
  assign adder_op = \$next\adder_op ;
  assign logic_src2 = \$next\logic_src2 ;
  assign logic_src1 = \$next\logic_src1 ;
  assign logic_op = \$next\logic_op ;
  assign csrf_rp_addr = \$next\csrf_rp_addr ;
  assign gprf_rp2_addr = \$next\gprf_rp2_addr ;
  assign gprf_rp1_addr = \$next\gprf_rp1_addr ;
  assign decoder_instruction = \$next\decoder_instruction ;
  assign m_m_branch_predict_taken = \$next\m_m_branch_predict_taken ;
  assign ifu_m_branch_target = \$next\ifu_m_branch_target ;
  assign m_m_branch_taken = \$next\m_m_branch_taken ;
  assign ifu_x_pc = \$next\ifu_x_pc ;
  assign ifu_d_branch_target = \$next\ifu_d_branch_target ;
  assign ifu_d_branch_predict_taken = \$next\ifu_d_branch_predict_taken ;
  assign ifu_f_pc = \$next\ifu_f_pc ;
  assign ifu_a_stall = \$next\ifu_a_stall ;
  assign ifu_ibus_err = \$next\ifu_ibus_err ;
  assign ibus_bte = \$next\ibus_bte ;
  assign ibus_cti = \$next\ibus_cti ;
  assign \ibus_we$9  = \$next\ibus_we$9 ;
  assign ifu_ibus_ack = \$next\ifu_ibus_ack ;
  assign ibus_stb = \$next\ibus_stb ;
  assign ibus_cyc = \$next\ibus_cyc ;
  assign \ibus_sel$8  = \$next\ibus_sel$8 ;
  assign ifu_ibus_dat_r = \$next\ifu_ibus_dat_r ;
  assign \ibus_dat_w$7  = \$next\ibus_dat_w$7 ;
  assign ibus_adr = \$next\ibus_adr ;
  assign ifu_refill_ready = \$next\ifu_refill_ready ;
  assign ifu_flush = \$next\ifu_flush ;
  assign ifu_f_valid = \$next\ifu_f_valid ;
  assign ifu_f_stall = \$next\ifu_f_stall ;
  assign a_valid = \$next\a_valid ;
  assign \payload_mepc_value$139  = \$next\payload_mepc_value$139 ;
  assign \payload_mcause_ecode$135  = \$next\payload_mcause_ecode$135 ;
  assign \payload_mcause_interrupt$136  = \$next\payload_mcause_interrupt$136 ;
  assign \payload_mret$133  = \$next\payload_mret$133 ;
  assign \payload_csr_result$131  = \$next\payload_csr_result$131 ;
  assign \payload_csr_we$129  = \$next\payload_csr_we$129 ;
  assign \payload_csr_adr$127  = \$next\payload_csr_adr$127 ;
  assign \payload_exception$125  = \$next\payload_exception$125 ;
  assign payload_load_data = \$next\payload_load_data ;
  assign \payload_load_mask$122  = \$next\payload_load_mask$122 ;
  assign \payload_load$120  = \$next\payload_load$120 ;
  assign \payload_result$118  = \$next\payload_result$118 ;
  assign \payload_rd_we$116  = \$next\payload_rd_we$116 ;
  assign \payload_rd$114  = \$next\payload_rd$114 ;
  assign \payload_pc$112  = \$next\payload_pc$112 ;
  assign w_kill = \$next\w_kill ;
  assign m_stall = \$next\m_stall ;
  assign w_valid = \$next\w_valid ;
  assign payload_mepc_value = \$next\payload_mepc_value ;
  assign payload_mcause_ecode = \$next\payload_mcause_ecode ;
  assign payload_mcause_interrupt = \$next\payload_mcause_interrupt ;
  assign payload_exception = \$next\payload_exception ;
  assign \payload_mret$106  = \$next\payload_mret$106 ;
  assign payload_csr_result = \$next\payload_csr_result ;
  assign \payload_csr_we$103  = \$next\payload_csr_we$103 ;
  assign \payload_csr_adr$101  = \$next\payload_csr_adr$101 ;
  assign a_payload_branch_predict_taken = \$next\a_payload_branch_predict_taken ;
  assign a_payload_branch_taken = \$next\a_payload_branch_taken ;
  assign \payload_branch_target$98  = \$next\payload_branch_target$98 ;
  assign payload_condition_met = \$next\payload_condition_met ;
  assign \payload_compare$95  = \$next\payload_compare$95 ;
  assign payload_store_data = \$next\payload_store_data ;
  assign payload_dbus_sel = \$next\payload_dbus_sel ;
  assign \payload_store$91  = \$next\payload_store$91 ;
  assign payload_load_mask = \$next\payload_load_mask ;
  assign \payload_load$88  = \$next\payload_load$88 ;
  assign payload_dcache_select = \$next\payload_dcache_select ;
  assign \payload_shift$85  = \$next\payload_shift$85 ;
  assign payload_result = \$next\payload_result ;
  assign \payload_bypass_m$82  = \$next\payload_bypass_m$82 ;
  assign \payload_rd_we$80  = \$next\payload_rd_we$80 ;
  assign \payload_rd$78  = \$next\payload_rd$78 ;
  assign \payload_pc$76  = \$next\payload_pc$76 ;
  assign m_kill = \$next\m_kill ;
  assign x_stall = \$next\x_stall ;
  assign m_valid = \$next\m_valid ;
  assign payload_illegal = \$next\payload_illegal ;
  assign payload_mret = \$next\payload_mret ;
  assign payload_ebreak = \$next\payload_ebreak ;
  assign payload_ecall = \$next\payload_ecall ;
  assign \payload_bus_error$71  = \$next\payload_bus_error$71 ;
  assign payload_csr_we = \$next\payload_csr_we ;
  assign payload_csr_adr = \$next\payload_csr_adr ;
  assign payload_csr = \$next\payload_csr ;
  assign payload_fence_i = \$next\payload_fence_i ;
  assign f_payload_branch_predict_taken = \$next\f_payload_branch_predict_taken ;
  assign payload_branch_target = \$next\payload_branch_target ;
  assign payload_branch = \$next\payload_branch ;
  assign payload_compare = \$next\payload_compare ;
  assign payload_jump = \$next\payload_jump ;
  assign payload_sext = \$next\payload_sext ;
  assign payload_direction = \$next\payload_direction ;
  assign payload_shift = \$next\payload_shift ;
  assign payload_logic = \$next\payload_logic ;
  assign payload_adder_sub = \$next\payload_adder_sub ;
  assign payload_store = \$next\payload_store ;
  assign payload_load = \$next\payload_load ;
  assign payload_funct3 = \$next\payload_funct3 ;
  assign payload_bypass_m = \$next\payload_bypass_m ;
  assign payload_bypass_x = \$next\payload_bypass_x ;
  assign payload_immediate = \$next\payload_immediate ;
  assign payload_src2 = \$next\payload_src2 ;
  assign payload_src1 = \$next\payload_src1 ;
  assign payload_rs1_re = \$next\payload_rs1_re ;
  assign payload_rd_we = \$next\payload_rd_we ;
  assign payload_rs1 = \$next\payload_rs1 ;
  assign payload_rd = \$next\payload_rd ;
  assign \payload_pc$44  = \$next\payload_pc$44 ;
  assign x_kill = \$next\x_kill ;
  assign d_stall = \$next\d_stall ;
  assign x_valid = \$next\x_valid ;
  assign payload_bus_error = \$next\payload_bus_error ;
  assign payload_instruction = \$next\payload_instruction ;
  assign \payload_pc$40  = \$next\payload_pc$40 ;
  assign d_kill = \$next\d_kill ;
  assign f_stall = \$next\f_stall ;
  assign d_valid = \$next\d_valid ;
  assign payload_pc = \$next\payload_pc ;
  assign f_kill = \$next\f_kill ;
  assign a_stall = \$next\a_stall ;
  assign f_valid = \$next\f_valid ;
endmodule

module shifter(x_src1, x_sext, x_stall, x_shamt, rst, clk, m_result, x_direction);
  wire [31:0] \$1 ;
  wire \$10 ;
  wire [63:0] \$12 ;
  wire [63:0] \$13 ;
  wire [31:0] \$15 ;
  wire \$3 ;
  wire \$4 ;
  wire \$7 ;
  reg \$next\m_direction ;
  reg [31:0] \$next\m_result ;
  reg [31:0] \$next\m_result$9 ;
  reg \$next\x_filler ;
  reg [31:0] \$next\x_operand ;
  input clk;
  reg m_direction = 1'h0;
  output [31:0] m_result;
  reg [31:0] \m_result$9  = 32'd0;
  input rst;
  input x_direction;
  wire x_filler;
  wire [31:0] x_operand;
  input x_sext;
  input [4:0] x_shamt;
  input [31:0] x_src1;
  input x_stall;
  assign \$10  = ~ x_stall;
  assign \$13  = { x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_operand } >>> x_shamt;
  assign \$15  = m_direction ? \m_result$9  : { \m_result$9 [0], \m_result$9 [1], \m_result$9 [2], \m_result$9 [3], \m_result$9 [4], \m_result$9 [5], \m_result$9 [6], \m_result$9 [7], \m_result$9 [8], \m_result$9 [9], \m_result$9 [10], \m_result$9 [11], \m_result$9 [12], \m_result$9 [13], \m_result$9 [14], \m_result$9 [15], \m_result$9 [16], \m_result$9 [17], \m_result$9 [18], \m_result$9 [19], \m_result$9 [20], \m_result$9 [21], \m_result$9 [22], \m_result$9 [23], \m_result$9 [24], \m_result$9 [25], \m_result$9 [26], \m_result$9 [27], \m_result$9 [28], \m_result$9 [29], \m_result$9 [30], \m_result$9 [31] };
  assign \$1  = x_direction ? x_src1 : { x_src1[0], x_src1[1], x_src1[2], x_src1[3], x_src1[4], x_src1[5], x_src1[6], x_src1[7], x_src1[8], x_src1[9], x_src1[10], x_src1[11], x_src1[12], x_src1[13], x_src1[14], x_src1[15], x_src1[16], x_src1[17], x_src1[18], x_src1[19], x_src1[20], x_src1[21], x_src1[22], x_src1[23], x_src1[24], x_src1[25], x_src1[26], x_src1[27], x_src1[28], x_src1[29], x_src1[30], x_src1[31] };
  assign \$4  = x_direction & x_sext;
  assign \$3  = \$4  ? x_src1[31] : 1'h0;
  assign \$7  = ~ x_stall;
  always @(posedge clk)
      \m_result$9  <= \$next\m_result$9 ;
  always @(posedge clk)
      m_direction <= \$next\m_direction ;
  always @* begin
    \$next\x_operand  = 32'd0;
    \$next\x_operand  = \$1 ;
  end
  always @* begin
    \$next\x_filler  = 1'h0;
    \$next\x_filler  = \$3 ;
  end
  always @* begin
    \$next\m_direction  = m_direction;
    casez (\$7 )
      1'h1:
          \$next\m_direction  = x_direction;
    endcase
    casez (rst)
      1'h1:
          \$next\m_direction  = 1'h0;
    endcase
  end
  always @* begin
    \$next\m_result$9  = \m_result$9 ;
    casez (\$10 )
      1'h1:
          \$next\m_result$9  = \$12 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next\m_result$9  = 32'd0;
    endcase
  end
  always @* begin
    \$next\m_result  = 32'd0;
    \$next\m_result  = \$15 ;
  end
  assign \$12  = \$13 ;
  assign m_result = \$next\m_result ;
  assign x_filler = \$next\x_filler ;
  assign x_operand = \$next\x_operand ;
endmodule

module w(kill, \valid$1 , stall, valid);
  wire \$2 ;
  wire \$4 ;
  reg \$next\stall ;
  reg \$next\stall$6 ;
  reg \$next\valid$1 ;
  reg \$verilog_initial_trigger  = 1'h0;
  input kill;
  output stall;
  wire \stall$6 ;
  input valid;
  output \valid$1 ;
  assign \$2  = ~ kill;
  assign \$4  = valid & \$2 ;
  always @* begin
    \$next\valid$1  = 1'h0;
    \$next\valid$1  = \$4 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$6 ;
  end
  always @* begin
    \$next\stall$6  = 1'h0;
    \$next\stall$6  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  assign \stall$6  = \$next\stall$6 ;
  assign stall = \$next\stall ;
  assign \valid$1  = \$next\valid$1 ;
endmodule

module way_sel(o, n, i);
  reg \$next\n ;
  reg \$next\o ;
  input i;
  output n;
  output o;
  always @* begin
    \$next\o  = 1'h0;
    casez (i)
      1'h1:
          \$next\o  = 1'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    casez (i)
      1'h1:
          /* empty */;
      1'hz:
          \$next\n  = 1'h1;
    endcase
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

module \way_sel$2 (o, n, i);
  reg \$next\n ;
  reg \$next\o ;
  input i;
  output n;
  output o;
  always @* begin
    \$next\o  = 1'h0;
    casez (i)
      1'h1:
          \$next\o  = 1'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    casez (i)
      1'h1:
          /* empty */;
      1'hz:
          \$next\n  = 1'h1;
    endcase
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

module wrbuf(we, replace, re, rst, clk, readable, dout, writable, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [3:0] \$19 ;
  wire \$2 ;
  wire [3:0] \$20 ;
  wire \$22 ;
  wire [3:0] \$24 ;
  wire [3:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [4:0] \$39 ;
  wire \$4 ;
  wire [4:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [4:0] \$54 ;
  wire [4:0] \$55 ;
  wire [3:0] \$6 ;
  wire [3:0] \$7 ;
  wire \$9 ;
  reg [2:0] \$next\consume ;
  reg [65:0] \$next\dout ;
  reg [3:0] \$next\level ;
  reg [2:0] \$next\produce ;
  reg [2:0] \$next\rdport_storage_r_addr ;
  reg \$next\readable ;
  reg \$next\writable ;
  reg [2:0] \$next\wrport_storage_w_addr ;
  reg [65:0] \$next\wrport_storage_w_data ;
  reg \$next\wrport_storage_w_en ;
  input clk;
  reg [2:0] consume = 3'h0;
  input [65:0] din;
  output [65:0] dout;
  reg [3:0] level = 4'h0;
  reg [2:0] produce = 3'h0;
  wire [2:0] rdport_storage_r_addr;
  wire [65:0] rdport_storage_r_data;
  input re;
  output readable;
  input replace;
  input rst;
  input we;
  output writable;
  wire [2:0] wrport_storage_w_addr;
  wire [65:0] wrport_storage_w_data;
  wire wrport_storage_w_en;
  assign \$9  = writable | replace;
  assign \$11  = we & \$9 ;
  assign \$13  = writable & we;
  assign \$15  = ~ replace;
  assign \$17  = \$13  & \$15 ;
  assign \$20  = produce + 1'h1;
  assign \$22  = readable & re;
  assign \$25  = consume + 1'h1;
  assign \$27  = writable & we;
  assign \$2  = level != 4'h8;
  assign \$29  = ~ replace;
  assign \$31  = \$27  & \$29 ;
  assign \$34  = readable & re;
  assign \$33  = ~ \$34 ;
  assign \$37  = \$31  & \$33 ;
  assign \$40  = level + 1'h1;
  assign \$42  = readable & re;
  assign \$45  = writable & we;
  assign \$47  = ~ replace;
  assign \$4  = level != 1'h0;
  assign \$49  = \$45  & \$47 ;
  assign \$44  = ~ \$49 ;
  assign \$52  = \$42  & \$44 ;
  assign \$55  = level - 1'h1;
  assign \$7  = produce - 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [65:0] storage [7:0];
  initial begin
    storage[0] = 66'h00000000000000000;
    storage[1] = 66'h00000000000000000;
    storage[2] = 66'h00000000000000000;
    storage[3] = 66'h00000000000000000;
    storage[4] = 66'h00000000000000000;
    storage[5] = 66'h00000000000000000;
    storage[6] = 66'h00000000000000000;
    storage[7] = 66'h00000000000000000;
  end
  reg [2:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\rdport_storage_r_addr ;
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[_0_];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 3'h0;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [2:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 66'h00000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 3'h0;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 3'h0;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 66'h00000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 3'h0;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [3:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [3:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 4'h0;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

module x(kill, stall, stall_request, x_load, x_store, x_dcache_select, dbus_cyc, readable, refill_request, rst, clk, \valid$1 , \stall$2 , \valid$3 , \kill$4 , \stall$5 , valid);
  wire \$10 ;
  wire \$12 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$6 ;
  wire \$8 ;
  reg \$next\kill$14 ;
  reg \$next\kill$4 ;
  reg \$next\stall$2 ;
  reg \$next\stall$5 ;
  reg \$next\valid$1 ;
  reg \$next\valid$3 ;
  reg \$verilog_initial_trigger  = 1'h0;
  input clk;
  input dbus_cyc;
  input kill;
  wire \kill$14 ;
  output \kill$4 ;
  input readable;
  input refill_request;
  input rst;
  input stall;
  output \stall$2 ;
  output \stall$5 ;
  input stall_request;
  input valid;
  output \valid$1 ;
  output \valid$3 ;
  reg \valid$3  = 1'h0;
  input x_dcache_select;
  input x_load;
  input x_store;
  assign \$10  = ~ \stall$5 ;
  assign \$12  = ~ stall;
  assign \$15  = \$12  | \kill$14 ;
  assign \$17  = 1'h0 | stall_request;
  assign \$19  = x_load | x_store;
  assign \$21  = ~ x_dcache_select;
  assign \$23  = \$19  & \$21 ;
  assign \$25  = dbus_cyc | readable;
  assign \$27  = \$25  | refill_request;
  assign \$29  = \$23  & \$27 ;
  assign \$31  = \$17  | \$29 ;
  assign \$33  = \$31  | stall;
  assign \$6  = ~ kill;
  assign \$8  = valid & \$6 ;
  always @(posedge clk)
      \valid$3  <= \$next\valid$3 ;
  always @* begin
    \$next\valid$1  = 1'h0;
    \$next\valid$1  = \$8 ;
  end
  always @* begin
    \$next\stall$2  = 1'h0;
    \$next\stall$2  = \stall$5 ;
  end
  always @* begin
    \$next\valid$3  = \valid$3 ;
    casez ({ \$15 , \$10  })
      2'bz1:
          \$next\valid$3  = \valid$1 ;
      2'b1z:
          \$next\valid$3  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$3  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$4  = 1'h0;
    \$next\kill$4  = \kill$14 ;
  end
  always @* begin
    \$next\kill$14  = 1'h0;
    \$next\kill$14  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\stall$5  = 1'h0;
    \$next\stall$5  = \$33 ;
  end
  assign \stall$5  = \$next\stall$5 ;
  assign \kill$14  = \$next\kill$14 ;
  assign \kill$4  = \$next\kill$4 ;
  assign \stall$2  = \$next\stall$2 ;
  assign \valid$1  = \$next\valid$1 ;
endmodule

